From 95d07bad26ac68c9a9179acda9d97446bab88751 Mon Sep 17 00:00:00 2001
From: Maninda Edirisooriya <mwe163@gmail.com>
Date: Fri, 28 Aug 2020 13:24:20 +0530
Subject: [PATCH 2/2] Remove Email Connector from ballerina-lang

---
 compiler/ballerina-backend-jvm/build.gradle   |   2 -
 compiler/ballerina-backend-llvm/build.gradle  |   1 -
 distribution/zip/jballerina-tools/LICENSE     |   2 -
 .../zip/jballerina-tools/build.gradle         |   1 -
 distribution/zip/jballerina/build.gradle      |   2 -
 gradle/javaLibsProject.gradle                 |   1 -
 .../modules/langserver-core/build.gradle      |   2 -
 misc/ballerinalang-data-mapper/build.gradle   |   1 -
 .../modules/testerina-core/build.gradle       |   1 -
 settings.gradle                               |   2 -
 stdlib/email/build.gradle                     |  86 ----
 stdlib/email/spotbugs-exclude.xml             |  20 -
 .../email/src/main/ballerina/Ballerina.toml   |  20 -
 .../src/main/ballerina/src/email/Module.md    | 130 ------
 .../src/main/ballerina/src/email/commons.bal  |  47 ---
 .../main/ballerina/src/email/email_errors.bal |  27 --
 .../src/email/imap_client_endpoint.bal        |  69 ---
 .../ballerina/src/email/listener_endpoint.bal | 183 --------
 .../src/email/pop_client_endpoint.bal         |  69 ---
 .../src/email/smtp_client_endpoint.bal        |  98 -----
 .../email/client/EmailAccessClient.java       | 147 -------
 .../stdlib/email/client/SmtpClient.java       |  89 ----
 .../stdlib/email/server/EmailConnector.java   |  73 ----
 .../email/server/EmailConnectorException.java |  33 --
 .../email/server/EmailConnectorFactory.java   |  45 --
 .../stdlib/email/server/EmailConsumer.java    | 112 -----
 .../stdlib/email/server/EmailEvent.java       |  45 --
 .../stdlib/email/server/EmailListener.java    |  98 -----
 .../email/server/EmailListenerHelper.java     | 115 -----
 .../compiler/EmailListenerCompilerPlugin.java | 120 ------
 .../stdlib/email/util/CommonUtil.java         | 109 -----
 .../stdlib/email/util/EmailAccessUtil.java    | 395 ------------------
 .../stdlib/email/util/EmailConstants.java     | 124 ------
 .../stdlib/email/util/SmtpUtil.java           | 268 ------------
 ...lerinalang.compiler.plugins.CompilerPlugin |   1 -
 .../email/ImapComplexEmailReceiveTest.java    | 177 --------
 .../ImapSimpleSecureEmailReceiveTest.java     | 158 -------
 .../stdlib/email/ListenerImapReceiveTest.java | 147 -------
 .../stdlib/email/ListenerPopReceiveTest.java  | 147 -------
 .../email/PopComplexEmailReceiveTest.java     | 177 --------
 .../PopSimpleSecureEmailReceiveTest.java      | 158 -------
 .../email/SmtpComplexEmailSendTest.java       | 261 ------------
 .../email/SmtpSimpleSecureEmailSendTest.java  | 115 -----
 .../test/resources/datafiles/corona_virus.jpg | Bin 127854 -> 0 bytes
 .../src/test/resources/datafiles/file.xml     |   1 -
 .../src/test/resources/datafiles/test.tmp     |   1 -
 .../test-src/ImapComplexEmailReceive.bal      | 102 -----
 .../test-src/ImapSimpleSecureEmailReceive.bal |  27 --
 .../test-src/ListenerImapReceive.bal          |  89 ----
 .../resources/test-src/ListenerPopReceive.bal |  89 ----
 .../test-src/PopComplexEmailReceive.bal       | 100 -----
 .../test-src/PopSimpleSecureEmailReceive.bal  |  27 --
 .../test-src/SmtpComplexEmailSend.bal         |  91 ----
 .../test-src/SmtpSimpleSecureEmailSend.bal    |  34 --
 stdlib/email/src/test/resources/testng.xml    |  38 --
 tests/jballerina-unit-test/build.gradle       |   1 -
 .../mocking-tests/src/object-mock/main.bal    |  32 +-
 .../src/object-mock/tests/main_test.bal       | 194 ++++-----
 58 files changed, 113 insertions(+), 4591 deletions(-)
 delete mode 100644 stdlib/email/build.gradle
 delete mode 100644 stdlib/email/spotbugs-exclude.xml
 delete mode 100644 stdlib/email/src/main/ballerina/Ballerina.toml
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/Module.md
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/commons.bal
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/email_errors.bal
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal
 delete mode 100644 stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorException.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorFactory.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailEvent.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailAccessUtil.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailConstants.java
 delete mode 100644 stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java
 delete mode 100644 stdlib/email/src/main/resources/META-INF/services/org.ballerinalang.compiler.plugins.CompilerPlugin
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapComplexEmailReceiveTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleSecureEmailReceiveTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerImapReceiveTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerPopReceiveTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopComplexEmailReceiveTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopSimpleSecureEmailReceiveTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpComplexEmailSendTest.java
 delete mode 100644 stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpSimpleSecureEmailSendTest.java
 delete mode 100644 stdlib/email/src/test/resources/datafiles/corona_virus.jpg
 delete mode 100644 stdlib/email/src/test/resources/datafiles/file.xml
 delete mode 100644 stdlib/email/src/test/resources/datafiles/test.tmp
 delete mode 100644 stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/ImapSimpleSecureEmailReceive.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/ListenerImapReceive.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/ListenerPopReceive.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/PopComplexEmailReceive.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/PopSimpleSecureEmailReceive.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/SmtpComplexEmailSend.bal
 delete mode 100644 stdlib/email/src/test/resources/test-src/SmtpSimpleSecureEmailSend.bal
 delete mode 100644 stdlib/email/src/test/resources/testng.xml

diff --git a/compiler/ballerina-backend-jvm/build.gradle b/compiler/ballerina-backend-jvm/build.gradle
index 2bd0e5e6682..fbdbdd13a5b 100644
--- a/compiler/ballerina-backend-jvm/build.gradle
+++ b/compiler/ballerina-backend-jvm/build.gradle
@@ -37,7 +37,6 @@ dependencies {
     baloImplementation project(path: ':ballerina-reflect', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-system', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-email', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-stringutils', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-java', configuration: 'baloImplementation')
@@ -46,7 +45,6 @@ dependencies {
     interopImports project(':ballerina-io')
     interopImports project(':ballerina-time')
     interopImports project(':ballerina-reflect')
-    interopImports project(':ballerina-email')
     interopImports project(':ballerina-file')
     interopImports project(':ballerina-runtime-api')
 
diff --git a/compiler/ballerina-backend-llvm/build.gradle b/compiler/ballerina-backend-llvm/build.gradle
index 3be6f88c351..2c7903299dd 100644
--- a/compiler/ballerina-backend-llvm/build.gradle
+++ b/compiler/ballerina-backend-llvm/build.gradle
@@ -39,7 +39,6 @@ dependencies {
     baloImplementation project(path: ':ballerina-reflect', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-system', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-email', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-java', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-llvm', configuration: 'baloImplementation')
diff --git a/distribution/zip/jballerina-tools/LICENSE b/distribution/zip/jballerina-tools/LICENSE
index 524f1785db8..86194da1627 100644
--- a/distribution/zip/jballerina-tools/LICENSE
+++ b/distribution/zip/jballerina-tools/LICENSE
@@ -23,7 +23,6 @@ ballerina-reflect-0.5.0.jar
 ballerina-mime-1.0.0.jar                                                                            jar            apache2
 ballerina-lang.map-1.1.0-java.jar                                                                   jar            apache2
 ballerina-lang.decimal-1.0.0-java.jar                                                               jar            apache2
-ballerina-email-0.6.0-java.jar                                                                      jar            apache2
 ballerina-crypto-1.0.0-java.jar                                                                     jar            apache2
 metrics-core-3.1.0.jar                                                                              bundle         apache2
 bcpkix-jdk15on-1.61.jar                                                                             bundle         bouncy
@@ -104,7 +103,6 @@ mimepull-1.9.7.jar
 testerina-core-2.0.0-Preview1.jar                                                                   jar            apache2
 netty-handler-4.1.39.Final.jar                                                                      bundle         apache2
 ballerina-java-0.9.0-java.jar                                                                       jar            apache2
-ballerina-email-0.6.0.jar                                                                           jar            apache2
 ballerina-math-1.0.0-java.jar                                                                       jar            apache2
 ballerina-runtime-0.5.0.jar                                                                         jar            apache2
 ballerina-log-1.0.0-java.jar                                                                        jar            apache2
diff --git a/distribution/zip/jballerina-tools/build.gradle b/distribution/zip/jballerina-tools/build.gradle
index b7ada77297b..0ac3489b3fc 100644
--- a/distribution/zip/jballerina-tools/build.gradle
+++ b/distribution/zip/jballerina-tools/build.gradle
@@ -158,7 +158,6 @@ dependencies {
 
     balDoc project(path: ':ballerina-cache', configuration: 'balDoc')
     balDoc project(path: ':ballerina-crypto', configuration: 'balDoc')
-    balDoc project(path: ':ballerina-email', configuration: 'balDoc')
     balDoc project(path: ':ballerina-file', configuration: 'balDoc')
     balDoc project(path: ':ballerina-filepath', configuration: 'balDoc')
     balDoc project(path: ':ballerina-http', configuration: 'balDoc')
diff --git a/distribution/zip/jballerina/build.gradle b/distribution/zip/jballerina/build.gradle
index be89f4c30ad..819243cf208 100644
--- a/distribution/zip/jballerina/build.gradle
+++ b/distribution/zip/jballerina/build.gradle
@@ -53,7 +53,6 @@ dependencies {
 
     distBal project(path: ':ballerina-cache', configuration: 'baloImplementation')
     distBal project(path: ':ballerina-crypto', configuration: 'baloImplementation')
-    distBal project(path: ':ballerina-email', configuration: 'baloImplementation')
     distBal project(path: ':ballerina-file', configuration: 'baloImplementation')
     distBal project(path: ':ballerina-filepath', configuration: 'baloImplementation')
     distBal project(path: ':ballerina-sql', configuration: 'baloImplementation')
@@ -95,7 +94,6 @@ dependencies {
 
     balSource project(path: ':ballerina-cache', configuration: 'balSource')
     balSource project(path: ':ballerina-crypto', configuration: 'balSource')
-    balSource project(path: ':ballerina-email', configuration: 'balSource')
     balSource project(path: ':ballerina-file', configuration: 'balSource')
     balSource project(path: ':ballerina-filepath', configuration: 'balSource')
     balSource project(path: ':ballerina-http', configuration: 'balSource')
diff --git a/gradle/javaLibsProject.gradle b/gradle/javaLibsProject.gradle
index 082cecb49ea..8e9bf52ca0d 100644
--- a/gradle/javaLibsProject.gradle
+++ b/gradle/javaLibsProject.gradle
@@ -89,7 +89,6 @@ dependencies {
     dist project(':ballerina-core')
     dist project(':ballerina-crypto')
     dist project(':ballerina-cache')
-    dist project(':ballerina-email')
     dist project(':ballerina-file')
     dist project(':ballerina-filepath')
     dist project(':ballerina-sql')
diff --git a/language-server/modules/langserver-core/build.gradle b/language-server/modules/langserver-core/build.gradle
index 755f377c8e8..e7882d917ad 100644
--- a/language-server/modules/langserver-core/build.gradle
+++ b/language-server/modules/langserver-core/build.gradle
@@ -54,7 +54,6 @@ dependencies {
     implementation project(':ballerina-config-api')
     implementation project(':ballerina-crypto')
     implementation project(':ballerina-java')
-    implementation project(':ballerina-email')
     implementation project(':ballerina-file')
     implementation project(':ballerina-filepath')
     implementation project(':ballerina-http')
@@ -103,7 +102,6 @@ dependencies {
     baloImplementation project(path: ':ballerina-config-api', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-crypto', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-java', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-email', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-filepath', configuration: 'baloImplementation')
     baloImplementation project(path: ':ballerina-http', configuration: 'baloImplementation')
diff --git a/misc/ballerinalang-data-mapper/build.gradle b/misc/ballerinalang-data-mapper/build.gradle
index c41da22a7b6..4effca2deed 100644
--- a/misc/ballerinalang-data-mapper/build.gradle
+++ b/misc/ballerinalang-data-mapper/build.gradle
@@ -36,7 +36,6 @@ dependencies {
     implementation project(':ballerina-config-api')
     implementation project(':ballerina-crypto')
     implementation project(':ballerina-java')
-    implementation project(':ballerina-email')
     implementation project(':ballerina-file')
     implementation project(':ballerina-filepath')
     implementation project(':ballerina-http')
diff --git a/misc/testerina/modules/testerina-core/build.gradle b/misc/testerina/modules/testerina-core/build.gradle
index d1e845631a0..23c5bd2cf96 100644
--- a/misc/testerina/modules/testerina-core/build.gradle
+++ b/misc/testerina/modules/testerina-core/build.gradle
@@ -30,7 +30,6 @@ dependencies {
     implementation project(':ballerina-lang:annotations')
     implementation project(':ballerina-config-api')
     implementation project(':ballerina-crypto')
-    implementation project(':ballerina-email')
     implementation project(':ballerina-file')
     // implementation project(':ballerina-grpc')
     implementation project(':ballerina-http')
diff --git a/settings.gradle b/settings.gradle
index a852c2bb571..a0c83ee1840 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -29,7 +29,6 @@ include(':ballerina-auth')
 include(':ballerina-cache')
 include(':ballerina-config-api')
 include(':ballerina-crypto')
-include(':ballerina-email')
 include(':ballerina-file')
 include(':ballerina-http')
 include(':ballerina-openapi')
@@ -159,7 +158,6 @@ project(':ballerina-auth').projectDir = file('stdlib/auth')
 project(':ballerina-cache').projectDir = file('stdlib/cache')
 project(':ballerina-config-api').projectDir = file('stdlib/config-api')
 project(':ballerina-crypto').projectDir = file('stdlib/crypto')
-project(':ballerina-email').projectDir = file('stdlib/email')
 project(':ballerina-file').projectDir = file('stdlib/file')
 project(':ballerina-http').projectDir = file('stdlib/http')
 project(':ballerina-openapi').projectDir = file('stdlib/openapi')
diff --git a/stdlib/email/build.gradle b/stdlib/email/build.gradle
deleted file mode 100644
index a2da6ec4c3d..00000000000
--- a/stdlib/email/build.gradle
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-apply from: "$rootDir/gradle/balNativeLibProject.gradle"
-apply from: "$rootDir/gradle/baseNativeStdLibProject.gradle"
-
-configurations.testCompileClasspath {
-    resolutionStrategy {
-        preferProjectModules()
-    }
-}
-
-dependencies {
-    baloCreat project(':lib-creator')
-    implementation project(':ballerina-lang')
-    implementation project(':ballerina-java')
-    implementation project(':ballerina-runtime')
-    implementation project(':ballerina-io')
-    implementation project(':ballerina-task')
-    implementation project(':ballerina-time')
-    implementation project(':ballerina-log-api')
-    implementation project(':ballerina-runtime-api')
-    implementation project(':ballerina-lang:annotations')
-    implementation project(':ballerina-file')
-    implementation project(':ballerina-mime')
-    implementation 'org.jvnet.mimepull:mimepull'
-    implementation 'com.sun.mail:javax.mail:1.6.2'
-    implementation 'org.apache.ws.commons.axiom:axiom-dom'
-
-    baloImplementation project(path: ':ballerina-lang:annotations', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-io', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-system', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-mime', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-runtime-api', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-task', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-log-api', configuration: 'baloImplementation')
-    baloImplementation project(path: ':ballerina-java', configuration: 'baloImplementation')
-
-    interopImports project(':ballerina-task')
-    interopImports project(':ballerina-time')
-    interopImports project(':ballerina-log-api')
-    interopImports project(':ballerina-io')
-    interopImports project(':ballerina-system')
-    interopImports project(':ballerina-mime')
-    interopImports 'com.sun.mail:javax.mail:1.6.2'
-
-    testCompile project(':ballerina-test-utils')
-    testCompile project(':ballerina-reflect')
-    testCompile project(':ballerina-core')
-    testCompile project(':ballerina-io')
-    testCompile 'org.testng:testng:6.13.1'
-    testCompile 'org.slf4j:slf4j-jdk14:1.7.22'
-    testCompile 'com.icegreen:greenmail:1.5.11'
-}
-
-createBalo {
-    jvmTarget = 'true'
-}
-
-configurations {
-    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
-    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'
-    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'
-}
-
-description = 'Ballerina - Email'
-
-configurations.all {
-    resolutionStrategy.preferProjectModules()
-}
diff --git a/stdlib/email/spotbugs-exclude.xml b/stdlib/email/spotbugs-exclude.xml
deleted file mode 100644
index 24c0977739f..00000000000
--- a/stdlib/email/spotbugs-exclude.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<!--
-  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-  ~
-  ~ WSO2 Inc. licenses this file to you under the Apache License,
-  ~ Version 2.0 (the "License"); you may not use this file except
-  ~ in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~    http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing,
-  ~ software distributed under the License is distributed on an
-  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~ KIND, either express or implied. See the License for the
-  ~ specific language governing permissions and limitations
-  ~ under the License.
-  -->
-<FindBugsFilter>
-
-</FindBugsFilter>
diff --git a/stdlib/email/src/main/ballerina/Ballerina.toml b/stdlib/email/src/main/ballerina/Ballerina.toml
deleted file mode 100644
index b966d2bad52..00000000000
--- a/stdlib/email/src/main/ballerina/Ballerina.toml
+++ /dev/null
@@ -1,20 +0,0 @@
-[project]
-org-name = "ballerina"
-version = "0.6.0"
-
-[platform]
-target = "java8"
-
-    [[platform.libraries]]
-    artifactId = "java.mail"
-    version = "1.6.2"
-    path = "./lib/javax.mail-1.6.2.jar"
-    groupId = "javax.mail"
-    modules = ["email"]
-
-    [[platform.libraries]]
-    artifactId = "email"
-    version = "0.6.0"
-    path = "./lib/ballerina-email-0.6.0-java.jar"
-    groupId = "ballerina"
-    modules = ["email"]
diff --git a/stdlib/email/src/main/ballerina/src/email/Module.md b/stdlib/email/src/main/ballerina/src/email/Module.md
deleted file mode 100644
index 9719dc0b9de..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/Module.md
+++ /dev/null
@@ -1,130 +0,0 @@
-## Module Overview
-
-This module contains functions to perform email operations such as sending and reading emails using the SMTP, POP3, and IMAP4 protocols.
-
-### Client
-
-This module supports the following three client types.
-
-- `email:SmtpClient` - The client, which supports sending an email using the SMTP protocol.
-- `email:PopClient` - The client, which supports receiving an email using the POP3 protocol.
-- `email:ImapClient` - The client, which supports receiving an email using the IMAP4 protocol.
-
-#### SMTP Client
-
-To send an email using the SMTP protocol, you must first create an `email:SmtpClient` object. The code for creating an `email:SmtpClient` can be found
- below.
-
-##### Creating a client
-
-The following code creates an SMTP client, which connects to the default port(465) and enables SSL.
-```ballerina
-email:SmtpClient smtpClient = new ("smtp.email.com",
-                                   "sender@email.com",
-                                   "pass123");
-```
-The port number of the server and/or the SSL support can also be configured by passing the following configurations.
-
-```ballerina
-email:SmtpConfig smtpConfig = {
-    port: 465, // Can use ports, 465, 587 or 25
-    enableSsl: true // Set true to enable SSL (SMTPS connections)
-};
-
-email:SmtpClient smtpClient = new ("smtp.email.com",
-                                   "sender@email.com",
-                                   "pass123",
-                                    smtpConfig);
-```
-
-##### Sending an email
-
-Once the `email:SmtpClient` is created, an email can be sent using the SMTP protocol through that client.
-Samples for this operation can be found below.
-
-```ballerina
-email:Email email = {
-    to: ["receiver1@email.com", "receiver2@email.com"],
-    cc: ["receiver3@email.com", "receiver4@email.com"],
-    bcc: ["receiver5@email.com"],
-    subject: "Sample Email",
-    body: "This is a sample email.",
-    'from: "author@email.com",
-    sender: "sender@email.com",
-    replyTo: ["replyTo1@email.com", "replyTo2@email.com"]
-};
-
-email:Error? response = smtpClient->send(email);
-```
-
-#### POP3 Client
-
-To receive an email using the POP3 protocol, you must first create an `email:PopClient` object. The code for creating an
- `email:PopClient` can be found below.
-
-##### Creating a client
-
-The following code creates a POP3 client, which connects to the default port(995) and enables SSL.
-```ballerina
-email:PopClient|email:Error popClient = new ("pop.email.com",
-                                             "reader@email.com",
-                                             "pass456");
-```
-
-The port number of the server and/or the SSL support can also be configured by passing the following configurations.
-```ballerina
-email:PopConfig popConfig = {
-    port: 995,
-    enableSsl: true
-};
-
-email:PopClient|email:Error popClient = new ("pop.email.com",
-                                             "reader@email.com",
-                                             "pass456",
-                                              popConfig);
-```
-
-##### Receiving an email
-Once the `email:PopClient` is created, emails can be received using the POP3 protocol through that client.
-Samples for this operation can be found below.
-
-```ballerina
-email:Email|email:Error? emailResponse = popClient->read();
-```
-
-#### IMAP4 Client
-
-To receive an email using the IMAP4 protocol, you must first create an `email:ImapClient` object. The code for creating an
- `email:ImapClient` can be found below.
-
-##### Creating a client
-
-The following code creates an IMAP4 client, which connects to the default port(993) and enables SSL.
-```ballerina
-email:ImapClient|email:Error imapClient = new ("imap.email.com",
-                                               "reader@email.com",
-                                               "pass456");
-```
-
-The port number of the server and/or the SSL support can also be configured by passing the following configurations.
-```ballerina
-email:ImapConfig imapConfig = {
-    port: 993,
-    enableSsl: true
-};
-
-email:ImapClient|email:Error imapClient = new ("imap.email.com",
-                                               "reader@email.com",
-                                               "pass456",
-                                                imapConfig);
-```
-
-##### Receiving an email
-Once the `email:ImapClient` is created, emails can be received using the IMAP4 protocol through that client.
-Samples for this operation can be found below.
-
-```ballerina
-email:Email|email:Error emailResponse = imapClient->read();
-```
-
-For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operation, see the [Send and Receive Emails Example](https://ballerina.io/swan-lake/learn/by-example/send-and-receive-emails.html).
diff --git a/stdlib/email/src/main/ballerina/src/email/commons.bal b/stdlib/email/src/main/ballerina/src/email/commons.bal
deleted file mode 100644
index b64b91532f7..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/commons.bal
+++ /dev/null
@@ -1,47 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/mime;
-
-# Email message properties.
-#
-# + to - TO address list
-# + cc - CC address list
-# + bcc - BCC address list
-# + subject - Subject of email
-# + body - Body of the email message
-# + contentType - Content Type of the Body
-# + headers - Header list
-# + from - From address
-# + sender - Sender's address
-# + replyTo - Reply To addresses
-# + attachments - Email attachements
-public type Email record {|
-    string[] to;
-    string[] cc?;
-    string[] bcc?;
-    string subject;
-    string|xml|json body;
-    string contentType?;
-    map<string> headers?;
-    string 'from;
-    string sender?;
-    string[] replyTo?;
-    mime:Entity[] attachments?;
-|};
-
-# Default folder to read emails.
-public const DEFAULT_FOLDER = "INBOX";
diff --git a/stdlib/email/src/main/ballerina/src/email/email_errors.bal b/stdlib/email/src/main/ballerina/src/email/email_errors.bal
deleted file mode 100644
index 0b3763801ed..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/email_errors.bal
+++ /dev/null
@@ -1,27 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-# Represents an error that occurs when sending an email fails.
-public type SendError error;
-
-# Represents an error that occurs when the email store access fails.
-public type ReadClientInitError error;
-
-# Represents an error that occurs an email read operation fails.
-public type ReadError error;
-
-# Represents email related errors.
-public type Error SendError|ReadClientInitError|ReadError;
diff --git a/stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal b/stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal
deleted file mode 100644
index 3e65a4300f2..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal
+++ /dev/null
@@ -1,69 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/java;
-
-# Represents an IMAP Client, which interacts with an IMAP Server.
-public type ImapClient client object {
-
-    # Gets invoked during the `email:ImapClient` initialization.
-    #
-    # + host - Host of the IMAP Client
-    # + username - Username of the IMAP Client
-    # + password - Password of the IMAP Client
-    # + clientConfig - Configurations for the IMAP Client
-    # + return - An `email:Error` if failed while creating the client or else `()`
-    public function init(@untainted string host, @untainted string username, @untainted string password,
-            ImapConfig clientConfig = {}) {
-        return checkpanic initImapClientEndpoint(self, host, username, password, clientConfig);
-    }
-
-    # Reads a message.
-    # ```ballerina
-    # email:Email|email:Error emailResponse = imapClient->read();
-    # ```
-    #
-    # + folder - Folder to read emails. The default value is `INBOX`
-    # + return - An`email:Email` if reading the message is successful, `()` if there are no emails in the specified
-    #            folder, or else an `email:Error` if the recipient failed to receive the message
-    public remote function read(string folder = DEFAULT_FOLDER) returns Email|Error? {
-        return imapRead(self, folder);
-    }
-
-};
-
-function initImapClientEndpoint(ImapClient clientEndpoint, string host, string username, string password,
-        ImapConfig config) returns Error? = @java:Method {
-    name : "initImapClientEndpoint",
-    class : "org.ballerinalang.stdlib.email.client.EmailAccessClient"
-} external;
-
-function imapRead(ImapClient clientEndpoint, string folder) returns Email|Error? = @java:Method {
-    name : "readMessage",
-    class : "org.ballerinalang.stdlib.email.client.EmailAccessClient"
-} external;
-
-# Configuration of the IMAP Endpoint.
-#
-# + port - Port number of the IMAP server
-# + enableSsl - If set to true, use SSL to connect and use the SSL port by default.
-#               The default value is true for the "imaps" protocol and false for the "imap" protocol
-# + properties - IMAP properties to override the existing configuration
-public type ImapConfig record {|
-    int port = 993;
-    boolean enableSsl = true;
-    map<string>? properties = ();
-|};
diff --git a/stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal b/stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal
deleted file mode 100644
index 7ce90f0ce5f..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/listener_endpoint.bal
+++ /dev/null
@@ -1,183 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/java;
-import ballerina/lang.'object as lang;
-import ballerina/log;
-import ballerina/task;
-
-# Represents a service listener that monitors the email server location.
-public type Listener object {
-
-    *lang:Listener;
-
-    private ListenerConfig config;
-    private task:Scheduler? appointment = ();
-
-    # Gets invoked during the `email:Listener` initialization.
-    #
-    # + ListenerConfig - Configurations for Email endpoint
-    public function init(ListenerConfig listenerConfig) {
-        self.config = listenerConfig;
-        checkpanic externalInit(self, self.config);
-    }
-
-    # Starts the `email:Listener`.
-    # ```ballerina
-    # email:Error? result = emailListener.__start();
-    # ```
-    #
-    # + return - () or else error upon failure to start the listener
-    public function __start() returns error? {
-        return self.start();
-    }
-
-    # Stops the `email:Listener`.
-    # ```ballerina
-    # email:Error? result = emailListener.__stop();
-    # ```
-    #
-    # + return - () or else error upon failure to stop the listener
-    public function __stop() returns error? {
-        check self.stop();
-    }
-
-    # Binds a service to the `email:Listener`.
-    # ```ballerina
-    # email:Error? result = emailListener.__attach(helloService, hello);
-    # ```
-    #
-    # + s - Type descriptor of the service
-    # + name - Name of the service
-    # + return - `()` or else a `email:Error` upon failure to register the listener
-    public function __attach(service s, string? name) returns error? {
-        return self.register(s, name);
-    }
-
-    # Stops consuming messages and detaches the service from the `email:Listener`.
-    # ```ballerina
-    # email:Error? result = emailListener.__detach(helloService);
-    # ```
-    #
-    # + s - Type descriptor of the service
-    # + return - `()` or else a `email:Error` upon failure to detach the service
-    public function __detach(service s) returns error? {
-
-    }
-
-    # Stops the `email:Listener` forcefully.
-    # ```ballerina
-    # email:Error? result = emailListener.__immediateStop();
-    # ```
-    #
-    # + return - `()` or else a `email:Error` upon failure to stop the listener
-    public function __immediateStop() returns error? {
-        check self.stop();
-    }
-
-    # Stops the `email:Listener` gracefully.
-    # ```ballerina
-    # email:Error? result = emailListener.__gracefulStop();
-    # ```
-    #
-    # + return - () or else error upon failure to stop the listener
-    public function __gracefulStop() returns error? {
-        check self.stop();
-    }
-
-    function 'start() returns error? {
-        var scheduler = self.config.cronExpression;
-        if (scheduler is string) {
-            task:AppointmentConfiguration config = {appointmentDetails: scheduler};
-            self.appointment = new(config);
-        } else {
-            task:TimerConfiguration config = {intervalInMillis: self.config.pollingInterval, initialDelayInMillis: 100};
-            self.appointment = new (config);
-        }
-        var appointment = self.appointment;
-        if (appointment is task:Scheduler) {
-            check appointment.attach(appointmentService, self);
-            check appointment.start();
-        }
-        log:printInfo("User " + self.config.username + " is listening to remote server at " + self.config.host + "...");
-    }
-
-    function stop() returns error? {
-        var appointment = self.appointment;
-        if (appointment is task:Scheduler) {
-            check appointment.stop();
-        }
-        log:printInfo("Stopped listening to remote server at " + self.config.host);
-    }
-
-    function poll() returns error? {
-        return poll(self);
-    }
-
-    # Registers for the Email service.
-    # ```ballerina
-    # emailListener.register(helloService, hello);
-    # ```
-    #
-    # + emailService - Type descriptor of the service
-    # + name - Service name
-    public function register(service emailService, string? name) {
-        register(self, emailService);
-    }
-};
-
-service appointmentService = service {
-    resource function onTrigger(Listener l) {
-        var result = l.poll();
-        if (result is error) {
-            log:printError("Error while executing poll function", result);
-        }
-    }
-};
-
-# Configuration for Email listener endpoint.
-#
-# + host - Email server host
-# + username - Email server access username
-# + password - Email server access password
-# + protocol - Email server access protocol, "IMAP" or "POP"
-# + protocolConfig - POP3 or IMAP4 protocol configuration
-# + pollingInterval - Periodic time interval to check new update
-# + cronExpression - Cron expression to check new update
-public type ListenerConfig record {|
-    string host;
-    string username;
-    string password;
-    string protocol = "IMAP";
-    PopConfig|ImapConfig? protocolConfig = ();
-    int pollingInterval = 60000;
-    string? cronExpression = ();
-|};
-
-function poll(Listener listenerEndpoint) returns error? = @java:Method{
-    name: "poll",
-    class: "org.ballerinalang.stdlib.email.server.EmailListenerHelper"
-} external;
-
-function externalInit(Listener listenerEndpoint, ListenerConfig config) returns error? = @java:Method{
-    name: "init",
-    class: "org.ballerinalang.stdlib.email.server.EmailListenerHelper"
-} external;
-
-function register(Listener listenerEndpoint, service emailService) = @java:Method{
-    name: "register",
-    class: "org.ballerinalang.stdlib.email.server.EmailListenerHelper"
-} external;
diff --git a/stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal b/stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal
deleted file mode 100644
index 63e4f723086..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal
+++ /dev/null
@@ -1,69 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/java;
-
-# Represents a POP Client, which interacts with a POP Server.
-public type PopClient client object {
-
-    # Gets invoked during the `email:PopClient` initialization.
-    #
-    # + host - Host of the POP Client
-    # + username - Username of the POP Client
-    # + password - Password of the POP Client
-    # + clientConfig - Configurations for the POP Client
-    # + return - An `email:Error` if creating the client failed or else `()`
-    public function init(@untainted string host, @untainted string username, @untainted string password,
-            PopConfig clientConfig = {}) {
-        return checkpanic initPopClientEndpoint(self, host, username, password, clientConfig);
-    }
-
-    # Reads a message.
-    # ```ballerina
-    # email:Email|email:Error? emailResponse = popClient->read();
-    # ```
-    #
-    # + folder - Folder to read emails. The default value is `INBOX`
-    # + return - An`email:Email` if reading the message is successful, `()` if there are no emails in the specified
-    #            folder, or else an `email:Error` if the recipient failed to receive the message
-    public remote function read(string folder = DEFAULT_FOLDER) returns Email|Error? {
-        return popRead(self, folder);
-    }
-
-};
-
-function initPopClientEndpoint(PopClient clientEndpoint, string host, string username, string password,
-        PopConfig config) returns Error? = @java:Method {
-    name : "initPopClientEndpoint",
-    class : "org.ballerinalang.stdlib.email.client.EmailAccessClient"
-} external;
-
-function popRead(PopClient clientEndpoint, string folder) returns Email|Error? = @java:Method {
-    name : "readMessage",
-    class : "org.ballerinalang.stdlib.email.client.EmailAccessClient"
-} external;
-
-# Configuration of the POP Endpoint.
-#
-# + port - Port number of the POP server
-# + enableSsl - If set to true, use SSL to connect and use the SSL port by default.
-#               The default value is true for the "pops" protocol and false for the "pop" protocol
-# + properties - POP3 properties to override the existing configuration
-public type PopConfig record {|
-    int port = 995;
-    boolean enableSsl = true;
-    map<string>? properties = ();
-|};
diff --git a/stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal b/stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal
deleted file mode 100644
index aeef5f7725c..00000000000
--- a/stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal
+++ /dev/null
@@ -1,98 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/java;
-
-# Represents an SMTP Client, which interacts with an SMTP Server.
-public type SmtpClient client object {
-
-    # Gets invoked during the `email:SmtpClient` initialization.
-    #
-    # + host - Host of the SMTP Client
-    # + username - Username of the SMTP Client
-    # + password - Password of the SMTP Client
-    # + clientConfig - Configurations for SMTP Client
-    public function init(@untainted string host, @untainted string username, @untainted string password,
-            SmtpConfig clientConfig = {}) {
-        initSmtpClientEndpoint(self, host, username, password, clientConfig);
-    }
-
-    # Sends a message.
-    # ```ballerina
-    # email:Error? response = smtpClient->send(email);
-    # ```
-    #
-    # + email - An `email:Email` message, which needs to be sent to the recipient
-    # + return - An `email:Error` if failed to send the message to the recipient or else `()`
-    public remote function send(Email email) returns Error? {
-        var body = email.body;
-        if (body is xml) {
-            if (email?.contentType == ()) {
-                email.contentType = "application/xml";
-            } else if (!self.containsType(email?.contentType, "xml")) {
-                return SendError("Content type of the email should be XML.");
-            }
-            body = body.toString();
-        } else if (body is string) {
-            if (email?.contentType == ()) {
-                email.contentType = "text/plain";
-            } else if (!self.containsType(email?.contentType, "text")) {
-                return SendError("Content type of the email should be text.");
-            }
-        } else {
-            if (email?.contentType == ()) {
-                email.contentType = "application/json";
-            } else if (!self.containsType(email?.contentType, "json")) {
-                return SendError("Content type of the email should be json.");
-            }
-            body = body.toJsonString();
-        }
-        return send(self, email);
-    }
-
-    private function containsType(string? contentType, string typeString) returns boolean {
-        if (contentType is string) {
-            string canonicalizedCtype = contentType.toLowerAscii();
-            int? stringIndex = canonicalizedCtype.indexOf(typeString);
-            return stringIndex is int;
-        }
-        return false;
-    }
-
-};
-
-function initSmtpClientEndpoint(SmtpClient clientEndpoint, string host, string username, string password,
-        SmtpConfig config) = @java:Method {
-    name : "initClientEndpoint",
-    class : "org.ballerinalang.stdlib.email.client.SmtpClient"
-} external;
-
-function send(SmtpClient clientEndpoint, Email email) returns Error? = @java:Method {
-    name : "sendMessage",
-    class : "org.ballerinalang.stdlib.email.client.SmtpClient"
-} external;
-
-# Configuration of the SMTP Endpoint.
-#
-# + port - Port number of the SMTP server
-# + enableSsl - If set to true, use SSL to connect and use the SSL port by default.
-#               The default value is true for the "smtps" protocol and false for the "smtp" protocol
-# + properties - SMTP properties to override the existing configuration
-public type SmtpConfig record {|
-    int port = 465;
-    boolean enableSsl = true;
-    map<string>? properties = ();
-|};
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java
deleted file mode 100644
index 37b6f5ec321..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.client;
-
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.stdlib.email.util.EmailAccessUtil;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.ballerinalang.stdlib.email.util.SmtpUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-import java.util.Properties;
-
-import javax.mail.Flags;
-import javax.mail.Folder;
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.NoSuchProviderException;
-import javax.mail.Session;
-import javax.mail.Store;
-import javax.mail.search.FlagTerm;
-
-/**
- * Contains the functionality of email reading with POP and IMAP clients.
- *
- * @since 1.2.0
- */
-public class EmailAccessClient {
-
-    private static final Logger log = LoggerFactory.getLogger(EmailAccessClient.class);
-    private static final FlagTerm UNSEEN_FLAG = new FlagTerm(new Flags(Flags.Flag.SEEN), false);
-
-    private EmailAccessClient() {
-        // A Singleton class.
-    }
-
-    /**
-     * Initializes the ObjectValue object with the POP properties.
-     * @param clientEndpoint Represents the POP Client class
-     * @param host Represents the host address of POP server
-     * @param username Represents the username of the POP server
-     * @param password Represents the password of the POP server
-     * @param config Properties required to configure the POP session
-     * @return If an error occurs in the POP client, returns an error
-     */
-    public static Object initPopClientEndpoint(ObjectValue clientEndpoint, BString host, BString username,
-                                               BString password, MapValue<BString, Object> config) {
-        Properties properties = EmailAccessUtil.getPopProperties(config, host.getValue());
-        Session session = Session.getInstance(properties, null);
-        try {
-            Store store = session.getStore(EmailConstants.POP_PROTOCOL);
-            clientEndpoint.addNativeData(EmailConstants.PROPS_STORE, store);
-            clientEndpoint.addNativeData(EmailConstants.PROPS_HOST.getValue(), host.getValue());
-            clientEndpoint.addNativeData(EmailConstants.PROPS_USERNAME.getValue(), username.getValue());
-            clientEndpoint.addNativeData(EmailConstants.PROPS_PASSWORD.getValue(), password.getValue());
-            return null;
-        } catch (NoSuchProviderException e) {
-            log.error("Failed initialize client properties : ", e);
-            return SmtpUtil.getBallerinaError(EmailConstants.READ_CLIENT_INIT_ERROR, e.getMessage());
-        }
-    }
-
-    /**
-     * Initializes the ObjectValue object with the IMAP properties.
-     * @param clientEndpoint Represents the IMAP Client class
-     * @param host Represents the host address of IMAP server
-     * @param username Represents the username of the IMAP server
-     * @param password Represents the password of the IMAP server
-     * @param config Properties required to configure the IMAP session
-     * @return If an error occurs in the IMAP client, returns an error
-     */
-    public static Object initImapClientEndpoint(ObjectValue clientEndpoint, BString host, BString username,
-                                                BString password, MapValue<BString, Object> config) {
-        Properties properties = EmailAccessUtil.getImapProperties(config, host.getValue());
-        Session session = Session.getInstance(properties, null);
-        try {
-            Store store = session.getStore(EmailConstants.IMAP_PROTOCOL);
-            clientEndpoint.addNativeData(EmailConstants.PROPS_STORE, store);
-            clientEndpoint.addNativeData(EmailConstants.PROPS_HOST.getValue(), host.getValue());
-            clientEndpoint.addNativeData(EmailConstants.PROPS_USERNAME.getValue(), username.getValue());
-            clientEndpoint.addNativeData(EmailConstants.PROPS_PASSWORD.getValue(), password.getValue());
-            return null;
-        } catch (NoSuchProviderException e) {
-            log.error("Failed initialize client properties : ", e);
-            return SmtpUtil.getBallerinaError(EmailConstants.READ_CLIENT_INIT_ERROR, e.getMessage());
-        }
-    }
-
-    /**
-     * Read emails from the server.
-     * @param clientConnector Represents the POP or IMAP client class
-     * @param folder Name of the folder to read emails
-     * @return If successful return the received email, otherwise an error
-     */
-    public static Object readMessage(ObjectValue clientConnector, BString folder) {
-        String host = (String) clientConnector.getNativeData(EmailConstants.PROPS_HOST.getValue());
-        String username = (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME.getValue());
-        String password = (String) clientConnector.getNativeData(EmailConstants.PROPS_PASSWORD.getValue());
-        try (Store store = (Store) clientConnector.getNativeData(EmailConstants.PROPS_STORE)) {
-            log.debug("Access email server with properties, host: " + host + " username: " + username
-                    + " folder: " + folder.getValue());
-            store.connect(host, username, password);
-            Folder emailFolder = store.getFolder(folder.getValue());
-            MapValue<BString, Object> mapValue = null;
-            if (emailFolder == null) {
-                log.error("Email store folder, " + folder.getValue() + " is not found.");
-            } else {
-                emailFolder.open(Folder.READ_WRITE);
-                Message[] messages = emailFolder.search(UNSEEN_FLAG);
-                if (messages.length > 0) {
-                    Flags flags = new Flags();
-                    flags.add(Flags.Flag.SEEN);
-                    emailFolder.setFlags(new int[] {messages[0].getMessageNumber()}, flags, true);
-                    mapValue = EmailAccessUtil.getMapValue(messages[0]);
-                }
-                if (log.isDebugEnabled()) {
-                    log.debug("Got the messages. Email count = " + messages.length);
-                }
-                emailFolder.close(false);
-            }
-            return mapValue;
-        } catch (MessagingException | IOException e) {
-            log.error("Failed to read message : ", e);
-            return SmtpUtil.getBallerinaError(EmailConstants.READ_ERROR, e.getMessage());
-        }
-    }
-
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java
deleted file mode 100644
index 69b191d39c7..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.client;
-
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.ballerinalang.stdlib.email.util.SmtpUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-import java.util.Properties;
-
-import javax.mail.MessagingException;
-import javax.mail.PasswordAuthentication;
-import javax.mail.Session;
-import javax.mail.Transport;
-
-/**
- * Contains functionality of SMTP Client.
- *
- * @since 1.2.0
- */
-public class SmtpClient {
-
-    private static final Logger log = LoggerFactory.getLogger(SmtpClient.class);
-
-    private SmtpClient() {
-        // Singleton class
-    }
-
-    /**
-     * Initializes the ObjectValue object with the SMTP Properties.
-     * @param clientEndpoint Represents the SMTP Client class
-     * @param host Represents the host address of the SMTP server
-     * @param username Represents the username of the SMTP server
-     * @param password Represents the password of the SMTP server
-     * @param config Properties required to configure the SMTP Session
-     */
-    public static void initClientEndpoint(ObjectValue clientEndpoint, BString host, BString username, BString password,
-                                          MapValue<BString, Object> config) {
-        Properties properties = SmtpUtil.getProperties(config, host.getValue());
-        Session session = Session.getInstance(properties,
-                new javax.mail.Authenticator() {
-                    protected PasswordAuthentication getPasswordAuthentication() {
-                        return new PasswordAuthentication(username.getValue(), password.getValue());
-                    }
-                });
-        clientEndpoint.addNativeData(EmailConstants.PROPS_SESSION, session);
-        clientEndpoint.addNativeData(EmailConstants.PROPS_USERNAME.getValue(), username.getValue());
-    }
-
-    /**
-     * Sends an email to an SMTP server.
-     * @param clientConnector Represents the SMTP Client class
-     * @param message Fields of an email
-     * @return If an error occurs in the SMTP client, error
-     */
-    public static Object sendMessage(ObjectValue clientConnector, MapValue<BString, Object> message) {
-        try {
-            Transport.send(SmtpUtil.generateMessage(
-                    (Session) clientConnector.getNativeData(EmailConstants.PROPS_SESSION),
-                    (String) clientConnector.getNativeData(EmailConstants.PROPS_USERNAME.getValue()), message));
-            return null;
-        } catch (MessagingException | IOException e) {
-            log.error("Failed to send message to SMTP server : ", e);
-            return SmtpUtil.getBallerinaError(EmailConstants.SEND_ERROR, e.getMessage());
-        }
-    }
-
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java
deleted file mode 100644
index e3ae5df5cad..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnector.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * Contains the functionality to retrieve emails via consuming.
- *
- * @since 1.3.0
- */
-public class EmailConnector {
-
-    private static final Logger log = LoggerFactory.getLogger(EmailConnector.class);
-
-    private EmailConsumer consumer;
-    private AtomicBoolean isPollOperationOccupied = new AtomicBoolean(false);
-
-    /**
-     * Creates the email consumer.
-     * @param properties Properties to connect to the server
-     * @param emailListener Listener that polls emails from the server
-     * @throws EmailConnectorException If the given protocol is invalid
-     */
-    public EmailConnector(Map<String, Object> properties, EmailListener emailListener) throws EmailConnectorException {
-        log.debug("Email listener configurations: " + properties.keySet());
-        consumer = new EmailConsumer(properties, emailListener);
-    }
-
-    /**
-     * Polls to retrieve emails from the server.
-     */
-    public void poll() {
-        if (isPollOperationOccupied.compareAndSet(false, true)) {
-            try {
-                if (log.isDebugEnabled()) {
-                    log.debug("Poll method invoked.");
-                }
-                consumer.consume();
-            } catch (Exception e) {
-                log.error("Error executing the polling cycle of RemoteFileSystemServer", e);
-            } finally {
-                isPollOperationOccupied.set(false);
-            }
-        } else {
-            log.warn("A scheduled email polling job was skipped as the previous job was still processing.");
-        }
-    }
-
-    protected EmailListener getEmailListener() {
-        return consumer.getEmailListener();
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorException.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorException.java
deleted file mode 100644
index efb79b9fd97..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-/**
- * Generic {@link Exception} for Email connector.
- */
-public class EmailConnectorException extends Exception {
-
-    public EmailConnectorException(String message) {
-        super(message);
-    }
-
-    public EmailConnectorException(String message, Throwable cause) {
-        super(message, cause);
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorFactory.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorFactory.java
deleted file mode 100644
index b9b177bb38c..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConnectorFactory.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-import java.util.Map;
-
-/**
- * Produces EmailConnector objects.
- *
- * @since 1.3.0
- */
-public class EmailConnectorFactory {
-
-    private EmailConnectorFactory() {
-        // Singleton class
-    }
-
-    /**
-     * Generates a new Email connector.
-     * @param connectorConfig Configuration of Email connector
-     * @param emailListener Listener that polls to email server
-     * @return Generated new Email connector
-     * @throws EmailConnectorException If the given protocol is invalid
-     */
-    public static EmailConnector createServerConnector(Map<String, Object> connectorConfig,
-                                                EmailListener emailListener) throws EmailConnectorException {
-        return new EmailConnector(connectorConfig, emailListener);
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java
deleted file mode 100644
index fcf07311e8a..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailConsumer.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-import org.ballerinalang.jvm.BallerinaErrors;
-import org.ballerinalang.jvm.BallerinaValues;
-import org.ballerinalang.jvm.StringUtils;
-import org.ballerinalang.jvm.values.ErrorValue;
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.stdlib.email.client.EmailAccessClient;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Map;
-
-/**
- * Provides the capability to read an email and forward it to a listener.
- *
- * @since 1.3.0
- */
-public class EmailConsumer {
-
-    private static final Logger log = LoggerFactory.getLogger(EmailConsumer.class);
-
-    private EmailListener emailListener;
-    private ObjectValue client;
-
-    /**
-     * Constructor for the EmailConsumer.
-     *
-     * @param emailProperties Map of property values
-     * @param listener Forwards the received emails to Ballerina code
-     * @throws EmailConnectorException If the given protocol is invalid
-     */
-    public EmailConsumer(Map<String, Object> emailProperties, EmailListener listener) throws EmailConnectorException {
-        this.emailListener = listener;
-        String host = (String) emailProperties.get(EmailConstants.PROPS_HOST.getValue());
-        String username = (String) emailProperties.get(EmailConstants.PROPS_USERNAME.getValue());
-        String password = (String) emailProperties.get(EmailConstants.PROPS_PASSWORD.getValue());
-        String protocol = (String) emailProperties.get(EmailConstants.PROPS_PROTOCOL.getValue());
-        MapValue<BString, Object> protocolConfig = (MapValue<BString, Object>) emailProperties.get(
-                EmailConstants.PROTOCOL_CONFIG.getValue());
-        if (protocol.equals(EmailConstants.IMAP)) {
-            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.IMAP_CLIENT,
-                                                       StringUtils.fromString(host), StringUtils.fromString(username),
-                                                       StringUtils.fromString(password), protocolConfig);
-            EmailAccessClient.initImapClientEndpoint(client, StringUtils.fromString(host),
-                                                     StringUtils.fromString(username), StringUtils.fromString(password),
-                                                     protocolConfig);
-        } else if (protocol.equals(EmailConstants.POP)) {
-            client = BallerinaValues.createObjectValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.POP_CLIENT,
-                                                       StringUtils.fromString(host), StringUtils.fromString(username),
-                                                       StringUtils.fromString(password), protocolConfig);
-            EmailAccessClient.initPopClientEndpoint(client, StringUtils.fromString(host),
-                                                    StringUtils.fromString(username), StringUtils.fromString(password),
-                                                    protocolConfig);
-        } else {
-            String errorMsg = "Protocol should either be 'IMAP' or 'POP'.";
-            throw new EmailConnectorException(errorMsg);
-        }
-    }
-
-    /**
-     * Read emails from the Email client and pass to the listener.
-     */
-    public void consume() {
-        if (log.isDebugEnabled()) {
-            log.debug("Consumer thread name: " + Thread.currentThread().getName());
-            log.debug("Consumer hashcode: " + this.hashCode());
-            log.debug("Polling for an email...");
-        }
-        Object message = EmailAccessClient.readMessage(client,
-                StringUtils.fromString(EmailConstants.DEFAULT_STORE_LOCATION));
-        if (message != null) {
-            if (message instanceof MapValue) {
-                emailListener.onMessage(new EmailEvent(message));
-            } else if (message instanceof ErrorValue) {
-                emailListener.onError(message);
-            } else {
-                emailListener.onError(BallerinaErrors.createError(
-                        new EmailConnectorException("Received an undefined message from email server.")));
-            }
-        } else {
-            log.debug("No emails found in the inbox.");
-        }
-
-    }
-
-    protected EmailListener getEmailListener() {
-        return emailListener;
-    }
-
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailEvent.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailEvent.java
deleted file mode 100644
index 9eac368088c..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailEvent.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-/**
- * Bean class for Email event.
- *
- * @since 1.3.0
- */
-public class EmailEvent {
-
-    private Object email;
-
-    /**
-     * Constructor for storing email.
-     * @param receivedEmail Received email
-     */
-    public EmailEvent(Object receivedEmail) {
-        this.email = receivedEmail;
-    }
-
-    /**
-     * Returns the email object.
-     * @return The email object
-     */
-    public Object getEmailObject() {
-        return this.email;
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java
deleted file mode 100644
index 8cb4ba98b2a..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListener.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-import org.ballerinalang.jvm.BRuntime;
-import org.ballerinalang.jvm.values.ErrorValue;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import static org.ballerinalang.stdlib.email.util.EmailConstants.ON_ERROR_METADATA;
-import static org.ballerinalang.stdlib.email.util.EmailConstants.ON_MESSAGE;
-import static org.ballerinalang.stdlib.email.util.EmailConstants.ON_MESSAGE_METADATA;
-
-/**
- * Email connector listener for Ballerina.
- *
- * @since 1.3.0
- */
-public class EmailListener {
-
-    private static final Logger log = LoggerFactory.getLogger(EmailListener.class);
-
-    private final BRuntime runtime;
-
-    private Map<String, ObjectValue> registeredServices = new HashMap<>();
-
-    /**
-     * Constructor for listener class for email.
-     * @param runtime Current Ballerina runtime
-     */
-    public EmailListener(BRuntime runtime) {
-        this.runtime = runtime;
-    }
-
-    /**
-     * Place an email in Ballerina when received.
-     * @param emailEvent Email object to be received
-     * @return If successful return true
-     */
-    public boolean onMessage(EmailEvent emailEvent) {
-        Object email = emailEvent.getEmailObject();
-        if (runtime != null) {
-            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();
-            for (Map.Entry<String, ObjectValue> service : services) {
-                runtime.invokeMethodSync(service.getValue(), ON_MESSAGE, null, ON_MESSAGE_METADATA, email, true);
-            }
-        } else {
-            log.error("Runtime should not be null.");
-        }
-        return true;
-    }
-
-    /**
-     * Place an error in Ballerina when received.
-     * @param error Email object to be received
-     */
-    public void onError(Object error) {
-        log.error(((ErrorValue) error).getMessage());
-        if (runtime != null) {
-            Set<Map.Entry<String, ObjectValue>> services = registeredServices.entrySet();
-            for (Map.Entry<String, ObjectValue> service : services) {
-                runtime.invokeMethodSync(service.getValue(), EmailConstants.ON_ERROR, null,
-                                         ON_ERROR_METADATA, error, true);
-            }
-        } else {
-            log.error("Runtime should not be null.");
-        }
-    }
-
-    protected void addService(ObjectValue service) {
-        if (service != null && service.getType() != null && service.getType().getName() != null) {
-            registeredServices.put(service.getType().getName(), service);
-        }
-    }
-
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java
deleted file mode 100644
index 8feb2ac2873..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/server/EmailListenerHelper.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.server;
-
-import org.ballerinalang.jvm.BRuntime;
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Helper class for listener functions.
- *
- * @since 1.3.0
- */
-public class EmailListenerHelper {
-
-    private EmailListenerHelper() {
-        // private constructor
-    }
-
-    /**
-     * Initialize a new EmailConnector for the listener.
-     * @param emailListener Listener that places emails in Ballerina runtime
-     * @param serviceEndpointConfig Email server endpoint configuration
-     * @throws EmailConnectorException If the given protocol is invalid
-     */
-    public static void init(ObjectValue emailListener, MapValue<BString, Object> serviceEndpointConfig)
-            throws EmailConnectorException {
-        final EmailListener listener = new EmailListener(BRuntime.getCurrentRuntime());
-        Map<String, Object> paramMap = getServerConnectorParamMap(serviceEndpointConfig);
-        EmailConnector emailConnector = EmailConnectorFactory.createServerConnector(paramMap, listener);
-        emailListener.addNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR, emailConnector);
-    }
-
-    /**
-     * Register a new service for the listener.
-     * @param emailListener Ballerina email listener
-     * @param service Ballerina service to be listened
-     */
-    public static void register(ObjectValue emailListener, ObjectValue service) {
-        EmailConnector emailConnector = (EmailConnector) emailListener.getNativeData(
-                EmailConstants.EMAIL_SERVER_CONNECTOR);
-        EmailListener listener = emailConnector.getEmailListener();
-        listener.addService(service);
-    }
-
-    private static Map<String, Object> getServerConnectorParamMap(MapValue<BString, Object> serviceEndpointConfig) {
-        Map<String, Object> params = new HashMap<>(7);
-        MapValue<BString, BString> secureSocket = (MapValue<BString, BString>) serviceEndpointConfig.getMapValue(
-                EmailConstants.ENDPOINT_CONFIG_SECURE_SOCKET);
-        if (secureSocket != null) {
-            final MapValue<BString, BString> privateKey = (MapValue<BString, BString>) secureSocket.getMapValue(
-                    EmailConstants.ENDPOINT_CONFIG_PRIVATE_KEY);
-            if (privateKey != null) {
-                final String privateKeyPath = privateKey.getStringValue(EmailConstants.ENDPOINT_CONFIG_PATH).getValue();
-                final String privateKeyPassword =
-                        privateKey.getStringValue(EmailConstants.ENDPOINT_CONFIG_PASS_KEY).getValue();
-                if (privateKeyPath != null && !privateKeyPath.isEmpty() && privateKeyPassword != null
-                        && !privateKeyPassword.isEmpty()) {
-                    params.put(EmailConstants.IDENTITY, privateKeyPath);
-                    params.put(EmailConstants.IDENTITY_PASS_PHRASE, privateKeyPassword);
-                }
-            }
-        }
-        MapValue<BString, Object> protocolConfig = (MapValue<BString, Object>) serviceEndpointConfig.getMapValue(
-                EmailConstants.PROTOCOL_CONFIG);
-        if (protocolConfig != null) {
-            params.put(EmailConstants.PROTOCOL_CONFIG.getValue(), protocolConfig);
-        }
-        params.put(EmailConstants.PROPS_HOST.getValue(),
-                   serviceEndpointConfig.getStringValue(EmailConstants.PROPS_HOST).getValue());
-        params.put(EmailConstants.PROPS_USERNAME.getValue(),
-                   serviceEndpointConfig.getStringValue(EmailConstants.PROPS_USERNAME).getValue());
-        params.put(EmailConstants.PROPS_PASSWORD.getValue(),
-                   serviceEndpointConfig.getStringValue(EmailConstants.PROPS_PASSWORD).getValue());
-        params.put(EmailConstants.PROPS_PROTOCOL.getValue(),
-                   serviceEndpointConfig.getStringValue(EmailConstants.PROPS_PROTOCOL).getValue());
-        return params;
-    }
-
-    /**
-     * Polls emails from the email server endpoint.
-     * @param emailListener Ballerina listener for connecting to the email server endpoint
-     * @throws Exception If an error occurs during the polling operations
-     */
-    public static void poll(ObjectValue emailListener) throws Exception {
-        EmailConnector connector = (EmailConnector) emailListener.getNativeData(EmailConstants.EMAIL_SERVER_CONNECTOR);
-        try {
-            connector.poll();
-        } catch (Exception e) {
-            throw new Exception(e.getMessage());
-
-        }
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java
deleted file mode 100644
index 29eebe48097..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.service.compiler;
-
-import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;
-import org.ballerinalang.compiler.plugins.SupportedResourceParamTypes;
-import org.ballerinalang.model.tree.AnnotationAttachmentNode;
-import org.ballerinalang.model.tree.ServiceNode;
-import org.ballerinalang.model.types.TypeKind;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.ballerinalang.util.diagnostic.DiagnosticLog;
-import org.wso2.ballerinalang.compiler.semantics.model.types.BStructureType;
-import org.wso2.ballerinalang.compiler.semantics.model.types.BType;
-import org.wso2.ballerinalang.compiler.tree.BLangFunction;
-import org.wso2.ballerinalang.compiler.tree.BLangSimpleVariable;
-
-import java.util.List;
-
-import static org.ballerinalang.stdlib.email.util.EmailConstants.ON_ERROR;
-import static org.ballerinalang.stdlib.email.util.EmailConstants.ON_MESSAGE;
-import static org.ballerinalang.util.diagnostic.Diagnostic.Kind.ERROR;
-
-/**
- * Compiler plugin for validating Email Listener.
- *
- * @since 1.3.0
- */
-@SupportedResourceParamTypes(
-        expectedListenerType = @SupportedResourceParamTypes.Type(packageName = EmailConstants.MODULE_NAME,
-                name = EmailConstants.LISTENER),
-        paramTypes = {
-                @SupportedResourceParamTypes.Type(packageName = EmailConstants.MODULE_NAME,
-                        name = EmailConstants.EMAIL),
-                @SupportedResourceParamTypes.Type(packageName = EmailConstants.MODULE_NAME,
-                        name = EmailConstants.ERROR)
-        }
-)
-public class EmailListenerCompilerPlugin extends AbstractCompilerPlugin {
-
-    private DiagnosticLog dlog = null;
-
-    @Override
-    public void init(DiagnosticLog diagnosticLog) {
-        this.dlog = diagnosticLog;
-    }
-
-    @Override
-    public void process(ServiceNode serviceData, List<AnnotationAttachmentNode> annotations) {
-        List<BLangFunction> resources = (List<BLangFunction>) serviceData.getResources();
-        resources.forEach(res -> validate(serviceData.getName().getValue(), res, this.dlog));
-    }
-
-    public void validate(String serviceName, BLangFunction resource, DiagnosticLog dlog) {
-        final List<BLangSimpleVariable> parameters = resource.getParameters();
-        switch (resource.getName().getValue()) {
-            case ON_MESSAGE:
-                String onMessageErrorMessage = "Invalid resource signature for %s in service %s. "
-                        + "The parameter should be a " + EmailConstants.MODULE_NAME + ":" + EmailConstants.EMAIL +
-                        " with no returns.";
-                onMessageErrorMessage = String.format(onMessageErrorMessage, resource.getName().getValue(),
-                        serviceName);
-                if (parameters.size() != 1) {
-                    dlog.logDiagnostic(ERROR, resource.getPosition(), onMessageErrorMessage);
-                    return;
-                }
-                BType emailEvent = parameters.get(0).getTypeNode().type;
-                if (emailEvent.getKind().equals(TypeKind.OBJECT)) {
-                    if (emailEvent instanceof BStructureType) {
-                        BStructureType event = (BStructureType) emailEvent;
-                        if (!EmailConstants.MODULE_NAME.equals(event.tsymbol.pkgID.name.value) ||
-                                !EmailConstants.EMAIL.equals(event.tsymbol.name.value)) {
-                            dlog.logDiagnostic(ERROR, resource.getPosition(), onMessageErrorMessage);
-                            return;
-                        }
-                    }
-                }
-                break;
-            case ON_ERROR:
-                String onErrorErrorMessage = "Invalid resource signature for %s in service %s. " +
-                        "The parameter should be a " + EmailConstants.MODULE_NAME + ":" + EmailConstants.ERROR +
-                        " with no returns.";
-                onErrorErrorMessage = String.format(onErrorErrorMessage, resource.getName().getValue(), serviceName);
-                if (parameters.size() != 1) {
-                    dlog.logDiagnostic(ERROR, resource.getPosition(), onErrorErrorMessage);
-                    return;
-                }
-                BType errorEvent = parameters.get(0).getTypeNode().type;
-                if (errorEvent.getKind().equals(TypeKind.OBJECT)) {
-                    if (errorEvent instanceof BStructureType) {
-                        BStructureType event = (BStructureType) errorEvent;
-                        if (!EmailConstants.MODULE_NAME.equals(event.tsymbol.pkgID.name.value) ||
-                                !EmailConstants.EMAIL.equals(event.tsymbol.name.value)) {
-                            dlog.logDiagnostic(ERROR, resource.getPosition(), onErrorErrorMessage);
-                            return;
-                        }
-                    }
-                }
-                break;
-            default:
-                dlog.logDiagnostic(ERROR, resource.getPosition(), "Invalid resource name " +
-                        resource.getName().getValue() + " in service " + serviceName);
-        }
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java
deleted file mode 100644
index 7e2c13cf602..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/CommonUtil.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.util;
-
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.mime.util.MimeConstants;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Properties;
-
-/**
- * Contains the common utility functions.
- *
- * @since 1.2.1
- */
-public class CommonUtil {
-
-    private static final Logger log = LoggerFactory.getLogger(CommonUtil.class);
-
-    /**
-     * Check whether the content type is based on text.
-     *
-     * @param contentType Content Type of a MIME Body Type
-     * @return boolean Whether the MIME Body Type is text based
-     */
-    protected static boolean isTextBased(String contentType) {
-        return contentType.startsWith(MimeConstants.TEXT_AS_PRIMARY_TYPE)
-                || contentType.endsWith(MimeConstants.XML_SUFFIX)
-                || contentType.endsWith(MimeConstants.JSON_SUFFIX)
-                || contentType.startsWith(MimeConstants.APPLICATION_JSON)
-                || contentType.startsWith(MimeConstants.APPLICATION_XML)
-                || contentType.startsWith(MimeConstants.APPLICATION_FORM);
-    }
-
-    /**
-     * Check whether the content type is based on JSON.
-     *
-     * @param contentType Content Type of a MIME Body Type
-     * @return boolean Whether the MIME Body Type is JSON based
-     */
-    protected static boolean isJsonBased(String contentType) {
-        return contentType.contains("json");
-    }
-
-    /**
-     * Check whether the content type is based on XML.
-     *
-     * @param contentType Content Type of a MIME Body Type
-     * @return boolean Whether the MIME Body Type is XML based
-     */
-    protected static boolean isXmlBased(String contentType) {
-        return contentType.contains("xml");
-    }
-
-    /**
-     * Convert an InputStream to a byte array.
-     *
-     * @param inputStream InputStream input
-     * @return byte[] Whether the MIME Body Type is text based
-     * @throws IOException If an error occurs during reading the InputStream
-     */
-    public static byte[] convertInputStreamToByteArray(InputStream inputStream) throws IOException {
-        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
-        int nRead;
-        byte[] data = new byte[16384];
-        while ((nRead = inputStream.read(data, 0, data.length)) != -1) {
-            buffer.write(data, 0, nRead);
-        }
-        return buffer.toByteArray();
-    }
-
-    /**
-     * Add custom properties from the Ballerina configuration.
-     *
-     * @param customProperties Custom properties from Ballerina
-     * @param properties Properties to be used to create the session
-     */
-    public static void addCustomProperties(MapValue<BString, Object> customProperties, Properties properties) {
-        if (customProperties != null) {
-            for (BString propertyName : customProperties.getKeys()) {
-                properties.put(propertyName.getValue(),
-                               customProperties.getStringValue(propertyName).getValue());
-                log.debug("Added custom protocol property with Name: " + propertyName + ", Value: "
-                                  + customProperties.getStringValue(propertyName).getValue());
-            }
-        }
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailAccessUtil.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailAccessUtil.java
deleted file mode 100644
index f1898765b1d..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailAccessUtil.java
+++ /dev/null
@@ -1,395 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.util;
-
-import com.sun.mail.imap.IMAPMessage;
-import com.sun.mail.pop3.POP3Message;
-import org.ballerinalang.jvm.BallerinaValues;
-import org.ballerinalang.jvm.JSONParser;
-import org.ballerinalang.jvm.StringUtils;
-import org.ballerinalang.jvm.XMLFactory;
-import org.ballerinalang.jvm.types.BArrayType;
-import org.ballerinalang.jvm.types.BType;
-import org.ballerinalang.jvm.types.BTypes;
-import org.ballerinalang.jvm.values.ArrayValue;
-import org.ballerinalang.jvm.values.ArrayValueImpl;
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.MapValueImpl;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.jvm.values.XMLSequence;
-import org.ballerinalang.jvm.values.XMLValue;
-import org.ballerinalang.jvm.values.api.BArray;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.jvm.values.api.BValueCreator;
-import org.ballerinalang.mime.util.EntityBodyChannel;
-import org.ballerinalang.mime.util.EntityBodyHandler;
-import org.ballerinalang.mime.util.EntityWrapper;
-import org.ballerinalang.mime.util.HeaderUtil;
-import org.ballerinalang.mime.util.MimeConstants;
-import org.ballerinalang.mime.util.MimeUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-
-import javax.mail.Address;
-import javax.mail.BodyPart;
-import javax.mail.Header;
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.internet.MimeMultipart;
-
-import static org.ballerinalang.mime.util.MimeConstants.BODY_PARTS;
-import static org.ballerinalang.mime.util.MimeConstants.ENTITY;
-import static org.ballerinalang.mime.util.MimeConstants.ENTITY_BYTE_CHANNEL;
-import static org.ballerinalang.mime.util.MimeConstants.MEDIA_TYPE;
-import static org.ballerinalang.mime.util.MimeConstants.OCTET_STREAM;
-import static org.ballerinalang.mime.util.MimeConstants.PROTOCOL_MIME_PKG_ID;
-
-/**
- * Contains utility functions related to the POP and IMAP protocols.
- *
- * @since 1.2.0
- */
-public class EmailAccessUtil {
-
-    private static final Logger log = LoggerFactory.getLogger(EmailAccessUtil.class);
-    private static final BArrayType stringArrayType = new BArrayType(BTypes.typeString);
-
-    /**
-     * Generates Properties object using the passed MapValue.
-     *
-     * @param emailAccessConfig MapValue with the configuration values
-     * @param host Host address of email server
-     * @return Properties Email server access properties
-     */
-    public static Properties getPopProperties(MapValue<BString, Object> emailAccessConfig, String host) {
-        Properties properties = new Properties();
-        properties.put(EmailConstants.PROPS_POP_HOST, host);
-        properties.put(EmailConstants.PROPS_POP_PORT,
-                Long.toString(emailAccessConfig.getIntValue(EmailConstants.PROPS_PORT)));
-        properties.put(EmailConstants.PROPS_POP_AUTH, "true");
-        properties.put(EmailConstants.PROPS_POP_STARTTLS, "true");
-        properties.put(EmailConstants.PROPS_POP_SSL_ENABLE,
-                emailAccessConfig.getBooleanValue(EmailConstants.PROPS_SSL));
-        properties.put(EmailConstants.MAIL_STORE_PROTOCOL, EmailConstants.POP_PROTOCOL);
-        CommonUtil.addCustomProperties(
-                (MapValue<BString, Object>) emailAccessConfig.getMapValue(EmailConstants.PROPS_PROPERTIES), properties);
-        if (log.isDebugEnabled()) {
-            Set<String> propertySet = properties.stringPropertyNames();
-            log.debug("POP3 Properties set are as follows.");
-            for (Object propertyObj : propertySet) {
-                log.debug("Property Name: " + propertyObj + ", Value: " + properties.get(propertyObj).toString()
-                        + " ValueType: " + properties.get(propertyObj).getClass().getName());
-            }
-        }
-        return properties;
-    }
-
-    /**
-     * Generates Properties object using the passed MapValue.
-     *
-     * @param emailAccessConfig MapValue with the configuration values
-     * @param host Host address of email server
-     * @return Properties Email server access properties
-     */
-    public static Properties getImapProperties(MapValue<BString, Object> emailAccessConfig, String host) {
-        Properties properties = new Properties();
-        properties.put(EmailConstants.PROPS_IMAP_HOST, host);
-        properties.put(EmailConstants.PROPS_IMAP_PORT,
-                Long.toString(emailAccessConfig.getIntValue(EmailConstants.PROPS_PORT)));
-        properties.put(EmailConstants.PROPS_IMAP_AUTH, "true");
-        properties.put(EmailConstants.PROPS_IMAP_STARTTLS, "true");
-        properties.put(EmailConstants.PROPS_IMAP_SSL_ENABLE,
-                emailAccessConfig.getBooleanValue(EmailConstants.PROPS_SSL));
-        properties.put(EmailConstants.MAIL_STORE_PROTOCOL, EmailConstants.IMAP_PROTOCOL);
-        CommonUtil.addCustomProperties(
-                (MapValue<BString, Object>) emailAccessConfig.getMapValue(EmailConstants.PROPS_PROPERTIES), properties);
-        if (log.isDebugEnabled()) {
-            Set<String> propertySet = properties.stringPropertyNames();
-            log.debug("IMAP4 Properties set are as follows.");
-            for (Object propertyObj : propertySet) {
-                log.debug("Property Name: " + propertyObj + ", Value: " + properties.get(propertyObj).toString()
-                        + " ValueType: " + properties.get(propertyObj).getClass().getName());
-            }
-        }
-        return properties;
-    }
-
-    /**
-     * Generates MapValue object using the passed message.
-     *
-     * @param message Email message received
-     * @return MapValue Ballerina compatible map object
-     * @throws MessagingException If an error occurs related to messaging
-     * @throws IOException If an error occurs related to I/O
-     */
-    public static MapValue<BString, Object> getMapValue(Message message) throws MessagingException, IOException {
-        Map<String, Object> valueMap = new HashMap<>();
-        BArray toAddressArrayValue = getAddressBArrayList(message.getRecipients(Message.RecipientType.TO));
-        BArray ccAddressArrayValue = getAddressBArrayList(message.getRecipients(Message.RecipientType.CC));
-        BArray bccAddressArrayValue = getAddressBArrayList(message.getRecipients(Message.RecipientType.BCC));
-        BArray replyToAddressArrayValue = getAddressBArrayList(message.getReplyTo());
-        String subject = getStringNullChecked(message.getSubject());
-        String messageBody = extractBodyFromMessage(message);
-        MapValue<BString, BString> headers = extractHeadersFromMessage(message);
-        String messageContentType = message.getContentType();
-        String fromAddress = extractFromAddressFromMessage(message);
-        String senderAddress = getSenderAddress(message);
-        BArray attachments = extractAttachmentsFromMessage(message);
-        valueMap.put(EmailConstants.MESSAGE_TO.getValue(), toAddressArrayValue);
-        valueMap.put(EmailConstants.MESSAGE_CC.getValue(), ccAddressArrayValue);
-        valueMap.put(EmailConstants.MESSAGE_BCC.getValue(), bccAddressArrayValue);
-        valueMap.put(EmailConstants.MESSAGE_REPLY_TO.getValue(), replyToAddressArrayValue);
-        valueMap.put(EmailConstants.MESSAGE_SUBJECT.getValue(), subject);
-        if (CommonUtil.isJsonBased(message.getContentType())) {
-            valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY.getValue(), getJsonContent(messageBody));
-        } else if (CommonUtil.isXmlBased(message.getContentType())) {
-            valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY.getValue(), parseToXml(messageBody));
-        } else {
-            valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY.getValue(), messageBody);
-        }
-        if (messageContentType != null && !messageContentType.equals("")) {
-            valueMap.put(EmailConstants.MESSAGE_BODY_CONTENT_TYPE.getValue(), messageContentType);
-        }
-        if (headers != null) {
-            valueMap.put(EmailConstants.MESSAGE_HEADERS.getValue(), headers);
-        }
-        valueMap.put(EmailConstants.MESSAGE_FROM.getValue(), fromAddress);
-        valueMap.put(EmailConstants.MESSAGE_SENDER.getValue(), senderAddress);
-        if (attachments != null && attachments.size() > 0) {
-            valueMap.put(EmailConstants.MESSAGE_ATTACHMENTS.getValue(), attachments);
-        }
-        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, EmailConstants.EMAIL, valueMap);
-    }
-
-    private static MapValue<BString, BString> extractHeadersFromMessage(Message message) throws MessagingException {
-        MapValue<BString, BString> headerMap = new MapValueImpl<>();
-        Enumeration<Header> headers = message.getAllHeaders();
-        if (headers.hasMoreElements()) {
-            while (headers.hasMoreElements()) {
-                Header header = headers.nextElement();
-                headerMap.put(StringUtils.fromString(header.getName()), StringUtils.fromString(header.getValue()));
-            }
-            return headerMap;
-        }
-        return null;
-    }
-
-    private static XMLSequence parseToXml(String xmlStr) {
-        return (XMLSequence) XMLFactory.parse(xmlStr);
-    }
-
-    private static Object getJsonContent(String messageContent) {
-        Object json = JSONParser.parse(messageContent);
-        if (json instanceof String) {
-            return StringUtils.fromString((String) json);
-        }
-        return json;
-    }
-
-    private static String extractBodyFromMessage(Message message) throws MessagingException, IOException {
-        String messageBody = "";
-        if (message.getContentType() != null && CommonUtil.isTextBased(message.getContentType())) {
-            if (message.getContent() != null) {
-                messageBody = message.getContent().toString();
-            }
-        } else if (message.isMimeType(EmailConstants.MIME_CONTENT_TYPE_PATTERN)) {
-            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();
-            if (mimeMultipart != null && mimeMultipart.getCount() > 0 && mimeMultipart.getBodyPart(0) != null
-                    && mimeMultipart.getBodyPart(0).getContent() != null) {
-                messageBody = (String) mimeMultipart.getBodyPart(0).getContent();
-            }
-        }
-        return messageBody;
-    }
-
-    private static BArray extractAttachmentsFromMessage(Message message) throws MessagingException, IOException {
-        ArrayList<ObjectValue> attachmentArray = new ArrayList<>();
-        if (!message.isMimeType(EmailConstants.MIME_CONTENT_TYPE_PATTERN)) {
-            return null;
-        } else {
-            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();
-            int numberOfAttachments = mimeMultipart.getCount();
-            if (numberOfAttachments > 1) {
-                for (int i = 1; i < numberOfAttachments; i++) {
-                    attachMultipart(mimeMultipart.getBodyPart(i), attachmentArray);
-                }
-                return getArrayOfEntities(attachmentArray);
-            } else {
-                log.debug("Received a Multipart email message without any attachments.");
-                return null;
-            }
-        }
-    }
-
-    private static void attachMultipart(BodyPart bodyPart, ArrayList<ObjectValue> entityArray)
-            throws MessagingException, IOException {
-        if (bodyPart.isMimeType(EmailConstants.MIME_CONTENT_TYPE_PATTERN)) {
-            entityArray.add(getMultipartEntity(bodyPart));
-        } else {
-            String contentType = bodyPart.getContentType();
-            if (contentType != null && bodyPart.getContent() instanceof String) {
-                if (CommonUtil.isJsonBased(contentType)) {
-                    entityArray.add(getJsonEntity(bodyPart));
-                } else if (CommonUtil.isXmlBased(contentType)) {
-                    entityArray.add(getXmlEntity(bodyPart));
-                } else {
-                    entityArray.add(getTextEntity(bodyPart));
-                }
-            } else {
-                entityArray.add(getBinaryEntity(bodyPart));
-            }
-        }
-    }
-
-    private static ObjectValue getMultipartEntity(BodyPart bodyPart) throws MessagingException, IOException {
-        ObjectValue multipartEntity = createEntityObject();
-        ArrayList<ObjectValue> entities = getMultipleEntities(bodyPart);
-        if (entities != null && bodyPart.getContentType() != null) {
-            multipartEntity.addNativeData(BODY_PARTS, getArrayOfEntities(entities));
-            MimeUtil.setContentType(createMediaTypeObject(), multipartEntity, bodyPart.getContentType());
-            setEntityHeaders(multipartEntity, bodyPart);
-        }
-        return multipartEntity;
-    }
-
-    private static ArrayList<ObjectValue> getMultipleEntities(BodyPart bodyPart)
-            throws IOException, MessagingException {
-        ArrayList<ObjectValue> entityArray = new ArrayList<>();
-        MimeMultipart mimeMultipart = (MimeMultipart) bodyPart.getContent();
-        int numberOfBodyParts = mimeMultipart.getCount();
-        if (numberOfBodyParts > 0) {
-            for (int i = 0; i < numberOfBodyParts; i++) {
-                attachMultipart(bodyPart, entityArray);
-            }
-            return entityArray;
-        } else {
-            return null;
-        }
-    }
-
-    private static ObjectValue getJsonEntity(BodyPart bodyPart) throws IOException, MessagingException {
-        String jsonContent = (String) bodyPart.getContent();
-        ObjectValue entity = createEntityObject();
-        EntityWrapper byteChannel = EntityBodyHandler.getEntityWrapper(jsonContent);
-        entity.addNativeData(MimeConstants.ENTITY_BYTE_CHANNEL, byteChannel);
-        MimeUtil.setContentType(createMediaTypeObject(), entity, MimeConstants.APPLICATION_JSON);
-        setEntityHeaders(entity, bodyPart);
-        return entity;
-    }
-
-    private static ObjectValue getXmlEntity(BodyPart bodyPart) throws IOException, MessagingException {
-        String xmlContent = (String) bodyPart.getContent();
-        XMLValue xmlNode = XMLFactory.parse(xmlContent);
-        ObjectValue entity = createEntityObject();
-        EntityBodyChannel byteChannel = new EntityBodyChannel(new ByteArrayInputStream(
-                xmlNode.stringValue().getBytes(StandardCharsets.UTF_8)));
-        entity.addNativeData(ENTITY_BYTE_CHANNEL, new EntityWrapper(byteChannel));
-        MimeUtil.setContentType(createMediaTypeObject(), entity, MimeConstants.APPLICATION_XML);
-        setEntityHeaders(entity, bodyPart);
-        return entity;
-    }
-
-    private static ObjectValue getTextEntity(BodyPart bodyPart) throws IOException, MessagingException {
-        String textPayload = (String) bodyPart.getContent();
-        ObjectValue entity = BallerinaValues.createObjectValue(PROTOCOL_MIME_PKG_ID, ENTITY);
-        entity.addNativeData(ENTITY_BYTE_CHANNEL, EntityBodyHandler.getEntityWrapper(textPayload));
-        MimeUtil.setContentType(createMediaTypeObject(), entity, MimeConstants.TEXT_PLAIN);
-        setEntityHeaders(entity, bodyPart);
-        return entity;
-    }
-
-    private static ObjectValue getBinaryEntity(BodyPart bodyPart) throws IOException, MessagingException {
-        byte[] binaryContent = CommonUtil.convertInputStreamToByteArray(bodyPart.getInputStream());
-        EntityWrapper byteChannel = new EntityWrapper(new EntityBodyChannel(new ByteArrayInputStream(binaryContent)));
-        ObjectValue entity = createEntityObject();
-        entity.addNativeData(ENTITY_BYTE_CHANNEL, byteChannel);
-        MimeUtil.setContentType(createMediaTypeObject(), entity, OCTET_STREAM);
-        setEntityHeaders(entity, bodyPart);
-        return entity;
-    }
-
-    private static void setEntityHeaders(ObjectValue entity, BodyPart bodyPart) throws MessagingException {
-        Enumeration<Header> headers = bodyPart.getAllHeaders();
-        while (headers.hasMoreElements()) {
-            Header header = headers.nextElement();
-            HeaderUtil.setHeaderToEntity(entity, header.getName(), header.getValue());
-        }
-    }
-
-    private static ArrayValue getArrayOfEntities(ArrayList<ObjectValue> entities) {
-        BType typeOfEntity = entities.get(0).getType();
-        ObjectValue[] result = entities.toArray(new ObjectValue[entities.size()]);
-        return new ArrayValueImpl(result, new BArrayType(typeOfEntity));
-    }
-
-    private static ObjectValue createMediaTypeObject() {
-        return BallerinaValues.createObjectValue(PROTOCOL_MIME_PKG_ID, MEDIA_TYPE);
-    }
-
-    private static ObjectValue createEntityObject() {
-        return BallerinaValues.createObjectValue(PROTOCOL_MIME_PKG_ID, ENTITY);
-    }
-
-    private static String extractFromAddressFromMessage(Message message) throws MessagingException {
-        String fromAddress = "";
-        if (message.getFrom() != null) {
-            fromAddress = message.getFrom()[0].toString();
-        }
-        return fromAddress;
-    }
-
-    private static String getSenderAddress(Message message) throws MessagingException {
-        String senderAddress = "";
-        if (message instanceof POP3Message) {
-            if (((POP3Message) message).getSender() != null) {
-                senderAddress = ((POP3Message) message).getSender().toString();
-            }
-        } else if (message instanceof IMAPMessage) {
-            if (((IMAPMessage) message).getSender() != null) {
-                senderAddress = ((IMAPMessage) message).getSender().toString();
-            }
-        }
-        return senderAddress;
-    }
-
-    private static BArray getAddressBArrayList(Address[] addresses) {
-        BArray addressArrayValue = BValueCreator.createArrayValue(stringArrayType);
-        if (addresses != null) {
-            for (Address address: addresses) {
-                addressArrayValue.append(StringUtils.fromString(address.toString()));
-            }
-        }
-        return addressArrayValue;
-    }
-
-    private static String getStringNullChecked(String string) {
-        return string == null ? "" : string;
-    }
-
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailConstants.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailConstants.java
deleted file mode 100644
index c05fe320a5c..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailConstants.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.util;
-
-import org.ballerinalang.jvm.StringUtils;
-import org.ballerinalang.jvm.scheduling.StrandMetadata;
-import org.ballerinalang.jvm.types.BPackage;
-import org.ballerinalang.jvm.values.api.BString;
-
-import static org.ballerinalang.jvm.util.BLangConstants.BALLERINA_BUILTIN_PKG_PREFIX;
-
-/**
- * Constants of the Email module.
- *
- * @since 1.2.0
- */
-public class EmailConstants {
-
-    // Common constants
-    public static final String CONNECTOR_NAME = "email";
-    public static final String MODULE_NAME = "email";
-    public static final String MODULE_VERSION = "0.6.0";
-    public static final BPackage EMAIL_PACKAGE_ID = new BPackage(BALLERINA_BUILTIN_PKG_PREFIX, MODULE_NAME,
-                                                                 MODULE_VERSION);
-    public static final BString PROPS_PORT = StringUtils.fromString("port");
-    public static final BString PROPS_USERNAME = StringUtils.fromString("username");
-    public static final BString MESSAGE_TO = StringUtils.fromString("to");
-    public static final BString MESSAGE_CC = StringUtils.fromString("cc");
-    public static final BString MESSAGE_BCC = StringUtils.fromString("bcc");
-    public static final BString MESSAGE_SUBJECT = StringUtils.fromString("subject");
-    public static final BString MESSAGE_MESSAGE_BODY = StringUtils.fromString("body");
-    public static final BString MESSAGE_BODY_CONTENT_TYPE = StringUtils.fromString("contentType");
-    public static final BString MESSAGE_FROM = StringUtils.fromString("from");
-    public static final BString MESSAGE_SENDER = StringUtils.fromString("sender");
-    public static final BString MESSAGE_REPLY_TO = StringUtils.fromString("replyTo");
-    public static final BString MESSAGE_ATTACHMENTS = StringUtils.fromString("attachments");
-    public static final BString MESSAGE_HEADERS = StringUtils.fromString("headers");
-
-    // Common constants to POP and IMAP
-    public static final BString PROPS_PROPERTIES = StringUtils.fromString("properties");
-    public static final BString PROPS_SSL = StringUtils.fromString("enableSsl");
-    public static final BString PROPS_HOST = StringUtils.fromString("host");
-    public static final BString PROPS_PASSWORD = StringUtils.fromString("password");
-    public static final BString PROPS_PROTOCOL = StringUtils.fromString("protocol");
-    public static final String PROPS_STORE = "store";
-    public static final String MAIL_STORE_PROTOCOL = "mail.store.protocol";
-    public static final String MIME_CONTENT_TYPE_PATTERN = "multipart/*";
-    public static final String READ_CLIENT_INIT_ERROR = "ReadClientInitError";
-    public static final String READ_ERROR = "ReadError";
-    public static final BString ENDPOINT_CONFIG_SECURE_SOCKET = StringUtils.fromString("secureSocket");
-    public static final BString ENDPOINT_CONFIG_PRIVATE_KEY = StringUtils.fromString("privateKey");
-    public static final BString ENDPOINT_CONFIG_PATH = StringUtils.fromString("path");
-    public static final BString ENDPOINT_CONFIG_PASS_KEY = StringUtils.fromString("password");
-    public static final String IDENTITY = "IDENTITY";
-    public static final String IDENTITY_PASS_PHRASE = "IDENTITY_PASS_PHRASE";
-    public static final String URI = "uri";
-    public static final String EMAIL_SERVER_CONNECTOR = "serverConnector";
-    public static final BString PROTOCOL_CONFIG = StringUtils.fromString("protocolConfig");
-    public static final String DEFAULT_STORE_LOCATION = "INBOX";
-    public static final String ON_MESSAGE = "onMessage";
-    public static final String ON_ERROR = "onError";
-    public static final String LISTENER = "Listener";
-
-    // POP related constants
-    public static final String POP = "POP";
-    public static final String POP_CLIENT = "PopClient";
-    public static final String POP_PROTOCOL = "pop3";
-    public static final String PROPS_POP_HOST = "mail.pop3.host";
-    public static final String PROPS_POP_PORT = "mail.pop3.port";
-    public static final String PROPS_POP_AUTH = "mail.pop.auth";
-    public static final String PROPS_POP_STARTTLS = "mail.pop3.starttls.enable";
-    public static final String PROPS_POP_SSL_ENABLE = "mail.pop3.ssl.enable";
-
-    // IMAP related constants
-    public static final String IMAP = "IMAP";
-    public static final String IMAP_CLIENT = "ImapClient";
-    public static final String IMAP_PROTOCOL = "imap";
-    public static final String PROPS_IMAP_HOST = "mail.imap.host";
-    public static final String PROPS_IMAP_PORT = "mail.imap.port";
-    public static final String PROPS_IMAP_STARTTLS = "mail.imap.starttls.enable";
-    public static final String PROPS_IMAP_SSL_ENABLE = "mail.imap.ssl.enable";
-    public static final String PROPS_IMAP_AUTH = "mail.imap.auth";
-
-    // SMTP related constants
-    public static final String PROPS_SESSION = "session";
-    public static final String PROPS_ENABLE_SSL = "mail.smtp.ssl.enable";
-    public static final String PROPS_SMTP_HOST = "mail.smtp.host";
-    public static final String PROPS_SMTP_PORT = "mail.smtp.port";
-    public static final String PROPS_SMTP_AUTH = "mail.smtp.auth";
-    public static final String PROPS_SMTP_STARTTLS = "mail.smtp.starttls.enable";
-    public static final String SEND_ERROR = "SendError";
-
-    public static final String EMAIL = "Email";
-    public static final String ERROR = "Error";
-    public static final String HEADER = "Header";
-
-    // Strand meta data
-    public static final StrandMetadata ON_MESSAGE_METADATA = new StrandMetadata(BALLERINA_BUILTIN_PKG_PREFIX,
-                                                                                MODULE_NAME, MODULE_VERSION,
-                                                                                ON_MESSAGE);
-
-    public static final StrandMetadata ON_ERROR_METADATA = new StrandMetadata(BALLERINA_BUILTIN_PKG_PREFIX,
-                                                                              MODULE_NAME, MODULE_VERSION, ON_ERROR);
-
-    private EmailConstants() {
-        // private constructor
-    }
-}
diff --git a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java b/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java
deleted file mode 100644
index 3dacc3794ad..00000000000
--- a/stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java
+++ /dev/null
@@ -1,268 +0,0 @@
-/*
- * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email.util;
-
-import org.ballerinalang.jvm.BallerinaErrors;
-import org.ballerinalang.jvm.values.ArrayValue;
-import org.ballerinalang.jvm.values.ArrayValueImpl;
-import org.ballerinalang.jvm.values.ErrorValue;
-import org.ballerinalang.jvm.values.MapValue;
-import org.ballerinalang.jvm.values.ObjectValue;
-import org.ballerinalang.jvm.values.api.BString;
-import org.ballerinalang.mime.nativeimpl.MimeDataSourceBuilder;
-import org.ballerinalang.mime.util.EntityBodyHandler;
-import org.ballerinalang.mime.util.EntityHeaderHandler;
-import org.ballerinalang.mime.util.MimeConstants;
-import org.ballerinalang.stdlib.io.channels.base.Channel;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Properties;
-import java.util.Set;
-
-import javax.activation.DataHandler;
-import javax.mail.Address;
-import javax.mail.BodyPart;
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Multipart;
-import javax.mail.Session;
-import javax.mail.internet.AddressException;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeBodyPart;
-import javax.mail.internet.MimeMessage;
-import javax.mail.internet.MimeMultipart;
-import javax.mail.util.ByteArrayDataSource;
-
-import static org.ballerinalang.mime.util.MimeUtil.getContentTypeWithParameters;
-
-/**
- * Contains the utility functions related to the SMTP protocol.
- *
- * @since 1.2.0
- */
-public class SmtpUtil {
-
-    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);
-
-    /**
-     * Generates the Properties object using the passed MapValue.
-     *
-     * @param smtpConfig MapValue with the configuration values
-     * @param host Host address of the SMTP server
-     * @return Properties Set of properties required to connect to an SMTP server
-     */
-    public static Properties getProperties(MapValue<BString, Object> smtpConfig, String host) {
-        Properties properties = new Properties();
-        properties.put(EmailConstants.PROPS_SMTP_HOST, host);
-        properties.put(EmailConstants.PROPS_SMTP_PORT, Long.toString(
-                smtpConfig.getIntValue(EmailConstants.PROPS_PORT)));
-        properties.put(EmailConstants.PROPS_SMTP_AUTH, "true");
-        properties.put(EmailConstants.PROPS_SMTP_STARTTLS, "true");
-        properties.put(EmailConstants.PROPS_ENABLE_SSL, smtpConfig.getBooleanValue(EmailConstants.PROPS_SSL));
-        CommonUtil.addCustomProperties(
-                (MapValue<BString, Object>) smtpConfig.getMapValue(EmailConstants.PROPS_PROPERTIES), properties);
-        if (log.isDebugEnabled()) {
-            Set<String> propertySet = properties.stringPropertyNames();
-            log.debug("SMTP Properties set are as follows.");
-            for (Object propertyObj : propertySet) {
-                log.debug("Property Name: " + propertyObj + ", Value: " + properties.get(propertyObj).toString()
-                        + " ValueType: " + properties.get(propertyObj).getClass().getName());
-            }
-        }
-        return properties;
-    }
-
-    /**
-     * Generates a MIME message to be sent as an email.
-     *
-     * @param session Session to which the message is attached
-     * @param username User who sends the email
-     * @param message Ballerina-typed data object
-     * @return MimeMessage Email message as a MIME message
-     * @throws MessagingException If an error occurs related to messaging operations
-     * @throws IOException If an error occurs related to I/O operations
-     */
-    public static MimeMessage generateMessage(Session session, String username, MapValue<BString, Object> message)
-            throws MessagingException, IOException {
-        Address[] toAddressArray = extractAddressLists(message, EmailConstants.MESSAGE_TO);
-        Address[] ccAddressArray = extractAddressLists(message, EmailConstants.MESSAGE_CC);
-        Address[] bccAddressArray = extractAddressLists(message, EmailConstants.MESSAGE_BCC);
-        Address[] replyToAddressArray = extractAddressLists(message, EmailConstants.MESSAGE_REPLY_TO);
-        String subject = message.getStringValue(EmailConstants.MESSAGE_SUBJECT).getValue();
-        String messageBody = message.getStringValue(EmailConstants.MESSAGE_MESSAGE_BODY).getValue();
-        String bodyContentType = message.getStringValue(EmailConstants.MESSAGE_BODY_CONTENT_TYPE).getValue();
-        String fromAddress = message.getStringValue(EmailConstants.MESSAGE_FROM).getValue();
-        if (fromAddress == null || fromAddress.isEmpty()) {
-            fromAddress = username;
-        }
-        String senderAddress = getNullCheckedString(message.getStringValue(EmailConstants.MESSAGE_SENDER));
-        MimeMessage emailMessage = new MimeMessage(session);
-        emailMessage.setRecipients(Message.RecipientType.TO, toAddressArray);
-        if (ccAddressArray.length > 0) {
-            emailMessage.setRecipients(Message.RecipientType.CC, ccAddressArray);
-        }
-        if (bccAddressArray.length > 0) {
-            emailMessage.setRecipients(Message.RecipientType.BCC, bccAddressArray);
-        }
-        if (replyToAddressArray.length > 0) {
-            emailMessage.setReplyTo(replyToAddressArray);
-        }
-        emailMessage.setSubject(subject);
-        emailMessage.setFrom(new InternetAddress(fromAddress));
-        if (!senderAddress.isEmpty()) {
-            emailMessage.setSender(new InternetAddress(senderAddress));
-        }
-        ArrayValue attachments = message.getArrayValue(EmailConstants.MESSAGE_ATTACHMENTS);
-        if (attachments == null) {
-            emailMessage.setContent(messageBody, bodyContentType);
-        } else {
-            addBodyAndAttachments(emailMessage, messageBody, bodyContentType, attachments);
-        }
-        addMessageHeaders(emailMessage, message);
-        return emailMessage;
-    }
-
-    private static void addMessageHeaders(MimeMessage emailMessage, MapValue<BString, Object> message)
-            throws MessagingException {
-        MapValue<BString, BString> headers =
-                (MapValue<BString, BString>) message.getMapValue(EmailConstants.MESSAGE_HEADERS);
-        if (headers != null) {
-            BString[] headerNames = headers.getKeys();
-            for (BString headerName : headerNames) {
-                emailMessage.addHeader(headerName.getValue(), headers.getStringValue(headerName).getValue());
-            }
-        }
-    }
-
-    private static void addBodyAndAttachments(MimeMessage emailMessage, String messageBody, String bodyContentType,
-                                              ArrayValue attachments)
-            throws MessagingException, IOException {
-        BodyPart messageBodyPart = new MimeBodyPart();
-        messageBodyPart.setContent(messageBody, bodyContentType);
-        Multipart multipart = new MimeMultipart();
-        multipart.addBodyPart(messageBodyPart);
-        for (int i = 0; i < attachments.size(); i++) {
-            if (attachments.get(i) instanceof ObjectValue) {
-                ObjectValue mimeEntity = (ObjectValue) attachments.get(i);
-                String contentType = getContentTypeWithParameters(mimeEntity);
-                if (contentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {
-                    multipart.addBodyPart(populateMultipart(mimeEntity));
-                } else {
-                    multipart.addBodyPart(buildJavaMailBodyPart(mimeEntity, contentType));
-                }
-            }
-        }
-        emailMessage.setContent(multipart);
-    }
-
-    private static MimeBodyPart populateMultipart(ObjectValue mimeEntity) throws IOException, MessagingException {
-        Multipart multipart = new MimeMultipart();
-        ArrayValue multipartMimeEntityArrayValue = EntityBodyHandler.getBodyPartArray(mimeEntity);
-        int entityCount = multipartMimeEntityArrayValue.size();
-        for (int i = 0; i < entityCount; i++) {
-            ObjectValue childMimeEntity = (ObjectValue) multipartMimeEntityArrayValue.get(i);
-            String childContentType = getContentTypeWithParameters(childMimeEntity);
-            if (childContentType.startsWith(MimeConstants.MULTIPART_AS_PRIMARY_TYPE)) {
-                multipart.addBodyPart(populateMultipart(childMimeEntity));
-            } else {
-                multipart.addBodyPart(buildJavaMailBodyPart(childMimeEntity, childContentType));
-            }
-        }
-        MimeBodyPart returnMimeBodyPart = new MimeBodyPart();
-        returnMimeBodyPart.setContent(multipart);
-        return returnMimeBodyPart;
-    }
-
-    private static MimeBodyPart buildJavaMailBodyPart(ObjectValue mimeEntity, String contentType)
-            throws MessagingException, IOException {
-        MimeBodyPart attachmentBodyPart = new MimeBodyPart();
-        Channel channel = EntityBodyHandler.getByteChannel(mimeEntity);
-        if (channel != null) {
-            InputStream inputStream = channel.getInputStream();
-            ByteArrayDataSource ds = new ByteArrayDataSource(inputStream, contentType);
-            attachmentBodyPart.setDataHandler(new DataHandler(ds));
-        } else {
-            if (CommonUtil.isTextBased(contentType)) {
-                attachmentBodyPart.setText(((BString) MimeDataSourceBuilder.getText(mimeEntity)).getValue());
-            } else {
-                ArrayValue binaryContent = (ArrayValue) MimeDataSourceBuilder.getByteArray(mimeEntity);
-                attachmentBodyPart.setContent(binaryContent.getBytes(), MimeConstants.OCTET_STREAM);
-            }
-        }
-        addHeadersToJavaMailBodyPart(mimeEntity, attachmentBodyPart);
-        return attachmentBodyPart;
-    }
-
-    private static void addHeadersToJavaMailBodyPart(ObjectValue mimeEntity, MimeBodyPart attachmentBodyPart)
-            throws MessagingException {
-
-        MapValue<BString, Object> entityHeaders = EntityHeaderHandler.getEntityHeaderMap(mimeEntity);
-
-        for (BString entryKey : entityHeaders.getKeys()) {
-            ArrayValueImpl entryValues = (ArrayValueImpl) entityHeaders.get(entryKey);
-            if (entryValues.size() > 0) {
-                String headerName = entryKey.getValue();
-                String headerValue = entryValues.getBString(0).getValue();
-                if (isNotEmpty(headerName)) {
-                    log.debug("Added a MIME body part header " + headerName + " with value " + headerValue);
-                    attachmentBodyPart.setHeader(headerName, headerValue);
-                }
-            }
-        }
-    }
-
-    private static Address[] extractAddressLists(MapValue<BString, Object> message, BString addressType)
-            throws AddressException {
-        String[] address =  getNullCheckedStringArray(message, addressType);
-        int addressArrayLength = address.length;
-        Address[] addressArray = new Address[addressArrayLength];
-        for (int i = 0; i < addressArrayLength; i++) {
-            addressArray[i] = new InternetAddress(address[i]);
-        }
-        return addressArray;
-    }
-
-    private static String[] getNullCheckedStringArray(MapValue<BString, Object> mapValue, BString parameter) {
-        if (mapValue != null) {
-            ArrayValue arrayValue = mapValue.getArrayValue(parameter);
-            if (arrayValue != null) {
-                return arrayValue.getStringArray();
-            } else {
-                return new String[0];
-            }
-        } else {
-            return new String[0];
-        }
-    }
-
-    private static String getNullCheckedString(BString string) {
-        return string == null ? "" : string.getValue();
-    }
-
-    private static boolean isNotEmpty(String string) {
-        return string != null && !string.isEmpty();
-    }
-
-    public static ErrorValue getBallerinaError(String typeId, String message) {
-        return BallerinaErrors.createDistinctError(typeId, EmailConstants.EMAIL_PACKAGE_ID, message);
-    }
-}
diff --git a/stdlib/email/src/main/resources/META-INF/services/org.ballerinalang.compiler.plugins.CompilerPlugin b/stdlib/email/src/main/resources/META-INF/services/org.ballerinalang.compiler.plugins.CompilerPlugin
deleted file mode 100644
index 8a4dff20daa..00000000000
--- a/stdlib/email/src/main/resources/META-INF/services/org.ballerinalang.compiler.plugins.CompilerPlugin
+++ /dev/null
@@ -1 +0,0 @@
-org.ballerinalang.stdlib.email.service.compiler.EmailListenerCompilerPlugin
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapComplexEmailReceiveTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapComplexEmailReceiveTest.java
deleted file mode 100644
index 69e441a5487..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapComplexEmailReceiveTest.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.user.GreenMailUser;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetupTest;
-import org.ballerinalang.mime.util.MimeConstants;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.model.values.BValueArray;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.Assert;
-import org.testng.annotations.AfterClass;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-import javax.mail.Address;
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Multipart;
-import javax.mail.Session;
-import javax.mail.internet.AddressException;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeBodyPart;
-import javax.mail.internet.MimeMessage;
-import javax.mail.internet.MimeMultipart;
-
-import static org.testng.AssertJUnit.assertEquals;
-
-/**
- * Test class for email receive using IMAP4 with all the parameters.
- *
- * @since 1.2.0
- */
-public class ImapComplexEmailReceiveTest {
-
-    private CompileResult compileResult;
-    private static final String HOST_NAME = "127.0.0.1";
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SENDER = "someone2@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String HEADER1_NAME = "header1_name";
-    private static final String HEADER1_VALUE = "header1_value";
-    private static final String ATTACHMENT1_TEXT = "Sample attachment text";
-    private static final String ATTACHMENT2_TEXT = "{\"bodyPart\":\"jsonPart\"}";
-    private static final String ATTACHMENT3_TEXT = "<name>Ballerina xml file part</name>";
-    private static final byte[] ATTACHMENT4_BINARY = "This is a sample source of bytes.".getBytes();
-    private static final String ATTACHMENT1_HEADER1_NAME_TEXT = "H1";
-    private static final String ATTACHMENT1_HEADER1_VALUE_TEXT = "V1";
-    private static final String[] EMAIL_TO_ADDRESSES = {"hascode1@localhost", "hascode2@localhost"};
-    private static final String[] EMAIL_CC_ADDRESSES = {"hascode3@localhost", "hascode4@localhost"};
-    private static final String[] EMAIL_BCC_ADDRESSES = {"hascode5@localhost", "hascode6@localhost"};
-    private static final String[] EMAIL_REPLY_TO_ADDRESSES = {"reply1@abc.com", "reply2@abc.com"};
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() throws MessagingException {
-
-        mailServer = new GreenMail(ServerSetupTest.IMAP);
-        mailServer.start();
-        GreenMailUser user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-
-        // Create an e-mail message using javax.mail ..
-        MimeMessage message = new MimeMessage((Session) null);
-        message.setFrom(new InternetAddress(EMAIL_FROM));
-        message.setSender(new InternetAddress(EMAIL_SENDER));
-        message.addRecipients(Message.RecipientType.TO, convertToAddressArray(EMAIL_TO_ADDRESSES));
-        message.addRecipients(Message.RecipientType.CC, convertToAddressArray(EMAIL_CC_ADDRESSES));
-        message.addRecipients(Message.RecipientType.BCC, convertToAddressArray(EMAIL_BCC_ADDRESSES));
-        message.setReplyTo(convertToAddressArray(EMAIL_REPLY_TO_ADDRESSES));
-        message.setSubject(EMAIL_SUBJECT);
-
-        Multipart multipartMessage = new MimeMultipart();
-        MimeBodyPart messageBodyPart = new MimeBodyPart();
-        messageBodyPart.setContent(EMAIL_TEXT, MimeConstants.TEXT_PLAIN);
-        MimeBodyPart attachment1 = new MimeBodyPart();
-        MimeBodyPart attachment2 = new MimeBodyPart();
-        MimeBodyPart attachment3 = new MimeBodyPart();
-        MimeBodyPart attachment4 = new MimeBodyPart();
-        attachment1.setContent(ATTACHMENT1_TEXT, MimeConstants.TEXT_PLAIN);
-        attachment1.addHeader(ATTACHMENT1_HEADER1_NAME_TEXT, ATTACHMENT1_HEADER1_VALUE_TEXT);
-        attachment2.setContent(ATTACHMENT2_TEXT, MimeConstants.APPLICATION_JSON);
-        attachment3.setContent(ATTACHMENT3_TEXT, MimeConstants.APPLICATION_XML);
-        attachment4.setContent(ATTACHMENT4_BINARY, MimeConstants.OCTET_STREAM);
-        multipartMessage.addBodyPart(messageBodyPart);
-        multipartMessage.addBodyPart(attachment1);
-        multipartMessage.addBodyPart(attachment2);
-        multipartMessage.addBodyPart(attachment3);
-        multipartMessage.addBodyPart(attachment4);
-        message.setContent(multipartMessage);
-        message.addHeader(HEADER1_NAME, HEADER1_VALUE);
-
-        // Use greenmail to store the message
-        user.deliver(message);
-
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "ImapComplexEmailReceive.bal");
-        compileResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-    @Test(description = "Test for receiving an email with all the parameters")
-    public void testReceiveComplexEmail() {
-        BValue[] args = {new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD)};
-        BValue[] returns = BRunUtil.invoke(compileResult, "testReceiveComplexEmail", args);
-
-        Assert.assertTrue(returns[0] instanceof BValueArray);
-        String[] result = ((BValueArray) returns[0]).getStringArray();
-        assertEquals(EMAIL_SUBJECT, result[0]);
-        assertEquals(EMAIL_TEXT.trim(), result[1].trim());
-        assertEquals(EMAIL_FROM, result[2]);
-        assertEquals(EMAIL_SENDER, result[3]);
-        assertEquals(concatAddresses(EMAIL_TO_ADDRESSES), result[4]);
-        assertEquals(concatAddresses(EMAIL_CC_ADDRESSES), result[5]);
-        assertEquals(concatAddresses(EMAIL_REPLY_TO_ADDRESSES), result[6]);
-        assertEquals(ATTACHMENT1_TEXT, result[7]);
-        assertEquals(ATTACHMENT2_TEXT, result[8]);
-        assertEquals(ATTACHMENT3_TEXT, result[9]);
-        assertEquals(new String(ATTACHMENT4_BINARY), result[10]);
-        assertEquals(ATTACHMENT1_HEADER1_VALUE_TEXT, result[11]);
-        Assert.assertTrue(result[12].startsWith(MimeConstants.TEXT_PLAIN));
-        assertEquals(HEADER1_VALUE, result[13]);
-    }
-
-    private String concatAddresses(String[] addresses) {
-        StringBuilder stringBuilder = new StringBuilder();
-        for (String address : addresses) {
-            stringBuilder.append(address);
-        }
-        return stringBuilder.toString();
-    }
-
-    @AfterClass
-    public void terminate() {
-        mailServer.stop();
-    }
-
-    private Address[] convertToAddressArray(String[] stringAddresses) throws AddressException {
-        if (stringAddresses != null && stringAddresses.length > 0) {
-            Address[] addresses = new Address[stringAddresses.length];
-            for (int i = 0; i < stringAddresses.length; i++) {
-                addresses[i] = new InternetAddress(stringAddresses[i]);
-            }
-            return addresses;
-
-        } else {
-            return null;
-        }
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleSecureEmailReceiveTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleSecureEmailReceiveTest.java
deleted file mode 100644
index 92bbd83f113..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleSecureEmailReceiveTest.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.user.GreenMailUser;
-import com.icegreen.greenmail.util.DummySSLSocketFactory;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetup;
-import org.ballerinalang.model.values.BError;
-import org.ballerinalang.model.values.BMap;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.annotations.AfterClass;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.security.Security;
-
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Session;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeMessage;
-
-import static org.testng.AssertJUnit.assertEquals;
-import static org.testng.AssertJUnit.assertNotNull;
-import static org.testng.AssertJUnit.assertNull;
-import static org.testng.AssertJUnit.fail;
-
-/**
- * Test class for email receipt using IMAPS with least number of parameters.
- *
- * @since 1.2.0
- */
-public class ImapSimpleSecureEmailReceiveTest {
-
-    private GreenMailUser user;
-    private CompileResult compiledResult;
-    private static final String HOST_NAME = "127.0.0.1";
-    private static final int PORT_NUMBER = 3993;
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String SSL_SOCKET_FACTORY_PROVIDER = "ssl.SocketFactory.provider";
-    private static final int SERVER_TIMEOUT = 5000;
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() {
-        startServer();
-        compileBallerinaScript();
-    }
-
-    @Test(description = "Test for receiving zero emails with simple parameters")
-    public void testReceiveZeroEmails() {
-        readZeroEmails();
-    }
-
-    @Test(
-            description = "Test for receiving an email with simple parameters",
-            dependsOnMethods = "testReceiveZeroEmails"
-    )
-    public void testReceiveSimpleEmail() throws MessagingException {
-        sendEmail();
-        readEmails();
-    }
-
-    @Test(
-            description = "Test for receiving an email with simple parameters",
-            dependsOnMethods = "testReceiveZeroEmails"
-    )
-    public void testReceiveErrorWhileReadingEmail() throws MessagingException {
-        sendEmail();
-        readEmails();
-    }
-
-    @AfterClass
-    public void terminate() {
-        mailServer.stop();
-    }
-
-    private void readEmails() {
-        BValue[] args = {new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD)};
-        BValue[] returns = BRunUtil.invoke(compiledResult, "testReceiveSimpleEmail", args);
-        assertNotNull("No response received with simple IMAP configuration.", returns);
-        if (returns[0] instanceof BError) {
-            fail("Error occurred while reading from IMAP server.");
-        } else if (returns[0] == null) {
-            fail("IMAP Client could read zero emails.");
-        } else {
-            BMap<String, BValue> email = (BMap<String, BValue>) returns[0];
-            String subject = email.get(EmailConstants.MESSAGE_SUBJECT.getValue()).stringValue();
-            assertEquals(EMAIL_SUBJECT, subject);
-        }
-    }
-
-    private void readZeroEmails() {
-        BValue[] args = {new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD)};
-        BValue[] returns = BRunUtil.invoke(compiledResult, "testReceiveSimpleEmail", args);
-        assertNotNull("No response received with simple IMAP configuration.", returns);
-        if (returns[0] instanceof BError) {
-            fail("Error occurred while reading from IMAP server.");
-        } else {
-            assertNull("Returned non-null result for zero emails.", returns[0]);
-        }
-    }
-
-    private void startServer() {
-        Security.setProperty(SSL_SOCKET_FACTORY_PROVIDER, DummySSLSocketFactory.class.getName());
-        ServerSetup setup = new ServerSetup(PORT_NUMBER, null, ServerSetup.PROTOCOL_IMAPS);
-        setup.setServerStartupTimeout(SERVER_TIMEOUT);
-        mailServer = new GreenMail(setup);
-        mailServer.start();
-        user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-    }
-
-    private void sendEmail() throws MessagingException {
-        MimeMessage message = new MimeMessage((Session) null);
-        message.setFrom(new InternetAddress(EMAIL_FROM));
-        message.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_USER_ADDRESS));
-        message.setSubject(EMAIL_SUBJECT);
-        message.setText(EMAIL_TEXT);
-        user.deliver(message);
-    }
-
-    private void compileBallerinaScript() {
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "ImapSimpleSecureEmailReceive.bal");
-        compiledResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerImapReceiveTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerImapReceiveTest.java
deleted file mode 100644
index 7ecf4a4e9d8..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerImapReceiveTest.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.user.GreenMailUser;
-import com.icegreen.greenmail.util.DummySSLSocketFactory;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetup;
-import org.ballerinalang.model.values.BBoolean;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.security.Security;
-
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Session;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeMessage;
-
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertFalse;
-import static org.testng.Assert.assertTrue;
-
-/**
- * Test class for email receipt using the listener.
- *
- * @since 1.3.0
- */
-public class ListenerImapReceiveTest {
-
-    private GreenMailUser user;
-    private CompileResult compiledResult;
-    private static final int PORT_NUMBER = 3993;
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String SSL_SOCKET_FACTORY_PROVIDER = "ssl.SocketFactory.provider";
-    private static final int SERVER_TIMEOUT = 5000;
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() {
-        startServer();
-    }
-
-    @Test(description = "Test for receiving an email with simple parameters", enabled = false)
-    public void testReceiveSimpleEmail() throws MessagingException, InterruptedException {
-        compileBallerinaScript();
-        sendEmail();
-        Thread.sleep(10000);
-        readEmail();
-    }
-
-    @Test(
-            description = "Test for receiving an email with simple parameters",
-            dependsOnMethods = "testReceiveSimpleEmail",
-            enabled = false
-    )
-    public void testReceiveError() throws InterruptedException {
-        compileBallerinaScript();
-        mailServer.stop();
-        Thread.sleep(10000);
-        readError();
-    }
-
-    private void readEmail() {
-        BValue[] isOnMessageInvokedReturns = BRunUtil.invoke(compiledResult, "isOnMessageInvoked");
-        assertTrue(isOnMessageInvokedReturns[0] instanceof BBoolean);
-        assertTrue(((BBoolean) isOnMessageInvokedReturns[0]).booleanValue());
-
-        BValue[] receivedMessageReturns = BRunUtil.invoke(compiledResult, "getReceivedMessage");
-        assertTrue(receivedMessageReturns[0] instanceof BString);
-        assertEquals(receivedMessageReturns[0].stringValue(), "Test E-Mail");
-
-        BValue[] isOnErrorInvokedReturns = BRunUtil.invoke(compiledResult, "isOnErrorInvoked");
-        assertTrue(isOnErrorInvokedReturns[0] instanceof BBoolean);
-        assertFalse(((BBoolean) isOnErrorInvokedReturns[0]).booleanValue());
-
-        BValue[] receivedErrorReturns = BRunUtil.invoke(compiledResult, "getReceivedError");
-        assertTrue(receivedErrorReturns[0] instanceof BString);
-        assertEquals((receivedErrorReturns[0]).stringValue(), "");
-    }
-
-    private void readError() {
-        BValue[] isOnErrorInvokedReturns = BRunUtil.invoke(compiledResult, "isOnErrorInvoked");
-        assertTrue(isOnErrorInvokedReturns[0] instanceof BBoolean);
-        assertTrue(((BBoolean) isOnErrorInvokedReturns[0]).booleanValue());
-
-        BValue[] receivedErrorReturns = BRunUtil.invoke(compiledResult, "getReceivedError");
-        assertTrue(receivedErrorReturns[0] instanceof BString);
-        assertEquals((receivedErrorReturns[0]).stringValue(), "Couldn't connect to host, port: 127.0.0.1," +
-                " 3993; timeout -1");
-    }
-
-    private void startServer() {
-        Security.setProperty(SSL_SOCKET_FACTORY_PROVIDER, DummySSLSocketFactory.class.getName());
-        ServerSetup setup = new ServerSetup(PORT_NUMBER, null, ServerSetup.PROTOCOL_IMAPS);
-        setup.setServerStartupTimeout(SERVER_TIMEOUT);
-        mailServer = new GreenMail(setup);
-        mailServer.start();
-        user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-    }
-
-    private void sendEmail() throws MessagingException {
-        MimeMessage message = new MimeMessage((Session) null);
-        message.setFrom(new InternetAddress(EMAIL_FROM));
-        message.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_USER_ADDRESS));
-        message.setSubject(EMAIL_SUBJECT);
-        message.setText(EMAIL_TEXT);
-        user.deliver(message);
-    }
-
-    private void compileBallerinaScript() {
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "ListenerImapReceive.bal");
-        compiledResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerPopReceiveTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerPopReceiveTest.java
deleted file mode 100644
index 258c5736be4..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ListenerPopReceiveTest.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.user.GreenMailUser;
-import com.icegreen.greenmail.util.DummySSLSocketFactory;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetup;
-import org.ballerinalang.model.values.BBoolean;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.security.Security;
-
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Session;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeMessage;
-
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertFalse;
-import static org.testng.Assert.assertTrue;
-
-/**
- * Test class for email receipt using the listener.
- *
- * @since 1.3.0
- */
-public class ListenerPopReceiveTest {
-
-    private GreenMailUser user;
-    private CompileResult compiledResult;
-    private static final int PORT_NUMBER = 3995;
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String SSL_SOCKET_FACTORY_PROVIDER = "ssl.SocketFactory.provider";
-    private static final int SERVER_TIMEOUT = 5000;
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() {
-        startServer();
-    }
-
-    @Test(description = "Test for receiving an email with simple parameters", enabled = false)
-    public void testReceiveSimpleEmail() throws MessagingException, InterruptedException {
-        compileBallerinaScript();
-        sendEmail();
-        Thread.sleep(10000);
-        readEmail();
-    }
-
-    @Test(
-            description = "Test for receiving an email with simple parameters",
-            dependsOnMethods = "testReceiveSimpleEmail",
-            enabled = false
-    )
-    public void testReceiveError() throws InterruptedException {
-        compileBallerinaScript();
-        mailServer.stop();
-        Thread.sleep(10000);
-        readError();
-    }
-
-    private void readEmail() {
-        BValue[] isOnMessageInvokedReturns = BRunUtil.invoke(compiledResult, "isOnMessageInvoked");
-        assertTrue(isOnMessageInvokedReturns[0] instanceof BBoolean);
-        assertTrue(((BBoolean) isOnMessageInvokedReturns[0]).booleanValue());
-
-        BValue[] receivedMessageReturns = BRunUtil.invoke(compiledResult, "getReceivedMessage");
-        assertTrue(receivedMessageReturns[0] instanceof BString);
-        assertEquals(receivedMessageReturns[0].stringValue(), "Test E-Mail");
-
-        BValue[] isOnErrorInvokedReturns = BRunUtil.invoke(compiledResult, "isOnErrorInvoked");
-        assertTrue(isOnErrorInvokedReturns[0] instanceof BBoolean);
-        assertFalse(((BBoolean) isOnErrorInvokedReturns[0]).booleanValue());
-
-        BValue[] receivedErrorReturns = BRunUtil.invoke(compiledResult, "getReceivedError");
-        assertTrue(receivedErrorReturns[0] instanceof BString);
-        assertEquals((receivedErrorReturns[0]).stringValue(), "");
-    }
-
-    private void readError() {
-        BValue[] isOnErrorInvokedReturns = BRunUtil.invoke(compiledResult, "isOnErrorInvoked");
-        assertTrue(isOnErrorInvokedReturns[0] instanceof BBoolean);
-        assertTrue(((BBoolean) isOnErrorInvokedReturns[0]).booleanValue());
-
-        BValue[] receivedErrorReturns = BRunUtil.invoke(compiledResult, "getReceivedError");
-        assertTrue(receivedErrorReturns[0] instanceof BString);
-        assertEquals((receivedErrorReturns[0]).stringValue(), "Couldn't connect to host, port: 127.0.0.1," +
-                " 3995; timeout -1");
-    }
-
-    private void startServer() {
-        Security.setProperty(SSL_SOCKET_FACTORY_PROVIDER, DummySSLSocketFactory.class.getName());
-        ServerSetup setup = new ServerSetup(PORT_NUMBER, null, ServerSetup.PROTOCOL_POP3S);
-        setup.setServerStartupTimeout(SERVER_TIMEOUT);
-        mailServer = new GreenMail(setup);
-        mailServer.start();
-        user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-    }
-
-    private void sendEmail() throws MessagingException {
-        MimeMessage message = new MimeMessage((Session) null);
-        message.setFrom(new InternetAddress(EMAIL_FROM));
-        message.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_USER_ADDRESS));
-        message.setSubject(EMAIL_SUBJECT);
-        message.setText(EMAIL_TEXT);
-        user.deliver(message);
-    }
-
-    private void compileBallerinaScript() {
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "ListenerPopReceive.bal");
-        compiledResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopComplexEmailReceiveTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopComplexEmailReceiveTest.java
deleted file mode 100644
index 742de8e3480..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopComplexEmailReceiveTest.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.user.GreenMailUser;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetupTest;
-import org.ballerinalang.mime.util.MimeConstants;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.model.values.BValueArray;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.Assert;
-import org.testng.annotations.AfterClass;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-import javax.mail.Address;
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Multipart;
-import javax.mail.Session;
-import javax.mail.internet.AddressException;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeBodyPart;
-import javax.mail.internet.MimeMessage;
-import javax.mail.internet.MimeMultipart;
-
-import static org.testng.AssertJUnit.assertEquals;
-
-/**
- * Test class for email receive using POP3 with all the parameters.
- *
- * @since 1.2.0
- */
-public class PopComplexEmailReceiveTest {
-
-    private CompileResult compileResult;
-    private static final String HOST_NAME = "127.0.0.1";
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SENDER = "someone2@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String HEADER1_NAME = "header1_name";
-    private static final String HEADER1_VALUE = "header1_value";
-    private static final String ATTACHMENT1_TEXT = "Sample attachment text";
-    private static final String ATTACHMENT2_TEXT = "{\"bodyPart\":\"jsonPart\"}";
-    private static final String ATTACHMENT3_TEXT = "<name>Ballerina xml file part</name>";
-    private static final byte[] ATTACHMENT4_BINARY = "This is a sample source of bytes.".getBytes();
-    private static final String ATTACHMENT1_HEADER1_NAME_TEXT = "H1";
-    private static final String ATTACHMENT1_HEADER1_VALUE_TEXT = "V1";
-    private static final String[] EMAIL_TO_ADDRESSES = {"hascode1@localhost", "hascode2@localhost"};
-    private static final String[] EMAIL_CC_ADDRESSES = {"hascode3@localhost", "hascode4@localhost"};
-    private static final String[] EMAIL_BCC_ADDRESSES = {"hascode5@localhost", "hascode6@localhost"};
-    private static final String[] EMAIL_REPLY_TO_ADDRESSES = {"reply1@abc.com", "reply2@abc.com"};
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() throws MessagingException {
-
-        mailServer = new GreenMail(ServerSetupTest.POP3);
-        mailServer.start();
-        GreenMailUser user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-
-        // Create an e-mail message using javax.mail ..
-        MimeMessage message = new MimeMessage((Session) null);
-        message.setFrom(new InternetAddress(EMAIL_FROM));
-        message.setSender(new InternetAddress(EMAIL_SENDER));
-        message.addRecipients(Message.RecipientType.TO, convertToAddressArray(EMAIL_TO_ADDRESSES));
-        message.addRecipients(Message.RecipientType.CC, convertToAddressArray(EMAIL_CC_ADDRESSES));
-        message.addRecipients(Message.RecipientType.BCC, convertToAddressArray(EMAIL_BCC_ADDRESSES));
-        message.setReplyTo(convertToAddressArray(EMAIL_REPLY_TO_ADDRESSES));
-        message.setSubject(EMAIL_SUBJECT);
-
-        Multipart multipartMessage = new MimeMultipart();
-        MimeBodyPart messageBodyPart = new MimeBodyPart();
-        messageBodyPart.setContent(EMAIL_TEXT, MimeConstants.TEXT_PLAIN);
-        MimeBodyPart attachment1 = new MimeBodyPart();
-        MimeBodyPart attachment2 = new MimeBodyPart();
-        MimeBodyPart attachment3 = new MimeBodyPart();
-        MimeBodyPart attachment4 = new MimeBodyPart();
-        attachment1.setContent(ATTACHMENT1_TEXT, MimeConstants.TEXT_PLAIN);
-        attachment1.addHeader(ATTACHMENT1_HEADER1_NAME_TEXT, ATTACHMENT1_HEADER1_VALUE_TEXT);
-        attachment2.setContent(ATTACHMENT2_TEXT, MimeConstants.APPLICATION_JSON);
-        attachment3.setContent(ATTACHMENT3_TEXT, MimeConstants.APPLICATION_XML);
-        attachment4.setContent(ATTACHMENT4_BINARY, MimeConstants.OCTET_STREAM);
-        multipartMessage.addBodyPart(messageBodyPart);
-        multipartMessage.addBodyPart(attachment1);
-        multipartMessage.addBodyPart(attachment2);
-        multipartMessage.addBodyPart(attachment3);
-        multipartMessage.addBodyPart(attachment4);
-        message.setContent(multipartMessage);
-        message.addHeader(HEADER1_NAME, HEADER1_VALUE);
-
-        // Use greenmail to store the message
-        user.deliver(message);
-
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "PopComplexEmailReceive.bal");
-        compileResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-    @Test(description = "Test for receiving an email with all the parameters")
-    public void testReceiveComplexEmail() {
-        BValue[] args = {new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD)};
-        BValue[] returns = BRunUtil.invoke(compileResult, "testReceiveComplexEmail", args);
-
-        Assert.assertTrue(returns[0] instanceof BValueArray);
-        String[] result = ((BValueArray) returns[0]).getStringArray();
-        assertEquals(EMAIL_SUBJECT, result[0]);
-        assertEquals(EMAIL_TEXT.trim(), result[1].trim());
-        assertEquals(EMAIL_FROM, result[2]);
-        assertEquals(EMAIL_SENDER, result[3]);
-        assertEquals(concatAddresses(EMAIL_TO_ADDRESSES), result[4]);
-        assertEquals(concatAddresses(EMAIL_CC_ADDRESSES), result[5]);
-        assertEquals(concatAddresses(EMAIL_REPLY_TO_ADDRESSES), result[6]);
-        assertEquals(ATTACHMENT1_TEXT, result[7]);
-        assertEquals(ATTACHMENT2_TEXT, result[8]);
-        assertEquals(ATTACHMENT3_TEXT, result[9]);
-        assertEquals(new String(ATTACHMENT4_BINARY), result[10]);
-        assertEquals(ATTACHMENT1_HEADER1_VALUE_TEXT, result[11]);
-        Assert.assertTrue(result[12].startsWith(MimeConstants.TEXT_PLAIN));
-        assertEquals(HEADER1_VALUE, result[13]);
-    }
-
-    private String concatAddresses(String[] addresses) {
-        StringBuilder stringBuilder = new StringBuilder();
-        for (String address : addresses) {
-            stringBuilder.append(address);
-        }
-        return stringBuilder.toString();
-    }
-
-    @AfterClass
-    public void terminate() {
-        mailServer.stop();
-    }
-
-    private Address[] convertToAddressArray(String[] stringAddresses) throws AddressException {
-        if (stringAddresses != null && stringAddresses.length > 0) {
-            Address[] addresses = new Address[stringAddresses.length];
-            for (int i = 0; i < stringAddresses.length; i++) {
-                addresses[i] = new InternetAddress(stringAddresses[i]);
-            }
-            return addresses;
-
-        } else {
-            return null;
-        }
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopSimpleSecureEmailReceiveTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopSimpleSecureEmailReceiveTest.java
deleted file mode 100644
index 4b760f4aabd..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/PopSimpleSecureEmailReceiveTest.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.user.GreenMailUser;
-import com.icegreen.greenmail.util.DummySSLSocketFactory;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetup;
-import org.ballerinalang.model.values.BError;
-import org.ballerinalang.model.values.BMap;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.stdlib.email.util.EmailConstants;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.annotations.AfterClass;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.security.Security;
-
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Session;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeMessage;
-
-import static org.testng.AssertJUnit.assertEquals;
-import static org.testng.AssertJUnit.assertNotNull;
-import static org.testng.AssertJUnit.assertNull;
-import static org.testng.AssertJUnit.fail;
-
-/**
- * Test class for email receive using POP3S with least number of parameters.
- *
- * @since 1.2.0
- */
-public class PopSimpleSecureEmailReceiveTest {
-
-    private GreenMailUser user;
-    private CompileResult compiledResult;
-    private static final String HOST_NAME = "127.0.0.1";
-    private static final int PORT_NUMBER = 3995;
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String SSL_SOCKET_FACTORY_PROVIDER = "ssl.SocketFactory.provider";
-    private static final int SERVER_TIMEOUT = 5000;
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() {
-        startServer();
-        compileBallerinaScript();
-    }
-
-    @Test(description = "Test for receiving zero emails with simple parameters")
-    public void testReceiveZeroEmails() {
-        readZeroEmails();
-    }
-
-    @Test(
-            description = "Test for receiving an email with simple parameters",
-            dependsOnMethods = "testReceiveZeroEmails"
-    )
-    public void testReceiveSimpleEmail() throws MessagingException {
-        sendEmail();
-        readEmails();
-    }
-
-    @Test(
-            description = "Test for receiving an email with simple parameters",
-            dependsOnMethods = "testReceiveZeroEmails"
-    )
-    public void testReceiveErrorWhileReadingEmail() throws MessagingException {
-        sendEmail();
-        readEmails();
-    }
-
-    @AfterClass
-    public void terminate() {
-        mailServer.stop();
-    }
-
-    private void readEmails() {
-        BValue[] args = {new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD)};
-        BValue[] returns = BRunUtil.invoke(compiledResult, "testReceiveSimpleEmail", args);
-        assertNotNull("No response received with simple POP configuration.", returns);
-        if (returns[0] instanceof BError) {
-            fail("Error occurred while reading from POP server.");
-        } else if (returns[0] == null) {
-            fail("POP Client could read zero emails.");
-        } else {
-            BMap<String, BValue> email = (BMap<String, BValue>) returns[0];
-            String subject = email.get(EmailConstants.MESSAGE_SUBJECT.getValue()).stringValue();
-            assertEquals(EMAIL_SUBJECT, subject);
-        }
-    }
-
-    private void readZeroEmails() {
-        BValue[] args = {new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD)};
-        BValue[] returns = BRunUtil.invoke(compiledResult, "testReceiveSimpleEmail", args);
-        assertNotNull("No response received with simple POP configuration.", returns);
-        if (returns[0] instanceof BError) {
-            fail("Error occurred while reading from POP server.");
-        } else {
-            assertNull("Returned non-null result for zero emails.", returns[0]);
-        }
-    }
-
-    private void startServer() {
-        Security.setProperty(SSL_SOCKET_FACTORY_PROVIDER, DummySSLSocketFactory.class.getName());
-        ServerSetup setup = new ServerSetup(PORT_NUMBER, null, ServerSetup.PROTOCOL_POP3S);
-        setup.setServerStartupTimeout(SERVER_TIMEOUT);
-        mailServer = new GreenMail(setup);
-        mailServer.start();
-        user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-    }
-
-    private void sendEmail() throws MessagingException {
-        MimeMessage message = new MimeMessage((Session) null);
-        message.setFrom(new InternetAddress(EMAIL_FROM));
-        message.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_USER_ADDRESS));
-        message.setSubject(EMAIL_SUBJECT);
-        message.setText(EMAIL_TEXT);
-        user.deliver(message);
-    }
-
-    private void compileBallerinaScript() {
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "PopSimpleSecureEmailReceive.bal");
-        compiledResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpComplexEmailSendTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpComplexEmailSendTest.java
deleted file mode 100644
index 90946915323..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpComplexEmailSendTest.java
+++ /dev/null
@@ -1,261 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetupTest;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.model.values.BValueArray;
-import org.ballerinalang.stdlib.email.util.CommonUtil;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.annotations.AfterClass;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.io.ByteArrayOutputStream;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.Arrays;
-
-import javax.mail.Address;
-import javax.mail.Message;
-import javax.mail.MessagingException;
-import javax.mail.Multipart;
-import javax.mail.internet.MimeBodyPart;
-import javax.mail.internet.MimeMessage;
-import javax.mail.util.SharedByteArrayInputStream;
-
-import static org.testng.Assert.assertNull;
-import static org.testng.AssertJUnit.assertEquals;
-import static org.testng.AssertJUnit.assertNotNull;
-import static org.testng.AssertJUnit.assertTrue;
-import static org.testng.AssertJUnit.fail;
-
-/**
- * Test class for email send using SMTP with all the parameters.
- *
- * @since 1.2.0
- */
-public class SmtpComplexEmailSendTest {
-
-    private CompileResult compileResult;
-
-    private static final String HOST_NAME = "127.0.0.1";
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String USER_NAME_2 = "hascode2";
-    private static final String USER_NAME_3 = "hascode3";
-    private static final String USER_NAME_4 = "hascode4";
-    private static final String USER_NAME_5 = "hascode5";
-    private static final String USER_NAME_6 = "hascode6";
-    private static final String EMAIL_USER_ADDRESS_1 = "hascode1@localhost";
-    private static final String EMAIL_USER_ADDRESS_2 = "hascode2@localhost";
-    private static final String EMAIL_USER_ADDRESS_3 = "hascode3@localhost";
-    private static final String EMAIL_USER_ADDRESS_4 = "hascode4@localhost";
-    private static final String EMAIL_USER_ADDRESS_5 = "hascode5@localhost";
-    private static final String EMAIL_USER_ADDRESS_6 = "hascode6@localhost";
-    private static final String EMAIL_FROM = "someone1@localhost.com";
-    private static final String EMAIL_SENDER = "someone2@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String EMAIL_CONTENT_TYPE = "text/html";
-    private static final String HEADER1_NAME = "header1_name";
-    private static final String HEADER1_VALUE = "header1_value";
-    private static final String[] EMAIL_TO_ADDRESSES = {"hascode1@localhost", "hascode2@localhost"};
-    private static final String[] EMAIL_CC_ADDRESSES = {"hascode3@localhost", "hascode4@localhost"};
-    private static final String[] EMAIL_BCC_ADDRESSES = {"hascode5@localhost", "hascode6@localhost"};
-    private static final String[] EMAIL_REPLY_TO_ADDRESSES = {"reply1@abc.com", "reply2@abc.com"};
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() {
-        mailServer = new GreenMail(ServerSetupTest.SMTP);
-        mailServer.start();
-        mailServer.setUser(EMAIL_USER_ADDRESS_1, USER_NAME, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS_2, USER_NAME_2, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS_3, USER_NAME_3, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS_4, USER_NAME_4, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS_5, USER_NAME_5, USER_PASSWORD);
-        mailServer.setUser(EMAIL_USER_ADDRESS_6, USER_NAME_6, USER_PASSWORD);
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src", "SmtpComplexEmailSend.bal");
-        compileResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-    @Test(description = "Test for sending an email with all the parameters")
-    public void testSendComplexEmail() throws MessagingException, IOException {
-        BValue[] args = { new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD),
-                new BString(EMAIL_SUBJECT), new BString(EMAIL_TEXT), new BString(EMAIL_CONTENT_TYPE),
-                new BString(EMAIL_FROM), new BString(EMAIL_SENDER), new BValueArray(EMAIL_TO_ADDRESSES),
-                new BValueArray(EMAIL_CC_ADDRESSES), new BValueArray(EMAIL_BCC_ADDRESSES),
-                new BValueArray(EMAIL_REPLY_TO_ADDRESSES)};
-        BValue[] returns = BRunUtil.invoke(compileResult, "testSendComplexEmail", args);
-        assertNull(returns[0], "Error while sending email in complex use case.");
-        // Fetch messages from the server
-        MimeMessage[] messages = mailServer.getReceivedMessages();
-        assertNotNull(messages);
-        assertEquals(6, messages.length);
-        for (MimeMessage message : messages) {
-            assertEquals(EMAIL_SUBJECT, message.getSubject());
-
-            assertTrue(message.isMimeType("multipart/*"));
-            Multipart multiPart = (Multipart) message.getContent();
-            int multiPartCount = multiPart.getCount();
-            assertEquals(7, multiPartCount);
-
-            testMessageBody((MimeBodyPart) multiPart.getBodyPart(0));
-            testAttachment1((MimeBodyPart) multiPart.getBodyPart(1));
-            testAttachment2((MimeBodyPart) multiPart.getBodyPart(2));
-            testAttachment3((MimeBodyPart) multiPart.getBodyPart(3));
-            testAttachment4((MimeBodyPart) multiPart.getBodyPart(4));
-            testAttachment5((MimeBodyPart) multiPart.getBodyPart(5));
-            testAttachment6((MimeBodyPart) multiPart.getBodyPart(6));
-
-            assertEquals(HEADER1_VALUE, message.getHeader(HEADER1_NAME)[0]);
-            assertEquals(EMAIL_FROM, message.getFrom()[0].toString());
-            assertEquals(EMAIL_SENDER, message.getSender().toString());
-            assertTrue(containAddresses(message.getRecipients(Message.RecipientType.TO), EMAIL_TO_ADDRESSES));
-            assertTrue(containAddresses(message.getRecipients(Message.RecipientType.CC), EMAIL_CC_ADDRESSES));
-            assertTrue(containAddresses(message.getReplyTo(), EMAIL_REPLY_TO_ADDRESSES));
-        }
-    }
-
-    private static void testMessageBody(MimeBodyPart bodyPart) throws IOException, MessagingException {
-        assertEquals(EMAIL_TEXT, ((String) bodyPart.getContent()));
-        assertTrue(bodyPart.getContentType().startsWith(EMAIL_CONTENT_TYPE));
-    }
-
-    private static void testAttachment1(MimeBodyPart bodyPart) throws IOException, MessagingException {
-        InputStream input = bodyPart.getInputStream();
-        assertEquals("Ballerina text body part", convertInputStreamToString(input));
-    }
-
-    private static void testAttachment2(MimeBodyPart bodyPart) throws IOException, MessagingException {
-        InputStream input = bodyPart.getInputStream();
-        assertEquals("{\"bodyPart\":\"jsonPart\"}", convertInputStreamToString(input));
-    }
-
-    private static void testAttachment3(MimeBodyPart bodyPart) throws IOException, MessagingException {
-        InputStream input = bodyPart.getInputStream();
-        assertEquals("<name>Ballerina xml file part</name>", convertInputStreamToString(input));
-        assertTrue(bodyPart.getContentType().startsWith("text/xml"));
-    }
-
-    private static void testAttachment4(MimeBodyPart bodyPart) throws MessagingException, IOException {
-        assertEquals("test.tmp", bodyPart.getFileName());
-        assertEquals("attachment", bodyPart.getDisposition());
-        assertEquals("bodyPart4", bodyPart.getContentID());
-        assertEquals("application/octet-stream", bodyPart.getContentType());
-        assertEquals("7bit", bodyPart.getEncoding());
-        assertEquals("7bit", bodyPart.getHeader("Content-Transfer-Encoding")[0]);
-        assertEquals("attachment;name=\"test\";filename=\"test.tmp\"",
-                bodyPart.getHeader("content-disposition")[0]);
-        assertEquals("application/octet-stream", bodyPart.getHeader("content-type")[0]);
-        assertEquals("V1", bodyPart.getHeader("H1")[0]);
-        assertEquals("This is a test attachment file.",
-                convertInputStreamToString((InputStream) bodyPart.getContent()));
-    }
-
-    private static void testAttachment5(MimeBodyPart bodyPart) throws MessagingException, IOException {
-        assertEquals("corona_virus.jpg", bodyPart.getFileName());
-        assertEquals("inline", bodyPart.getDisposition());
-        assertEquals("image/jpeg", bodyPart.getContentType());
-        assertEquals("base64", bodyPart.getEncoding());
-        compareInputStreams(new FileInputStream("src/test/resources/datafiles/corona_virus.jpg"),
-                (InputStream) bodyPart.getContent());
-    }
-
-    private static void testAttachment6(MimeBodyPart bodyPart) throws IOException, MessagingException {
-        assertEquals("application/octet-stream", bodyPart.getContentType());
-        assertEquals("Test content".getBytes(),
-                CommonUtil.convertInputStreamToByteArray((SharedByteArrayInputStream) bodyPart.getContent()));
-    }
-
-    public static void compareInputStreams(InputStream input1, InputStream input2) throws IOException {
-        try {
-            byte[] buffer1 = new byte[1024];
-            byte[] buffer2 = new byte[1024];
-            try {
-                int numRead1;
-                int numRead2;
-                while (true) {
-                    numRead1 = input1.read(buffer1);
-                    numRead2 = input2.read(buffer2);
-                    if (numRead1 > -1) {
-                        if (numRead2 != numRead1 || !Arrays.equals(buffer1, buffer2)) {
-                            fail();
-                            break;
-                        }
-                    } else {
-                        if (numRead2 < 0) {
-                            assertTrue(true);
-                        } else {
-                            fail();
-                        }
-                        break;
-                    }
-                }
-            } finally {
-                input1.close();
-            }
-        } catch (IOException | RuntimeException e) {
-            fail();
-        } finally {
-            try {
-                input2.close();
-            } catch (IOException e) {
-                fail();
-            }
-        }
-    }
-
-    private static String convertInputStreamToString(InputStream inputStream)
-            throws IOException {
-        ByteArrayOutputStream result = new ByteArrayOutputStream();
-        byte[] buffer = new byte[1024];
-        int length;
-        while ((length = inputStream.read(buffer)) != -1) {
-            result.write(buffer, 0, length);
-        }
-        return result.toString(StandardCharsets.UTF_8.name());
-    }
-
-    private boolean containAddresses(Address[] receivedList, String[] realList) {
-        if (receivedList != null && receivedList.length == 2) {
-            String[] stringReceivedList = {receivedList[0].toString(), receivedList[1].toString()};
-            Arrays.sort(stringReceivedList);
-            Arrays.sort(realList);
-            return Arrays.equals(stringReceivedList, realList);
-        } else {
-            return false;
-        }
-    }
-
-    @AfterClass
-    public void terminate() {
-        mailServer.stop();
-    }
-
-}
diff --git a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpSimpleSecureEmailSendTest.java b/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpSimpleSecureEmailSendTest.java
deleted file mode 100644
index 9d7c28db4b5..00000000000
--- a/stdlib/email/src/test/java/org/ballerinalang/stdlib/email/SmtpSimpleSecureEmailSendTest.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
- *
- * WSO2 Inc. licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.ballerinalang.stdlib.email;
-
-import com.icegreen.greenmail.util.DummySSLSocketFactory;
-import com.icegreen.greenmail.util.GreenMail;
-import com.icegreen.greenmail.util.ServerSetup;
-import org.ballerinalang.model.values.BError;
-import org.ballerinalang.model.values.BString;
-import org.ballerinalang.model.values.BValue;
-import org.ballerinalang.test.util.BCompileUtil;
-import org.ballerinalang.test.util.BRunUtil;
-import org.ballerinalang.test.util.CompileResult;
-import org.testng.Assert;
-import org.testng.annotations.AfterClass;
-import org.testng.annotations.BeforeClass;
-import org.testng.annotations.Test;
-
-import java.io.IOException;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.security.Security;
-
-import javax.mail.MessagingException;
-import javax.mail.internet.MimeMessage;
-
-import static org.testng.Assert.assertNull;
-import static org.testng.AssertJUnit.assertEquals;
-import static org.testng.AssertJUnit.assertNotNull;
-import static org.testng.AssertJUnit.assertTrue;
-
-/**
- * Test class for email send using SMTP with least number of parameters with SSL.
- *
- * @since 1.2.0
- */
-public class SmtpSimpleSecureEmailSendTest {
-
-    private CompileResult compileResult;
-
-    private static final String HOST_NAME = "127.0.0.1";
-    private static final int PORT_NUMBER = 3465;
-    private static final String USER_PASSWORD = "abcdef123";
-    private static final String USER_NAME = "hascode";
-    private static final String EMAIL_USER_ADDRESS = "hascode@localhost";
-    private static final String EMAIL_FROM = "someone@localhost.com";
-    private static final String EMAIL_SUBJECT = "Test E-Mail";
-    private static final String EMAIL_TEXT = "This is a test e-mail.";
-    private static final String SSL_SOCKET_FACTORY_PROVIDER = "ssl.SocketFactory.provider";
-    private static final int SERVER_TIMEOUT = 5000;
-    private GreenMail mailServer;
-
-    @BeforeClass
-    public void setup() {
-        Security.setProperty(SSL_SOCKET_FACTORY_PROVIDER, DummySSLSocketFactory.class.getName());
-        ServerSetup setup = new ServerSetup(PORT_NUMBER, null, ServerSetup.PROTOCOL_SMTPS);
-        setup.setServerStartupTimeout(SERVER_TIMEOUT);
-        mailServer = new GreenMail(setup);
-        mailServer.start();
-        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);
-        Path sourceFilePath = Paths.get("src", "test", "resources", "test-src",
-                "SmtpSimpleSecureEmailSend.bal");
-        compileResult = BCompileUtil.compileOffline(true, sourceFilePath.toAbsolutePath().toString());
-    }
-
-    @Test(description = "Test for sending an email with simple parameters")
-    public void testSendSimpleEmail() throws MessagingException, IOException {
-        BValue[] args = { new BString(HOST_NAME), new BString(USER_NAME), new BString(USER_PASSWORD),
-                new BString(EMAIL_USER_ADDRESS), new BString(EMAIL_SUBJECT), new BString(EMAIL_TEXT),
-                new BString(EMAIL_FROM)};
-        BValue[] returns = BRunUtil.invoke(compileResult, "testSendSimpleEmail", args);
-        assertNull(returns[0], "Error while sending email in simple use case.");
-        // fetch messages from server
-        MimeMessage[] messages = mailServer.getReceivedMessages();
-        assertNotNull(messages);
-        assertEquals(1, messages.length);
-        MimeMessage message = messages[0];
-        assertEquals(EMAIL_SUBJECT, message.getSubject());
-        assertTrue(String.valueOf(message.getContent()).contains(EMAIL_TEXT));
-        assertEquals(EMAIL_FROM, message.getFrom()[0].toString());
-    }
-
-    @Test(description = "Test for sending an email with wrong password")
-    public void testSendEmailWithWrongPassword() throws MessagingException, IOException {
-        BValue[] args = { new BString(HOST_NAME), new BString(USER_NAME), new BString("wrongPassword"),
-                new BString(EMAIL_USER_ADDRESS), new BString(EMAIL_SUBJECT), new BString(EMAIL_TEXT),
-                new BString(EMAIL_FROM)};
-        BValue[] returns = BRunUtil.invoke(compileResult, "testSendSimpleEmail", args);
-        assertNotNull("No error returned when wrong password is used for sending an email.", returns[0]);
-        BError error = (BError) returns[0];
-        Assert.assertTrue(error.getMessage().contains("Authentication credentials invalid"));
-    }
-
-    @AfterClass
-    public void terminate() {
-        mailServer.stop();
-    }
-
-}
diff --git a/stdlib/email/src/test/resources/datafiles/corona_virus.jpg b/stdlib/email/src/test/resources/datafiles/corona_virus.jpg
deleted file mode 100644
index ff59a3af87376b0a868c5222022579efe9346040..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 127854
zcmb5Vby!qU_XawYgwiG5!VD!T-7yRjGYlODpoAcug3>UA)Bw^94Bav`C?Fspol;6j
zhlGG&+=Jiu`=0yU|L#1_aX7KgKJR+hyY}8^?Z0z>7eMMDLIQ&8e}n{tM1+JyH^_)@
z03UKvG7>UMaw;lHa!Lwn+S_#0G>kM9l=Q6hj7&@{EG$%XY#eON9JiTSn6HiC5fTyI
zAi8mjnD`bmH6=Ck|L@P=_aJH#d=)|v0UkF9pBj&V8t?B15E}@Dk57PyhX?xK2M?c^
z=mrTP0V#0UoC<_TKtO;`NN|II5NI@T5k3JSh=}?I4HvN(Ew?J1?vXnQJ&(9r2m>NX
z;&DM8Bd<qj*SNZA`qavIQlsP)^wDiTNfTSov`OPI48I1_D>AjPy9Y4M3f%MmduJki
z!W#s{B*0N+>gyZh6A%#-;1dyEHxM|Rnt+gtNQ_1mPRsqsJ>-UXQbAqUce?Qvo+ElS
z#A6R)-ee4eM5t|j_uqNYErNd+P=k~~n~xCqiDhIbmZYe}A_!8WS4>k(GufL9ii}X>
zzi$Xeg=@l4kE28MflZtdCWB4`Pah=^jfpeDk47sPVX)MibV!T<2E~mu!bGPD^vXSe
zUH^=wD+Ts}nY~J5;F@$AWyp94H!@yMpg=23lRi0u89agEbu_|iKqrbF;dBnbMipM<
zIDrW-mx5?v>GU8;rBj%A9)x7aR)H4A2^mi(kg4?ss{t>~MDu9CCChTBO8;}fu0Uf-
z4>}>K$s7+W)PNT`X<;1lOEZmm;F5-g@c&rTm;y|pq?nUR$LSn_ZKe?N`VPP!?5D$k
zIVoBrDdtq*KSYs}379z^I^}?pjE5y*1g3ynQ)^6=F~`#Z?UgJo(3mLEglaNt<?tY4
z5RzLMfr%1WG#cUsr*kwaa)^QJqp2atVF))wa+{eOY=kw8fvaK)Xe7&xX*EnfmXWCy
z2^yQ-fvBOOWI`!)z4TlfD)bPwA|e271U)2N1vmo$8Cgn4#_d-EAO}Z*$Ei_Xa1Bkm
ze_up21_goB!8NIYFC8};fE0q<>ZOJVVE#3O27?knNdhg+$HLxV%>|$nWk`o;DP{mQ
zSRtZx{9j8nNtuB*3IK>_0w>4IY1M1QYhmG-2xhG!r#mQ`(y20L?ihMngk(Im7I4*6
zDfA!4h8QO)NKBa~Ep#egV;t}jS}Xb=#<BFYa48<>6egy0s$5E-5MIWt6^(IZeu8Fz
z0I(N1pzdItw9x;IWv2c!CIz9pHiik0=ea+Dx%O`UIGxiSpcU7|&_ro>Xcajk!{NZQ
zl*6w*fYf9Lo)P09381TmmViYkVGZa?W0;M3{y89?8UoHlYLo$xM`QI-;Q-ip0E?X}
z2z#LjdM?f6#~E}HP$aiECz#BeB%?%AOhZ2di@<RI+gzjkkJ$eqH-<aTsFyyOJBfX2
z3&V#pD}!smF>kP%ME?aHsZk2J9fbt^KYs0TV@Nz5cOe468<td}Nv-wY4RoC5ny<rj
zeDE@)-aiJFs|id<@xZVE553~)=xJd^P5@8;;YkB{=|89?l^J3jkw7Q_XFcusKZ0_{
zYXE)`xTdKTE#N|c?+9ujIJA-gk6gnK;0N$MmY(4M?Vju3fM2lpC(8cahewm_&VPsy
z4`5gbodkRgx#oJW78(d3D8Ofc4cDGc!UB&bgaBF&JRlDobNzrCFo1CYzyAF|Y9LB9
z)da=?g3~vGQU9o2f}nd<Mh4a|0+T&1po<WL6+x)!xu8avJK!+^48MM2iH4>e05(8p
z;M+@0x9tP$p@U!ZS|A#`tB*?66apeC9}DbM`zI`A;~FrOz%?x-OQW$UuXtD}`UZ*|
z7QswT_aE(`bI2e67y4*Afe9e+1Yj5^V_HPaHOv3QwredYLr4O!0!9EOxE2urM<Ag8
zsS7OPzx<8A4uEJtA+9-l0}aDC)WJ&u_4v=(6})iZ(rf1P{LclNWY_9J3uscgRw2*`
z$4sqyLqJ~8S}4GK*JgnG{ENHm!;<mP2_Vdn!#tX#NT7}8+z`NJ(P%B~f4BmuWZ8ry
zz~XDB|5FyU5S-@P5&zg7e<KIdOWz1Frh*ukS0c+$#t`s*WCY}KoyHC_LXP`!4xk%o
zIwLxbEkJ&~wv8~{0CL<pkjK$E|A+Da^rH-rTY$!>YhTdhPhP7RAULJhT3$9$Mg}Me
z1jz@82+(Q(v=|PHYh8;6A^-)1>^0tw6H)>|%i&T2NkxIcDFs?d#f|_$|BJ-6636^w
zX$(>ih<R8q4-f``6eN`~$6QA|Kz%?--xN9gN5TPI03KE*{a4QkVE?B`|L3-A4FNPc
z6Tq+xxDfCZ_VIO`Tw5su(g^T35Ced3O2^f%72=-*=*r<*C_4mjf!MXqjQ<mxf9VIf
z@S4EXS^%YE5GBwf4b6XU00P|%)7UHaPd%tI%C6M|49FTJ{Js&uXhRgTm+L;9wis-L
z;Rm3jEdkj5|AyI|8=!6YKTZQe#Ek?{1$^>fG6TYWE!9c+<JbDJ%{=fp%>h6hXaf?6
zx+iFA9su$G(`QLQK(ECF5LO_0{wFW)!!e=PdI7{SK&)$Jz1G5i?AE+i6DdJ@<`_VJ
zfh77*SOMIxF}vP{`j6s9T+26*53gn5Uy=pXgzVZWK$4x(yFaBztuX~H15)61fW*TD
zG68i1f(?N9T73S6&VM|N1>y(r=C#iODY|y!L>Zzo3DA)w3?FpzzZ!9^l!cnW<CP)H
z;QvccF@}!g0Lq$Bq$bp)ybiz^{vVjRu^Rt_8S=P*7K0+9z7Bstr}h6w;+Tybt>hUN
zRrm;T?SOJq6%0IX%2%@2UnN2{m*n1TR{30E&aFFbZ3ODbYcJp90M=1jh~cmioWur?
z`1X18RC`m9c<L<7TOKO9WYQmfQ$`ozMbS|5X<&KrUU_&(&@KCmnoN|gf>_E$*LW^+
zZwGb!?7NrnXZl>09lcB?n(1+cjV~51W(|@q{zY$T9T_3^cA<yhSKwy$MvHF6cOmK6
zN$KCpSU7e$dS~9RzUij;0w=>vV!i*@V@l5Kvl`z8q^<62z7`{c8l8l|sJ3@~N;~bC
zCOz^AYx5~7z6D;w54hCQtg82ArHgitc=1apRBx*pxI(K!znuk4!$pq1s<k>^rBDik
zJuD@pZ-3qNNbCNNb0Lt?_e@&Ic8-+&jBgU_hzz!vFox|Fo14t$sL=(H)jiMv3qmcO
z$aMBpKPq?l<QcGpOisk#E6E?QZ~qIb9CA;M;%k0s8B36?BV%9}hc{nX5x`g^_4Xd)
zG})Kpnu+@2jfJsV!%a+%3xr&hznOG^X`S8K{tS1Uw`!*~$cdBDb8w>yJRam;iBZdQ
zdP~w66aK7uIB`KQ{N=8+s|Z-ZJ^W<5U#fNI<y*z&1y^y&_|E|-XYkM%N5uC8`2#bP
zV>HKsKxh!Dg7Ivjm#rcM*W2_dN94~*_=Z>IjjmI5mrykoebA!L`>I&@qQ!-Y)z!}-
zA+Ky17JCuS6809(!X5HJ>FFZ>KOX4%p&K$JDGGl<A%ckwqw2VWvRiV)(VxGzWAb9#
z+A{|9Nr}Jz^g1Saul;M=o3T(XtN1R)ptHp_&n5Z$>mx%}Px4k(u-e2bqM(@|R9vQ?
zm}yIQ_@{4>@*U~4DXPNz4u7arA$x%bhodj@0>*^r-x`0}PiIj!EMO_l%N~g5tNnWX
zGekF9DOT;3p=ooC!S`d!Fm$UV+3QC_zJUe(pFM{m_%Ly_U_deq_AZN<=`V;3Qs(gy
z$b*0y0kRCsfefet>OrkB4(Rg#!~sab60lf$TGf9!@1F+q=qHtF00I?r_<zcAorbQn
z3jA7UuT>G~8JwF7-E%SUcA74B@f5vxFButK$Glvhw4^-_W@3VKddQZ+hi&6EX4K(x
z2lHyX=lT^mz4|365j7tU*N-Pd1hSJM{YsZI%C>Vd@zPGuDClj>eDZJCiAgq9Ba`Vq
zWPg@&k&<C;+Q1L!qKd*vA}_v=xpda@qXN$*txB8xQ*~3X!TGENjI_U7Fqhb(&w@;=
zg~i*q0d(P|M7CjJVXxec$ICe5r(~-iMUlXz=o1r>7#d;^eNb8ER?XX&nwIaRbAl@7
zLVu&tGO-GzuVi9G@>8qTqxTF$>8MhErjaV}KCzfs!?V}VDsLBSpVpqVN!tmo*2!3o
zeoehKrWP#XRi>Kpsmy#nw3ZI}HtZWzhBf<^iE=6PO}JO<Ml|yVsEIM9RkBEqEtZd`
z#bu?7XPTdky|AwOsA<RCROe7+B+c>_;^wnnd*KqduVt1hMA~eBR02$bZ_dgVOnt%h
z-=|rno75+4yNEFq@N^`^Cn042Sv70k62=d?EJj`4Ka_C~eiUqnel$w{$fc!0)HYfG
zuCrH3ML}7x=OA^-H<d&CXjhUYsKWS{T22fXEZ!shk{SZ3i{J$77z&txz=k}W>?Aju
z<!u}<0t_s^RGMUkr9(}&HPeb(!?8Wz2n!x5S#QI^CNhIT^5hn&IR?wdjMCmN_51IX
z?W>sq9rv%|1B4tuZOx@IqII`|ym7%n&|*d(ACWY``yI4Cv%*uvrj2TbCQbe}j2M=Q
zQ`$o`<@(8t^t>|2drpVuq^+MAhAevL>HHWq;Ofn)YWOgu!K6#x#HTNL@~9`9%gF^s
zV&1i4HX>6chb7@5(#B~_jRwSEKKvVzVSsK{S>|=_zwS@|OE%8DKz9Kd&j7hj?$^og
zx}y)Ag^&cY*}uU6kfzN_|I_~`S3r~jf#6jR2YTGs9aLaobls7L)9KM|!-1g<vJ?m%
zO*KBCUu0IQ`3#j<N|sn<{ICe3hJmP|)Vv|_P&mvMC#RMJ<P;)$609bdeso3&obHd;
ze|t=1-U28=G3;s1xurGvTOEt#)=z2*+UoWK>H;J8npdM?H-bi$Ud;@6Z&kO}b-xim
zd>TuiQEC((w9V%14PH+hL({b5WxEAM`jwIMKdg6V{R{GfjqM6!IbJiGI+igK9!3r?
zv%D^08YKA0kNSX5heynL41roKSg<;*^v$62uLM|MAJLQHg_3Q%xSvJ7+loD0N){S;
z&`USq;o)XT)v3bYspj5mzsL6cwf|$yu3c1yP$8)!+F$1|ugWCAxxhD}@rG2;<<4;K
z)MXmCmiH{HRce7ImnH2_1PMazH6NIe(&F;R>k?D;Y{!hc{4P{1OTTTCvnK^;;E$;)
zlaB0)cGzLAV4-uFOiJ{6XAE?1+TUSiWW434_L4(pP1R-Sc;%Ci4JF@M3@<{OqDa?S
zDe$@u&3`M;`u-R)<=Yun#6NLq_yBR`-71(lFQv-;mEeEQdNotVzVHa?b4MeCk;!4u
zl-I=^d|ctCaDJoxs`4I*gJZ?}x`o?`xFK(HG^x`(NSk%-ow8ggYtSmmR%4Dzn<!_)
zaY$3h_RnF9nY;%3bORj?P0L?5o!+>NMGqeL!wrP_n-T-?w$*>@Po%e%9O<VVximHJ
z7^;~ZA$?~WQbSdL6_?K`O1s`iws_57q$;TC9PcZqQa-z78oGknvvAkH-Q@8gHI$Z>
z8rSZba<Ya>v|2vGr;~nT+on%Vot@L}Pe0k1TO&b4lh=A-<O<hy)CI4xOjNeKE}d6w
zkvcN9aiLu$GDxU!vzLMVD&(1D>-Aj9$?{(Q$!#fszs|{9E#Ir-V!%&4w5LB!m(<T|
z+7fSD@+>7M!26BoI(Fg(J%2Bs`Qg4zyeF&75jw?je#)U56jqmO)vhR4v8oNXRW1~<
zh+JRI?+>3%K)3z0auCAnI?yrfpQ$)&eZ%bCxh6ibkTNSLYyV8STaAQ=M=^Rt)ATa7
zy#9w&<D)mAzECU2hF%w0lc`eCrgy1`^m5kDt+omak-=lvp>+CB&G-b+XQjzHr<|#4
zS6?8x;}|~^7jMX;-WJ09czFh&9pe|Iq#{>i7?2<HSicHaUCg;}54&WVoL3eNwG_{M
zxJsFstG=JeBW?XX`EGK3(g4gi)Q#NHRIu-D9J*lUrhpqIy)gNpPQR-Xu5nw~+-rMx
zFp1eV*_C8I>MSSv==E;~ZNbmEK@z7`=3V5x!jBI)&)_1i6j!9IEf-aNJ!96Eo;Zyb
z1E2BYDuaIA;dkB{>RFWEh6G?~q_-8;!bSv1t6M!i#vqaFZ4vc9Trw~VwENX%Pzt={
z`H6hGh_5sfi7GM*)RxnQ`!qQ=Pt0*at>W{95w7~v?tR|_H#$varHLHkHI_2fk1c%2
zvONTQz^bZ5P04`~eD(_G>#r@Qf71qvf8Bc>x~U&I?z$OeXOO1!$Y{7>FDmmf4<#)5
zxaV1Ik9|Lz`Ce*~ht64b!o**YJ#jh>Yn8We##Fjn)Ba5Oy$ezvuA4#rgHhE}Up?>?
zcdfP;eF7f2;GFNwvTp`7hd1UIH*tSq`*6^$xM%`GbP%Toq>L-~>e&e2S#e5C5q#qI
zrQnRa7W-tCAZOTde8SmH8mk(1d}38KlaN%1t?tQt)~xI{Im!B6K_>?G0QHBI#2iYB
zK;nT72~ta`vuQ0f;_s|5XjFK~rabOr3c5J5@@|Z3O-)pL>1n<4bXtGO{CTgVSV=$F
z@;OwM=#!h9wms#`oM*O1S{IR%Qo7Nr3Imq<F6^5jU4?s#Y!RELx`FK4$M585H=ziH
z0UpkT4@l=K%yw?FwUqUIukV;4_cCF>!qbVhGFa-n4>z?K$PDvqwLpD-^lCpmOAvD2
z<r{CAiMl%Oo<vIzOb|!UH*wO;qGTYjCSKR>Xwb<rt{fi3c@rJfn-gdzMF<<)24+tD
zswA%ms_}Hbz*q{H+rWhW+lI$Oz|7phhzVA7J&2VONXK6Hfq>mlfT@8@VAf6pm>T#u
zr3Xwo()4;$eqP%2Vvk{*ON$uFD*NL5;Z4W|Ji}a#dQ@JbLz`{jC)u~<>G35oqsx+#
zOxVb$&$oUrKNUX@Js4xw{T7H+d}YS7?i?^&6=dd?E!aU5FL&;42nA(dill^<318+=
zr;C+(q>z5-d><hHoWY8as)(MTP9<*r;Y>-u4xzP_mtow<dTV`?IrKfLY<GW?tM*9y
zfpC@VqX4!Jq0n~F_XE$vlgj(#q7=^M-ess}FzKy!+;_FBGG30e2&=|;>11e^HI_x*
z$$r%BAooG*2XFgbQxh-T$WpPne?ZF0La;cqp)$>yD=#)V*}X*_Ow7Z?R34!G`9T>?
zRj~!j<W@4?aLZ69FA?RK{^%{i-@jh$Y_%^4&$G?eBxUP9*HZajSit#B<GjD@F9_|N
z;GKL#^pc()P4a9-<RU-0Ud5DWEN<=6q{CTjn(KWZ18yW#^kW(HE6Ko*&5f24__prZ
z>+EQ`#$oXxF$Y1H7O*}mREAGb2W&_j7V5r>>X73qEt1clc8)B`3+6fOTWE_!tj5Ol
z*UFC`W=>v?ms`vxR?dg=J`Yp(EYe6GgU?$VIk?HB<_$ITZZ3vcxQ0$2Y+b$GJ$fPF
zdt>1-?De<jPTk2Xe?d<ngjWJHXd2<_huOhDt$ydbCY7HVQ~H8Z8dW4F@HQtgyRp0#
z@i~1=$;Gy<dv;}dQr%S0j~ovI!kPppHl_Ej5>8erNgLS8v}Aw(!L7Jn*+(d*e!)Hw
zbd={!3YQ^EP+0zIdsd@+V=1^<a+lLD@aR_d*VhQei;68;^l}>L*lO9byL%`3EO{F@
z|1Ezi{Xn`I7PQVtx0-nGRg;^(aUGwoGHk8M+WkBySRLiRnQc_vT$qe2O~!J(;mzE(
zDYO<za;<ha$l3mhz>)9pMA%T!70{~`xO%8*y%-?U!28mPH(mM8?suTl+-X+jl5BC#
zbJ8cQS0UcLdG_GMB5AP$WYGIVr0<AmDf6V*534(!o3kx++sOyidH9|?j};nsN-wo)
zgm0di&oJi(^>$dj`#NXH=JJl|S+T{&0ZU9AqBeq;pWVY9jTaYsqqkgXR8FxuxoY0T
zwIrnU^QwGP`e!Rg!G018#Qcl9HJZFDvg_0q&kEr`9nhLu-8)}t^-^wrJJYRIi<15e
zsupzzNq@~qi+TPKi%Trza$q~><0D<#ZqZ@KjitxGbcyVVYw}HuF}>ldmAoR4XF|eB
ziJ)ZKgM@FLMsYhhn7C;5Byq$CWVv`SN6z~4O@SRagDYFLPb&^+FKsNA?ctV`ya)3;
zo<MfV=(QZf^dX!v_C6LtIn2_jJ6*n1DFi3B5fLp7n}`PQe(hb-k=sp)6ABLGMa|s{
z?jn4SWM8xM-S_kmirQEF6$XwA=rvU*(%IR4;j-<<p>VCSlTSsih_$L3NVI`G$pGl<
zCTOuK$K8JNWFkvH3m8mQwLGz{3pK&pvs60{l6_B~KB1`X<8#{dFvKNUyb?N<%qm}(
z?Rx8>2_wU=r!iH^qD%fx%#JluOqxBc%`g3bijJHLi*O0Ls6q{iczw9TOuWC?oOYjh
zWw~oZ`5O5;OQPee?X;euS<!q2EF^^M`)qHw=i49j28sU#mCNV-F3|Z4YBLsJVdYG$
z=z&g0{W72AxWu&l1<ljtUExGmM>76`rs+rjj1~O_EtS?8f5w`K9zDIUyo1{O3vxib
zJeYbH8}R5a2x+Q(rIzv+<bzSGcDhsfa&<Z5<uv(!uPb}W==JVTsq4$LF#bRL8pd5%
z6Xhdc-M^rn$ZIR&|EyeE16J-SU#TVmR?1Q%EGMMwavn?^UKU)p=GN=$*8E9-IZXr@
zwR^c#2H`T9rZq7=iqd_#6Z+4LGSHYfIZMC{<A2Q*6+xyZDnu`Ouz5dJz5aq4NIA}(
zE(WJN#C;^TVkaz9{cpPHI8Hl%zDZshir@H4Sw>-PmR=mg5JE=SR<xBU>^>{<qJJTt
zKHS!`y16!-^JyGffO5G~yH%4}<7XqAL{(Kll)1`9;*VmfdP^55(yPkg9)rbX-M1pi
z&TSQw$%b5sg6)rAXkXT8`5b5A1+38Htf#7CLUqeHXrSQts@*3^alZ5~B#Lkh%`?Z(
zIvlnwO}1fHN&Yi#E{Eo`l#dWg&Fx!;p~rV4gi4G2LTrp$)bGL)8Rh$3K0kv73({~r
zmT>e@kFUk?r3%)ksdVF=LVBOg`)Y_H7w!z<z6b{^uxO6#Lue)rQIm$<6ccJbXgS8z
zhl$cTbF0-u6PN9`w?1x*9&x;?5`KEY<s$lmyEwG=T}=N<uwGXC1JQ`MpPrUh$j?Nm
z!*gdF>39wO!g6t85$RVIe!+Lfx>3kiWNtK-RCphWL*O4uBHVXUX-H+~8Q*g8#(x>g
zGa7aMg}Q{r{bCZ)%<LKGlX^`Z_1Q?DhldAjNND$>qEvEX`1m*T)gveP#Nc?-4KLwB
z1BFzbw@cJ3Ol}K=G*7XGT%&9cn=g@3RKCw(f+H0}9wy-v#oLb4dqbKt77s^fXeZjj
zl3vjH#q+%*7c?UEeFU5Gi70b~4w&5W$j3R(`>IJOeUM_Wo}!ja%l5HY=?>aT_>|%n
zL`vqR9k)!DxV%o(jO7AV^3qg>>?wlNMGhSv_XOi?o;796f~iDr70fK$xk;gLB~srI
zW$wq<@Ds`zWtflU-KaO%ZmWK~-5J{A2&MTUZ(-eH68o*5hShs6K~{F#MXqsy??c0t
zekw5{n@F-~ohr#BB1~&x^(FZd>sX1}(i1i~)0J7vU}D|vIcwpvnIai%Juc_UBbA;D
zEW_hiidNwASkR9$jJWmf;UiAF^|&?mA3wgcBY9-*{tRXN9?UCVL;Ru7$1h`{js4BA
z4WzZXiXmWrF#BqJNnEn=FDTZn<CmJ{g{Fd7gsb%X2TR$0QJv1<s>vxjXKRhVSPx4@
zDb1X}pjO>gSS5%13kpkq&ITQQSy|H$NqI_6erXDVx$2Y<mbZwW!SKnD61zyGh1#fH
z*(VpWpR}2`6Mhx1%Q8sDkoP(F1?k<zMP~i+rXqm_KSk~6I%jq%nvGXEjCMq6eUSG>
z>nMBtes3#v9+JxVrzV?;UDk7Wb@K<|%v%r73gK<`#FmM$3R)Lw5H}0d^M+ZT=);%Y
zU-O82-g^!-eduS|{*W!0n_OF;xNL$X)&GFD!%Nmu1g&3D=mlBXZ#=3Ko8i#VAw!r2
z-7l5iHX!7(bAhwJ&)g<=F0X10zAtZF{Bo&7w%uFlY<S6}X9c@p#?ZwVne9wQjqW(9
z<97-*gvuL58+ewHPW`_BNA_x|ihzCGS3Ep<)kTk!@1^$(j+hJ82h`tli6b`p+`lau
zeaMD{PBHte6yH&e@o@nMdv~&4tYEONuDW3FhBGFc=~oDeus*#P=8e3%EgJ25PrB~h
zx>v+deM>H)b(MxLV}(mrH+F;ui61oV%_^T;(z@%Aa*!<LGPCm+1lvE{j_60fc@DF3
zQ1%m9Z0b(7OAF?#Y`7V9BzBP@b^Q3*&$P!PR8r~`O$Ab+=IHWu>HXok2ZS?yvyl_;
zqI5gC9Cdl^U9k#e3EU;&A|}*dkoWEs%Wu%?M_MI)7424!N=$D5=fOcoHVFyyoj~i*
z`NlWFfeSYe1<Csz!GhkKl*iKZ47eAG&c)T4$-h0XU{;bj-G?5&dMzdEA3VnFo4K36
zeBXA9kZ5z{dnlAF(M+%<rsZW1@8mIg!_Jglh4<ougZ5p__m?rR^Fr4Cg5nKm66o&)
zJbxPI7$RZr939}Kxy;c&Unu`19SlQZo73_Vi$iYl1v7DhkB~H~JcLi#Dg$f-#>Vf+
zzd*i>Zdx{W$nDW3`_5{_bukk0bYybh52f~s<Fg=7QWjpRMGLbLR0EyQ=^dr3gVPF_
zlwxpnPNKevnA&fleJm`(r>9`8)lXKp$Oq;`9?n0R#GHPy+^a>siD26oPkXE^+@i1E
zB2&MclzOaCEu8p75~-ZHnLVXrga@ZH!lH)#F==4nl@%se30Y@|n*H~-!J@ni3cS#f
z<3@|YGB9XP$0?xJ!H8~0vX>faR603KEeE`)$&pi;tsl3~DSJ-!EbU2-&x)JBkR<c7
zW<ydueJbK_Q2CfW&_+z>(6&?UvNv8|?prI@cX4TCt3B?06RXj95O*-xAlSo?HM4Uw
zC?z+-)uFALTf&R<Q{-Y3y*BZ*0NCc_wTJ8(y}w#IkM4FeLzN)*AkU`@_E`I=Yfl{y
zkv+k*HiY+_H*@?4?p)uB!!cgfE2a23HEr5V_?~~Qe|Oe{n+B`_SIqS#PnC{48YhOe
z)&H2kR;g<g^xNu7iJ&1G5t>%83SKYLG9t_TqeDnf<Ac2oL%7f7uFt$FQyR-8`wMag
zcfL;%?n5GHR~csJ+gJr&CVi~(wD=+tP=24q7^CaEad4|jFqtwkwdg6?X5FARJ;w6V
zm>p&)vIiEGj-$~c^E-SUP<v}{rIJOY7@d(ngL?(tOgfENn}Q3ERUa0=ze*Ms<)h&S
zPmoQ__xaGsr)I}pzEbi&oeYpiI7hUP#MTXW2-m7D+H(mtR{9tXa*<v>Rff!;ZiF;G
zz~QQgD9nO;U0%Jp#|K1e<HUFK+rM=Y$$5zoCG@o0kM<`I#n>f%Ry7~VGer*4EVzVx
z2CIA}t8~fQkzM2l38H<{5mip18IfTmlRmoNGDjWXivMDHVTmO9{!8O$yK&>ZS}Khq
zS-rFPn&bD07{<>YbVcA2OCtfKZ+9e_$!FG*Z%M{Wvt_V1?#YwxjP#L)IU``6PxV?L
z<(ayhJN(PZw<BED3hC_H_`13c9x7K^N{8hWM2txoRH{&bUMQnYg9?;J?@A74%?MfX
z{soar8ZOi^8Bk@L|KR6s#JZ6x+0f{GEU%t)cb$*2X^7;rw5PIkT>o<)MDp|D`t*_S
zOlI+Uut{2WhKGx|xjSX!eA7i09W6TS{U%4Jn6W;3LPAPvf__4?m7_}t7^uDS3E(*-
z^jA@p?Z3UrbZL?k(6IMW%8D>&M5)Z;AT7~scQBr4LnbD{YCxg$WWYI{g`v5*d1~Vz
zX~mp%;C=E9Dj6ArV8Ouyv}Unk-cecZ!Vp)zadQN(M{xGciU-cIBDXB9*zkAy!S7*f
z7gJ*7XB8gK#=JZZZi+zD$Z1S<)9(GY#;8d~ZOIA*>-P=0BGBpt$c@LN%kcJZ&h=3F
zP(kK(W{rkV`)@9Uyzyr(6!#P~7oPa?I3!Wai_)j*)|K$xuYV)&(^{P1@s8Z`74esM
z`<dSdqtmKAp5Dy%%Fne;!a4rvB2KbIXWhT^iOcE-`R6RfuC4NP*Cx48HWLpPqpMmL
z7e9qt6@;{?o*gfh);_(BO=mTJ@&xe4<SHxgCNbM?Utfn@mG_<86N)dnf(EMXSWnfn
zVK>ntySQlL-8Z>WHyBIw&5Q%xg}0sU`}VF>M2r#(WO=$Fe_ZlkxzBOH&YTX?9tbx^
zOH|IV89!RTqyCm#m^5jCPoLG_bMfi(M!~`c_Co#4ZTk>uDxNm6RK2uam;J$|6V{L&
zYMkt0ud7AigI{L;8&57!4)&IGS_Wgj75Buxy~U@WcEWw+t7PTuzx(1BpPQFgx#E_^
z@|3%McXloQf(fhY4;|Bz(QV7OH5R<>d&8C@Jf4MwMHpI`*jmZB#w!*6B@NGEZ!bOa
zqC>d^lh&4PdE~IBxM=9fVLt^CCp%s7Xkz6nJezwipeG$OS$o1t-Br?NiB-~jrO`>Z
z)t}{j$r2zSR#uqJ(v5qi<lLKH<0eeE9`>iEoxay|!|P0KT$tkGBtu?p-jjrVp>DZ$
zq_uHkhb7s{$qY8z@RjZ<SYNUJ-b>h)L4$ps<~_Se?6$KVOIQNeN00rnthf?nc0_Ic
zEAeF6%_c%q8OaGV7vYA~0`P4-9{h%b^5%Py+{Pwlr3!|7%_^b;VHpcbfdTY5$E61n
zdJAcGci9>ld!QDRsb!WPMx*7b98)GejysG?j9LdiZ=4gc*}o{%)C^|lrcHg?KE_jL
zOfb<1Z<`zW9Ykc)UY-4}*mVwI-Drf&3cEz$H^usae3c$8pymtA`?54D0$ECw=Cfpq
z-hWy7B@&r6`$YI$>vnb;y|5m(Kk@TNN8WXU6RAe%Zcc(1F)dLeUqv@B|7&W<&)^@Q
zXpJ6sbito2o|+3+e7EDOM~D1geR+3(xh{J8*7jzyhTm%?i+P*`ha;4SC1x|v;#`XP
zRz^hqk%kOoNYBR@Q}j@|o40PLdM!^+Csz$oQ|Qr8&jx|lkNRFdhcz{jU*2gSi>cp{
zjr*m$2a()(pmi!YKltjSLN<Of{UQ}fwd~~Gs&q|-J@Xsl?vaDZeh-2@7jJpmL^JB*
zTGH8rxB1%Is%4^*!^2;F=ExQtOY|eC-JGv2gLh=NKk~Pcd%Z1F9_=s}twf#Mp=`e%
zz|(mCC4$e<ee1P|e5_hM8Yt+25Kpl_J+FCFlp4;<M*wmIVOoBiDDwhk6XP_PFz6YE
zPm_*W2q<#8u9N~w(Cz?regZ&sQIQi|6n0%+6hV7k*gz(A9zkY3;pM<knk+*5O@`$)
zvji|>`k)>m|DE(FNM{w8{t_<GH7A8>=_tOc&e+n{tFd5)PtWJdOK;CYm2cXGAO8i-
zu;_*hKX1(rW?#pGVLD5pl_55%b51gn!m$AqE#=^*%*toKK|AzA#=Vp0dWsVIepL|l
zS*A}HN#^!4i&gvdL>0We(iE!(`2!4>O8q8iKAwx?of3SHqTeHf;_h2??IAyg&4zb{
zRX#KnukSi}pBBAkijoL92*#c5(9eHe6b#_0Sb0+Rut4vU{|A1MqB7Q8`h6%t!Y;NX
zKM7vx*>T_;<K3B*myfd^GFTcrkEQp2v}v2Bkp?9aDWcJ$aC3taQfJQYeA~?#-1lgj
zOTa8!J6Xm=V?8hI+bf^$P`O`COIb*5`$*lSXDD>MWJ!l7+LlD4nMbzutlh_(=ye-~
zVUF*OxRv&ZwZ!t0Yu)qaj?5(BHFp&1x`t(M>Z6@fA!MnasDJ*P_Lhz%>ma#D1N7l;
za@GEF8GY_(yRO*vk@FHYcStS8wmFR5(0aA*tCEcIK}&195fg5r3g!5Gn{`^=l`v-@
zK011G*1zqKrc==1y(HpA+b+`XTH`@Bv4?P%xNdJMk&lTXU;TQ)o_XR{KRML5+_$ZT
znK4y&zjhWr^;>8quN?2BxI?KF=w(4s<9KCL5kftXt6<-Iw3t!&jv^v8JY)+5y!sC4
z_}FUB=19^$f~v@*eq&>p+PuPxE}~TLs=0%6qP_fN=GC%XRDU1czL|6rvPXF(qug8-
zY?C#awy-eNv9Ou77R+i+Zr40G(p9Gy9=DHh3kq_cYs2%p6*c+f{;yl!#{I~}Mlr82
zm&qE&e7+RLY1(8v1t`xJRruQP@-bEwcQVzzqSU<Qdg->HA;cH%1@6110nG!tI`(50
z^Q$c<M7OY9oVnVhdN#ff>b;kR(^o6!8^3t9^0CD6bzAu?n#iiL2`Z$#hd_yE>H8O#
z5iUBVTX~p^CuL>hRbD$dYu2Z<?a%lp$IaOU(w%0R<z{J&aTLw_IP@pkgB`7I&?&o`
zvwhoVT6d(pahx*Qu8Y<qFlX?CK||siLh93M!)><JpU<bN7xtS-85+vvu`^T4tCKMn
zMn3~X>D+3Tt0_vXL==_0SMF?kxTLQLyzk&jG+f6PXbP8HE!$}4Z?sy_TkNQArca3$
z%`HiHymh@99rETc$VernT{Vv~xpZ|`C*7t_GdF#aT*R<Jnyg-z6rwVE^~clH{=~%k
zupEt7TAvq27v6NY#F?wE56WJ`(dnEf#7Jm%FtZz0MGPk&rNU|}?DP0e(a>L+YFiwV
zYeuG5zb&fhaZ#p!4yzyPh&JpGUdwYjsq-(LWqdAi1mBys^@de^S$6a4*B7|JSAA_9
zn^P|JFhFwGwx)$f*6>yl^@Tc~48fLv)v%&rZboJGvxi@U@PPNtOcn!c#8Tx_(_unT
zbcryNllYKp#q)K=*X-GkaczG=h7YKV77uD~4mp5Jo!^sqsHJ?<QC=b}UCR}8>&#O1
zY_wLiRZShX*vHE^I14#nvQU)kG{3VX#WpB;_N{rOFs(6LfY>%9EjgLET3sb<H_TiR
zixQFn`ygi-&X9;Tr#TGiXu#B;QMdilt&>U}v4zAR-9~Ex9%~h<F#JwcFiiVL)ht}2
z>Fx6dgSSmb$Eb-iv6+s6?~N7w&!_NS=R8tLHzJJ7J3L1+duy9C6>pM=Ts$%OvRZ2b
z_Gt@4WQDoik4)T9kQ4<kCG<>Pt^>o$LOFEhVpwpCMZ<bk1k+<=B!dsutUEDfryx1G
zMm<q+cWr9eg+X)auB05?sj1)Yj(U=cT8`fzy9kOd9)j11pz^n*q#)jhWMi#udE0N-
zt{}ostrT~iZK*?pdk%uxkZNiOnnVx*h>RRMQI72qU>-G>WUrYzTk)7=);6@M>a{cy
zp|6{@fREfoheQN_t~xCEEr#383a{v_G8#1#_OP&*KBL`i(c$s4t2k}EanClT881Q4
zd!ul+Mrm!v&;1KdI&v%nm;|6o%=V{|=TZQH*dkoU8-t$35qaAdnReh^NuF4dmNqC=
zOi<4yRW#rZx|r2-X+^C#h0|u*pE|&AFTL^`(I<bX7aX?xS;E^_SIRZj3v%SsV*Ukr
zd+WK9P%5Z_kLPC-FWp~|AKtDNWAJ49upnP)Ykj|Wt&X3oOIsXYzu=k@q97vp!z|iK
zA9KJcEWgV*H}%!WL<Fda%RDmP1`6n|%ioxR+DF6d>I9(19CiI3DFPoqgbWn6$b8!3
zmbqV7VL4gc=Im&h72e_skuw;;RE536y&#8h&xy{@>;^v}xM|*`9s4-S&N~Ca=0fv1
z4$TMgm#@W96(*`ePuX@YN#_&8(R_G(TwEHw1dFyZUGG2sct3m}WlWWvk9T_>TXK_v
zyn^Q@TiRVe!&6iD!w3G8*u`%x;+v5B+pZvnUnMgqD9}TET(X<u+Xu`Lco5fp^s|h`
z1-mk;C(<Mu(KS`+G?Z=(p%hByHDR&tvsT{yHkKp8uEM=?Sg@{%uRv*bvWJHOubW?q
zDn{tr7bN6cNoC`0lexxN`#M*s1yAP*>Wx_6g3EwNI-Lq!7mP=WCqQJzZfo{D9)0e+
z^o~*R;E<*N!XWxV$m&bwh@7lWzu_097}4@4gPJW1PJB9gxJ~tu9vX(*?p<+Uy{C^9
zD4?VCnQhL_9W!5^gr;XV^);GV)}^W^@2Vla+D}^ih(H+K9U{eA;t|{lED-~H1qHeS
zKK$}Vc@WRIuRd&1r}SGsUM*CQ-v`^3<ZHl@4kJ*D&vv=r$Ww6qc`AZyD5N2Ft(}@4
z@4TC<vKpd3)I-MaZe**Zo=9Po;AB(`YxxvxKWOzPh2wUBM$Ap`{u^Qu!W!sXpu75l
z-?Ri!yrq?uRrWng!CZ@e{Tm~J?x$-w`_nXR7UqX=`CrfzT?pFsg<M*${zk4Uk%;(L
zwgpQk3pz!_TeD20=3ba@p2NilvyI^f?exSos*TnOWL!3vCGy@Y3h~O6U7OeM*7>3R
zlhhfnnU`ae4-gFVFKLW=YZoj>j~hb2LfLC%^mT6cK1Mydk7fpsqXgi+5Hy`8v#}5Y
zBZxFAMWLN4h=9`K3=DXZo?1T|dmjl@QzJ^?B^n3}P+Dyuxg*){1U41b43K&@Tf5x3
zdoygjau|m6`@SZ_Y=!2;$H}ZPsXt82=KrMc4`p3$+{#qf97yP3bZ#_fNj-f3?hcQo
zwR?Uo3|S9L#amDIUu`)r4wz@PR1g;By7|~*Q~7HpEA}slh49v;0NomU%k3XE#+%4_
zuZqUh<`#QsP(O=>s-+`8)6KI1ww>dd2=-4%^k>I_pbi*$_5IvnjtrCHiYr~mEl;BQ
zzSN<`&<FCz)ceVbP6fLPZN5fd9k0+;6n$wQjfC13o5#Blq(8b&cz;b>#0lzNo)`}u
zt@buq%moHU+jkVJy*}YMsXG1<c;C75reMN*$Et!fnxfFiE8nv<g@nGw2<h)Bw@n+W
z1aRTF<{yKVyaiX}JBlbTZDU6bI&hP@XZl#tvFa(8WoT3Z{dwo$bb4BT@3`IogEUnd
zhyMt25OD(^{pI%lX-&k$k=#ZTZ<f*Oqtrc_ht#2|qK>NU>#tOQ3_lT$HycSz+#A*t
z8S*zl9!sxOD{o~(PadA}dMH*5s)vBeR$WXOaQ$re2yS1zsBdJ?J8fMN>py6HYCK={
zeg7{gLa{$>tp?jmzCbsxvWQ;eJXmvF<DpM$7<|_xwh+IuP2Q~MI-jO<l6}58QERfX
zYPRyx_I}!9{br3P8gFh5QsP!!<w=y9i5|=@*NLA>=G?!0)AWF6sYrax3Rf8Dct3(;
zup#e$a6zs!<mE)hCVEpVqe;|_H;O4i^{MwpYtVvvoLP}{)Ut_go7x~k(b+0O!f0v#
zQ$a<Ts9!0UrkPr@Het32YF#I>1VT`ap$!RUDbSX8b93LeNpgy|_NHdn9p!by9I?D?
zhn|*6v99q2F!yfQ_V}56!%ABVx;&nlN^JWuONAB^6?C^d);T3e8O1tu=uLPu&^8Gh
z=X<OBR>1vQ?hsUkE7Oy467djX`?_S-$e=u-cv2$S+Tndz@2gero!du`TCd{DYN$zJ
zD(gkZ`J}|`JvbL%Xe)oIMJ~6?9;Qnyjm-zPFO~@B%4zedN>=wD3?b|D>l!WLt6WsV
zPD5A~=eFfDV!qX0)x5bfb+<V;!cESNY_n(#cs4)w4=i+TG5!`w-%}c=+P=H}{i~)u
z#4!y>BT<mY%Fy>r^AaK1zH6wrHNKWhgZ<3CPr?_{<gFOyZyIeIbaN3L?|&TVS5}y@
zA=bZiaca9K9TfSbC_9cLx@Cz3CbnbgP{7e7)!8#O|AfH7hrUox&6f|V;jm>?6tbJ>
z78o#%zM09;&?_CEKGv`V>By-NXiQbvp**`H>i?}%=M-;s6_C6{=F*k+`Bv*1sOtT^
z3=BmqucqxjM-jC9<=MnN;{CMUz}A?#THd=fO;lek*bt$qsd2}lw66kZZANwp{f31_
z8;?!qy43?28v;FF=g|-6z^5}k4ogMYSq?0VhumqHU~kCd7x1-c7smdaHder}1DppG
z{GL2{{Wk|P1@{gf1e&?w-iPuNeF*Ek7nV>`Oy5$1%U%-sBrNOObWvSQ_%hl8DQzcB
z+x&FwD>dq^mso6I+S7R^HH)|x;*sO=2fkg(@1#DNY*@>Y(blsi|5%m#VpQ|>qWlqz
z{Wf$@%_pTHKp=DQw9RO#!8*ZnUoYT=KW!(MCBnD9s#(cqo$7|B^+fgju<)ZD%5Xtg
zYPoDkzN*_B<u93gu|61A*`OGfuqx4!)Dk=n$ZTt@TbST|omO>64(exI)2*Sjb?rZ!
zY+Kz&73+{o?`mQqqlo(OXYB2;etp4qmqCJiQ*F5&jaGXz&g#bz$6^T?Z*-j!@8Rns
zRbZg?(xZ^y9&~e)eH4R@IkAq)xEnGL52H5~2_ffYm$~`{QI8|Ydq*SVCm#5}?cjz@
z8AcAU@{sVHQ0M$St)aP8FEyp6w6L>y?tyN)%Q*mlneCRd4P(#>qW|qQ+h&0?Zj>&r
zb7Idh6HQ}De!)c3K;C6?m7(qrQ?Qdmlw`w5e-qN?ew|g=DMNT!Z7IJO_jYTPTeYwf
zHg&L)O{BaH@#pDw=M9T<G5q@QyxQi%remp!ds5=H75S#ax18BwoKt2_Am;Mc06$R)
zcVIp>k3$|)_t^uX^P3Q!`4W}a41tbDZ@CA(1<ec}urwxvzzeS^iyapleh*&SH$83R
z=1LuKX&&(W$i_no3fzqQwWDY{c_cEQ>r-GoT|vX{l6XZVKVc1%u5ch`P2JqlbDUR`
zJk{5E@<rV08=p?JTDzo7J&C^TNA{MA11=5F%I%%br1@C6XC=n%+?;k^-&6QYB<klS
z&)!VmS|CV&im~D>W~sSbe;lfy@r~>4domO4htSo|QFY_}xm@8Sc5rkF{+O?*fGQl1
z=Y(B`VD_~I+tyh_y9H0NLbK{dce{*`4oKU?V5Ml2cp-uGhg8^hy{pidd5>=pE8ohR
zhyh0jgz1GdlLJ29GDdoBk~epHQ-336(Xn=bC5G@dzOtX0;gm~`;ewHyXXIK;HRma}
z9fypPVf_q?Qez(d^ZR2>eH?hgeTH=(2U#|=pY^RB0z&>c?A3r+?JD*ng3R`D>cOvL
zGO;!v)sKBnbL~GS4L>z&2HUmeMDxAJYSAdrKULu4k>&rj)4hFe0#Mpi_r=itQpW9Y
zMn-(Hh0Ll#XJ>O#GP8N&H`*L>eOO{7Cu8~UlHAUE!&HUXP>Ip%i<kDF4kGSe7JgJu
zTIaQEIB{}$7`SgpOi!bx3Xvgbsm|Zg&*^NM+&z)IRA@_aU#Zr^tO?LGPmD)AtVzxp
zAk$HmF;O{070KC5qlay&mkcP^R<zl9o(UyR<cub^BtY5DE^~j8O?kIv8Qx_=s~Z`V
zE<}z!qF9}Ko!9l$i&)kBrQu_yqYt{|HGdNHCjE?l`MRXy*UPfoHUvKDl<O~G9?~%9
zv#BP<ExL@2*jF!sbuCFo2v9B#utpDYE%#i%jn*4o)vhM{4^KG>1qH9}dzIBvFAO)a
z)$6%3H=bt2cW#%c-*Ik|w=2$q@|=LtppaaORh2&X;b*NM8v=xP=H<8jR!#9IYOJp4
zH}!GU9eNJUpO^f(1TMB>?PT(0N#VEQKk=PEI^jHvwYCw!x-g&@g}Pp511urqgZ*a(
zC$LHrSm7uI9Fi;pmJhZgYu5~fYmb?{n~<M>JHonAFWpFf@8WPozblGl8LuAv1(|p7
zam~=N-L~-DGGOYb@4W-8+L+=$O*IuB<#V-6{pru5bx5iKDrowtkN5t^Xos1(i3@+?
z{%fhRt#q%dinQtXzDh~6?|-H1I1*as^BHZ_T8aw##x$2{Dt&2sW@5i@!0^LMY(Ig&
z`}>*9+DC|*mNv1{nlh~X(Ne^jmA`Z^orZ9-&7;Kv?R9zg9SU;S0G|ilJywA|p9WG_
zDI*a%*at#^)8{v>>_qdCm~Owm03lx!&XQ6e@Vu!`H>2*iRwrI@x~pe5X2Nj6-if)E
z7LgLei19z8IfjX8Q&pVn8p472*u}?hoAN$sN9%vdAeNetkZfo+w2FWJwp_9T6E<;2
zJin@9RFHk}Hj{yEuHc$q+ain47fO8@vNwbZWz~48Ap=ZnO4HUR)3}@uWSa-4sC(1u
z+nr*>u2v&g`&*@L?>>i>re!1y!i4Tg&#PLb+}JYdyy1qQrLSk?U}2?Zl8Y!vvc8)k
zxAVwhd)DrkXGwq=EZXdW8;GBPz2)nzjoQ|>y^1PK@i)J^n;NC-qyh~%VW(8Oq6nFJ
zQWdpmbDQyIJG_y=lgpgx$kYw#4xfg$hfw0tp${wYop}kbGqI^Jy%Icm*)NPKDeSVI
z&7HW6RttR`A!hP_8^L9>cE(G+LrOozCfvR#_ogI_`g9#Cj#zo(eg1*4w2&|yU!pmJ
zLQ!_3#hQX|iqGL!ITP#S>V(K0T$TQ|eAtK-9=qhnWjs=I#GrZ%|7>E)>Bm!gN4s<B
z8p031P17PgE`1dfy@+4%y8NvBaBSIcEcDExWd4!)@)PP*8~3cN5m036JQYJa<8Iz?
zUaq1beNjNlFLFthj>Wn5;nag3Iq4UQ&Fn0y53KtMmg|FTZL$L|4D@Vfxmlqe%K?wy
zsHI`L;x<#+KU)kvq@ByYG)cKxHZ!DHz>sBvZo+(muW%K24V*!E1>K2<v!5!23ig;*
zxFBLnO)9$GKfT%DCB560wNG<CuP1fp)f2h2{pw*Te-fJ~XF{NG_fKY1ctDavfZfdL
zTB8or)$qsOSzUV^`mQ{|B6aguSEU~n<^fgJ2LTZs0_$^BpIrj2TU+N*R5R|Y{L|(f
zskX9*b5jAYD|xj#aB`A9G+DS-p(&Zww0fE~6;^&3Vz5$fp4^P<gdMOL=JTOYRpTr-
zGA+klsL1wtBs`8n22qh<Z!OgTmRjlUSw0qjsIwk)PZ580PcgKyro^$Pa&Oj)bzi8=
zFu|RuUCG0iTX;7(BBC&$^4l<xPn+?<#81mS8arY;Qu1_Zq2ruwcR`-XZ1?vkzp)~*
z5tz9~@g2SeR|(r<2<!7S<jl8=7{wDDpX`}Az4<n|y4+Po6}9LjqdRIKF=NZiAAyt9
z+6zofl&~zBXVUv9#}y->8_z8nv5%05O9j2m2OeQJtJKgZ^9tp{RV8-&FX;K<v@h;=
zR)q%8sYD19op5Y}UUNSst_%_ol+J5+GS4F_-lshjKRXaoODI9o9=Oj1ITv4gPjmz_
zYV@{2Cl7I6sJtl6@)r;3R$0D+bw;$b?uu<&?XBIy$U8(1j#)zyW0OS%eo9seAL5cy
za&>wi1W9jUqf8y<&U>A*a0!TPuxMYiFc*uTY3flI@qCF^Ye~Slk4ESXJC9sLQ~C-E
zC!21!C1asLh_Bd(mrHLP;#&-)_JgW4?UN&{g$#v`N_dnB*Eq<&x+NfssK{Oue3<~M
zy2{e04LW~OqBDGu;5<^SeN8mKXmipD7x*v8qbbH(b1J~+(0B5vhNCYt=uPaSNN*9l
z#wygWH9{8?RXiP@u%s~K*Z`Zg(i)eAuNpA6HvR93lOl`+N`l#O6~o~XwCDf|y?`Yr
zlOL21`$L~9G=9sggY?7YW(tbM`UXBZ7ko(g&dqz@zHML?pYy5T_DI5(wSB>9eECMj
zefiD)#+KNo_8r4@E$ey1d7T5?ttyr8_iUFdD6qQ~)k$s3l?-Ms=66Qb7{xZS1&xF&
zS*1V!hIFkbEN35!w#9Kdho`Z$yn7f$O-7b>vPMM0;yL<|hFEE%dC1%;+-ct^u(M$k
zH5K(2MDhnS=}4j#Y!4><3&L5R6V04j^kruUhzje!J>6x17w_fnovhF*jK1m{B1^@R
z!VIOcJRnL{)#|9RoSWmmIST1N6pwc*FbibfhDFjt_h}N<4AEScN4Yx+S9r$4Jtg-(
z?8dZe>uUQN>pKwJ%2L<9I`zQQtyuJFyzv!H<3>k9cx2VfvKw$9?A*8;=lwvu;H8Uo
zZ=BEP?SzV6te5bWMYZ-KH4F9Qup`=H1)g5JHF@1|kGDzRp!~BSPirDf=SZe3!|f)P
z;m>l_r#s0tQI@f>&$ZmYk+A!^k3tN|)&_|JU6z!l0wnZRCX<brio`L+C?u(SZ+83f
zlz3_h@8zbGW`N73iKVzXZu_c&5uaB;ysB5Y|5>iiC@<dV1=)7hzN2Djfy8L(pJ2hA
z0H3fYyFR8tDyyE+!pD7-*~fRA1mLTumxp{yQYFG?4nz7sNc8sY2T)Klu$EggGxS$J
z<znVMzxSQtbLZzn>d&h_`~{u4;m62qqWY|>_c$4<$CEOggc}<82PtGXf9=#I1%^R>
zebAN5igiPDEweCz&t*@g+QIdN(WZ3!j!0+wBsPZmgo>`ncVzD;p?Q2Z%!q0Qyn~=u
z6=Wx_4Nm*y?zKB5)FR`a4?}r9n7saIC%#lm#?X<Rl_y*=vxP427WF5rj=<WvTAcW&
z68x*~S^X&ae*g_Z^1klP8TVTe&~9sWuZC^abA+pLT7c(Z#yRdt0;0Pq@b}M}$56Jm
z>`UqxXx#XI{TDP$w@$N7m2AB-W8C08xU$+Olsbd8LykL)f;|YYiLYJC<1+JcmvOqt
zRH@S)Q_sAh0b0+l2X4S)*jJLdwenLEV`UmdREVWT3MQjcq(u=#(y3HxQAU<3L{h0x
zqe#?^BSi`|8kQ)cDAa0HjS(YJH7Z!5B})|OG({RlofJhJQX-^jQA8-wQl*M0QN=2i
zEKw4rigZyFXs3!OrAC!XiXx2^=}}6wg-WALR;u1o6(La+=!#UuDq@JGPNPg3B6+D)
zXrd`o6svX6Jtoy%N^VQ~YBW}D(VXy|xKDhtz;n4ma1^De1CkOr$jJoMfJuO)0!#&_
zQCAMW`#)Utow2Dpb<3Wpb%bx8reLSS$Ej!}mHAI}t0ay`wP{^D&=Y!%cast%=+=vT
z7DLnSQqZL}92IR!HjEWGqnsxrgs7g}<XGmA2+H+!8jNsh89Oac$1zG@4i=QsgNaz~
zl_Y`)`Q!?><@6(|m-`~F^W$4lHN^O>+1!6*#id-5QH_XJ4tAAioM0X+YtkJa(|SU3
z@3-AfjYRwhH^FWjCOb%Q1GUAaMM_$M<PH)D2cJ!b(Q4E^OS#M^SIV&IxCBR%rUD+3
zDe?lgv`D}KBo!%HAdmn&kzsF1^ucqn;nj3HZ3_0m)gJB<%tX)R_%3X=-L)zV`%Tq9
zbw3GVj5^lWn;>HgKP&-S+)G@hXE`qYy|v*)Dc5qN`ySQZ8rPy4CsJvF0jpycX{|O9
z8uSz5O56rA>WYDQA5f$8#szbpy!$_$D`;xvKKBk(7RY7yn|aW-Qce=0+k=$k;~_^G
z9+kEa9y)bbv~F8)KocWr=kSsASQ&OZo#RbKy|l}$#EApN1t65VP_+dtk@*%8g$(xt
ziqkF%x7@BPx$664x3*)(Ky9dw2A1oI00QSA9yvJfYawKtsHZmgwccVQPg=jWedjjr
zNFUjyJ&8TPdf03_5^S4<cBQT63f*NE=HoIPdUNW*LK;f&02uQrSPA~5SKd|@ztukP
zKezCyb&I2?k#+t<0LYL?Ffp0l1TBZB9Sy(hJvT1n0k-UNCdfn4*7SmeL`rkDl_UeW
z5PZN4jDwu;a$5ULUo>5oQnl8kv1!OjPlp<GEz(|`_S}Y9WdJOm+lsb?<Q$q;ue3y+
z5|?dl?7dszE8)>T(9+z7>-Y<FA>f^>Axk@mBxg7zVAh?W`t>tZbqu?4fFy=vt#DaX
ze-TmN;3dS8JgVAMHx6(}^{zICv9CW=b81m*ErBC5#T<;z{K$xj8|8YpP^oiJQMPn(
zkO7I`pDf3q<`&tZ{?78g>Xh!eeTh<^N}P!CLW;_^oq#1+P#MN|bMmU8E@^2A_z96y
z3SxH&G7>iJBa93j_w=rfpQ>afDRE1XsV*Qd3RuX_KpdQpU!8q)Pe*j;Q6@cp*S1)W
zSsPlB6|kbp=E&@_RNmDow4UcaWpU08b(C-TstSBFE32<&>nl@P<YSS{_zrXX61ncv
zV~_WQw=|8{HrTP$X3PL?<tGS6?h1~5f5x!-Leh;NsUCXBS9*Z_bu}Q$!dzsIQd?Nz
ze2fu}-oD+Szq3C~#l=%J?Y;XF)XLghEj(pM^9&VuZ*JPG9tcp!rD!w$&pMqmB{yfd
z+3t~J@f{*kqq^Yq+>(L<zN*`v)v2kAhq<PkOh&_zpY7LWtz%n9uF+EU!jqUm1d;&A
zz&`Fy;LOj$wN1&E+Hd0+j~jWy8ZnBL=g@cm01C)GE-X0VS2;1;hQ7^~7L|Os<m8`_
zuY|j0=S^JPwA^iypx#LHFzYyRLp{)}VM)j8Ng}-S<F~j8(HKLmaH1UCz1bWSoPVAx
zm^B<Eb6-(oDbxV5(hflc868LNzTx2fP>~%>Ad>5gas8wueo@Cb_dhTy;M1KP{wuUW
zx?g9pY-!}B=AyL`FE~<13R0AOxfmdFa7IWxRW9_zcuq!<5v{5OB?wkd2Xar#f_*cO
zrFd?iXl+HNCBB~l$uV8Wg5zgy003iY?Tlj;PpO?wr6AorfaAF_@|<OI{?c6C*;}>t
z;xm#2z~zkZ)-eOBw>5W8SE24O<XR>$^aq^@Q^zgsUUCq$WTiP7!iNV3wNhbkLb=`A
zxh2G=X5@(sl3P-eNC1J`BREj?1Kz$iUaMU-WXY=3YEom$LQvdtysIGRb~}F6kli-l
z9z%dPBHba?BrxGASjIOIpFmVN_chl0FIwu8dkfMHL(B|fca5-lV;(BHldi8c`gd0t
zAf8Z2<Vg7Ac+SfP)}VFUqY+p`F0BgMhaN#uPt^A{Wa%EM>b)N1_bis{Jekwl4JPe$
zb!jo%1m&jKPoW?v<v^(8JONehnsByisL%W~sd1tqPrAd&3K#>AKYV8$^I7|K++F3W
zO~|tnGS2s0T0?*Wt`MHvmCqUW_N$#+QFWkgHaJPi=Z;wM`!5Q1Hdj_v>uO|*49kp=
zAY|>65wOXa-wS!RYm17bl<EnJyU$X$nX;O~oN)S;B;X8S3;}>KUtLGm3EFo~+~pZk
z)wVf6LeL#)r&e$R)q;|bUpF}dvKH+bqwkRa00-l(auxX{d{>K)Vx$qYk5V}K8r5_+
zUC{-18x813gs3tehWu0|C9f)q6fxOA<DBO?u3ny{Q{Di&H(Xw)?e>H%0Mh6>q1p%x
z3;;ke4w1+K2L?-U4RvR7PNZrxEy#rXZWOeIJU5cHkeuV!zIf)c8k0cX`gWFX8j2_0
z76|GJ7fX3lv6M&U-f$Gy-H*%w;~6#Rx@mh1ZA6Vxpy9V~W<pf+4YmnomvU0F+6lrr
z86JZt7{IO1PIWs`>B+5q>6V>&Bn7t8i$vqpo;md&I_Q7J>D(5Q2#&p1Q%6m!tyo*%
zu*87&i9QA$fdp)0Y{4?CEh%wZ9YuOI<L@~xPf}cuYl86#%90jKn|Vk8gSR6Y<kwMH
zpxUjMhznMqjwf7QNR+FJQ7J?r7)jo8N$dts827Gd)q1`zo!0WTO}9_Q)0WGFiDC6b
zbgRd7<!XCwNNp=Wq+=x<k5jxJqd#~oN`~@KmJ-y6-X{RIQaK;zTAFRQZ>buu7=nBW
zk;~R#o=fE#K95=c(p7cSICxrJv1l$Nf0X15$OO&-IoqseYDiEVX{oW|Ewz-aBt=5N
zT24|(+rb#%`c^@`N}J?$E;EjtovT4`jE_T)_*EV+F?AiahuFFyGh6`SD+=0vm9prs
z8Y<mO(wu#ipoBb92IU`IS7`fo2FTra^|abdrN%wrvf91q`i{?b(l-^BSiD7CFiFPM
zsCg7ViwQrqal8o8p=pLExo~w?Wxe9P1(D=!DGEwKKg>xd<T2}A%Byv!Q?>B-hTLvj
zcp_|NhTd&hz*<f)ao+?Hz|C;iQnXd?Kx@mzv4&LhEI1U(`yu%1ABMlGk~#KP;ptk%
zt>X@if%sRIvnY#!R5bB4ADjste0<i&6R2<8Z7s!<JK-OW0+~{ixSV$wt7}T?Yj&Wv
zTikioi;HihHzCxNk`i)o4}L{+LIZvvV*L@@OX^lalyZH*N%{Qi-E($*qW2C|OQNJO
z`(X^J^?(^r?w&XR`_|iPkTS13Qs&FH`TQ4g-4w*@Oo+GZYZprdk%@5LY%P^%oa6M7
z=tc-Uf-8u%y^1E7)_3bQspns}!j@ANZyc|}Qc|>~N7R6@ociNFwQA{pqic)pxybh0
zYm%R7y{;&@13nl(nM(fvAUQRg>duz1-nv-!vy~l)n!*c_(I#9`v*R}{C=I-h${{BS
zRyPfUxX7&wsvy(jZsX{=O<KSTBC8@s{!qEZ(lpIRsuv)NMx8{_5lGXeQi)PD=^B(u
zk*7$}LPn!deoHaZ42MwAKhB^lrg|&(cCu<MD;rYv84@HLm=8d=H8oL^)Nj(`r5I6L
zgUl0<0!nkq<0iDYz**C#>aO8x=8_2RF;T9v>c`phO<Zj)9+X<6S@i^5tuYyOWvhc=
za@v%&5SKktvw%;O_sHc3*?KIQ5oR##S#g{#NMYm@IMT-jDoNxK?NatRh8(l2LZt!&
z#_Q&38fKMXycR;qex0Xey7jH!55-Q`P=6}@kI6&d_U%_Dgw!@IMHz>sN?o@59Frx2
z@`_4FJ|kfFN#l;-=BScz2`2z|HSTKDcy0nOY+9~}w>RfS!7!chQ~luP-MIPot*RGp
zw;&z5e#+}l)#~ZwHO6W5^XcQ^vH7mZwojiSrmpZcBqyw}oem+lPFC?8cz;8aRdune
zlUj!I)}YJJ$6DK5DUIz3ZA6s)K}i@;;ELCJF>%xGyqWri?;7=OmKPnD9K&w3pfKjo
z%A%8zoN>Xcqh4F?8jjI2;^2=S;RQ%s2HFF2(f<Hb3M1b;lk7*#)%`b$fIMth(QK}%
z)M%*Bb>n@A@W$|FdU`A*E~i{=dV#x5y1?V1>vm&0$2h?NB&hNF3QsxYR>d2xj9qNk
z`4N!nF1mU<vZdP;k{(HGB}pk9_ZT>;;`7vNWC*b0#f?7B>e?l3Fy`bqf({&74`pso
z1Q2j}1Y)Y4DXsqC>I_XqDW>J6_ei=Y!UR6cgKNnnoxr4@sTsw5ciSy5Ow?<d?Uz;p
zAbX??#PvI3eloqTeVV$xXX<H=5COr-bWBHy+a@+zfP&+#2{Yw3B}iJHb*9smB}!3I
zD)dPtoF|e8d{)DvE=|}qWxjeNJR!8Q+@}z7=w(9-Qc2)obKBCgok`K{=<QoB6}C@}
zW^pacw7Iw+9y6nI2tJ`aq@PlfeQN~c5{pGmxRbmTsP5%N{*mfyDtf(o<(CxQ0|X6+
zT#vC`hL7yli$>A4E$Q(W3FCHMo|A^3_<*_>tua`>^wJ!_v^yftHL$mH-LeWdap<75
zAKJOm&j}d)Lmc3cKD^gW^y=3aSoFKVl<-R`xBMiftNw{-$_YN$z*TYHq}A_fi><=X
zaEUd$gg2EQOm}eDLeg+^-#<~@8tAp#SKQX8aYRUaLHqp(TKZnEWuwxoLh7dv3y%Ih
z0Fq<wto?AOWm$A>&4Ku8v<N6r8CLclSWx+4Dna@xfa!Ckw^rnZrXSxi*KQ#2UhrJ;
zN2$O^ho72<y;eGRtL`%nRijc`%*{P0hrAeXcrsXc3?=54prr1{1SusXeE}F9ZPg35
ztd$j;a9xhg0g}bO-5t`P$_dJprQj8~qso<mljr~dQZr1hT?PW+pY0{38WikVP0nRH
zykX)1;14fo0GZ;*rs)81@jI9X+v%DT=DE|&EQIWny+b~sDmeZ7Rgw0G8zg9X7}`^A
zc^Tb|l(~XG#8))*hh5rqj<!YnT03%{+!(H|6HKpiRVa<9E@!$xQjZ^~C(}8xda>8-
zC)Iry8Y{M&rJGS&Sx?=vBf2o-ick&(`gmm{K8J7wagcg?He5PoOLFnV<3CT?TR+;n
zdiM;x4UP%!mkA&b=N)-?Vlm-GQjmp(gpA=?8UF9|71@0sOj~E!(d&%Z$dJrflO?Pz
z9PUAJN9s5j=hDA68`O73f>6cUS?_?S3FFx2u13DqdY;|V&){2JNKM9*48)Zo=5o9e
zLdr-Z^N#r(5^?E|Eh5?0H7Zmu6T^+?ar-V?+f8<dw3e3kw5d1&P&v~P0j>vQ{_csP
z4x%_*k3QfQP@+ePlbzeS9=@imj)p=^?x9AK>ml}F#Ck&aCvryQcxg%f)m-sw>Vxo7
zq|1axMik^%ia7QuInVVK+uZ=usJ3+GPNBNOk#CbZN|hi>PRCNh0q~MXrbbu(_%&Ol
z>D9kn$5ap+W_-5!!uoyZwAyXnp7vV4Ttq|=MB|wHO3`}rsw7%<jfMuAc`Po)2rX(t
zhYq-Nw+DlSf!{xxt1WGDxOD+g?s|a6X6+g}nsQi=;jUwO%6EZ;sYy8jL!2BO;8&hi
z;mu1nb>-zXCPep^@|$(Ct_kw(Q1%!d{VO@6Ahefd-fto2EOsW-CFpBeDRK22GS@ze
zS0^JIQmodU-ltxr)9O=s0&&s?1{byVnWkH4rPtKEK+rb#i;0GYkp^7i8qqLG6NTp1
zcS*V@L}`sGgqE+bLK5z?K_oPlli<e(k2r5`?Dpf{zMUBA19}m6i<QAjd&Yh<Pbo)|
z(ono4ACV;DyrNX?U2u8Fo<ysp`2du-kVDQafDi%fI{*(D#bh6|X?s?(wc2hFmo~?2
zlw6w3MJp2}-~}v!$!!E}4UA+Y`<&xS;)PZkH3tcC%eikpo|s=3)qm;TY66v|vxDnZ
z9B*j<03ZYx9xaP_h--Fn!~+f@?7D0FH&yLY?A8mKgKsvM7POL`s!D;{bKfI574Ydb
zmUXXHO)bfYB^ZGWy7QZoyeO4~doP6Z=rdaMJFT+usw3Jo)rcvV<-0V=KZe^a6ojno
z<HJDU1oz5-^~G41gQq639@}%W7}6tcOgR?K$N+aBDJOt^bKbs-rdhVm+p}Z1!81Iv
z2Hi$JYogKgmuNNy!-&6#l4K6)Fd`>xWO$PUW#hSO3A%#AH%>*0sMi?F-zE1(TSuSs
zck^Utk6NmA?@{cQD_c<02{#Q)(!3y`Lq(L2)JV?J>^q<FttV9VIjC0&(R4$yl*%0`
zZd>l|NZNTQ9o5coPaeG0R&rFOElOL9QBu~Ul_^KLC)C%id%(fNPkySuQr79)G}5ym
zxXh8T^5jp*c=FtDT~pNexL*eBrs1%7QI3=1D0>y2K>A{|v&xjE5~Zl+N>Rxt=1+Q+
zMAcK?>V{lpaTga=?vE8`mq%V+Lt*HnNYsu8CxKV*MLy3~&2w&Q^RKQ`;lY;Ii3%09
z#5Cz|K386GNmkIVN>Y)WV3W=$);Z=H78Gsj+&H$Fn9Aq;A8L(v>~FJQN~5hzJ))bC
z%8-<$_pZ|vwPTX4!O^ux+yPwU_KN70r=;^OQ}m6>M4K(m)v%~j9S*+{;Em%B05`Uz
z=eXRGoDy;?CsK0+mF-%}wHEOlj|E4XMx{vClF?A2nG~psG>u5oqA1jAW|c~X8jVVk
zsZgS6RH<T!qD3l|6h#wJsZm5xq(wR?iZroO#VR6=6)ISwDB_h$iXx3HRIy5kqeV)V
zD2ZaDij@>a8Y$wID2mS%#Y9xARc|R%6%kStMIlb3Oi>i6)Iq13B9>{?Y37KwJtLsC
zM!kMhS~kf2*ux1j7MB}ow#vUMO59RYxbuX9P6ly`>+KV!?)p!snp(qfmb)yN7V@c3
z+d?1PA!}0HQ;sC<K4l-uPu8lv34g!zv!k&ehio$^-%}>(8Z##@i0UCJaX|JZDM{lb
zBOg3zR!*d9i=L;6ZM;qJ98v?5wy$>75uLdAIjehXcmd?@y3IFBacHbuGqxw}y<Jl3
zM!1K1lVyP*DFLvwE;<W)(t8knzvWt!P&E@;a0~s;Rkj4lpA_oYZ+Md_2m@k><SA{8
zrz6a!)#`cOuFYEAz0IB#Hg3R##9@#Wq@CVu1C9@T4{E}72KavRYeU-$pBpVHcqv0@
z!1JRS_1p*0*402qdzjny^<52CmH=8i&Bz;0HpeqCzCAI#zarCkygbX&S#?2{41<7#
za&wP!R+mSvq9&i64@kojWxab@bc2u_Q%EW&J-ZL-T2_M5QhKs(w#2%vCu?R)FW;9P
zB@VSG1TB_ZJY~=d!R+5T2g(miz_V%n4W~>kDF!`;)f^QTqbJVczy)hr^DSfnl_-*G
zMNoKna<%H-)2P-44l+i6VmkF4wqIoFWK4#!tL~0SdD0e^qc37w1GW#XV>M?;^lqus
z&qtSUDGE+iH^*PZBo224l2gV93Q0-qMPO&@n8Ah0dPqYlU~Js6m2CtM+}4q)dV{GL
zv#;*uHkdLF9FnJi4WN(Z^);KQxx**Xc^fN=qc4fvY&@VUCsb(dIiPP>7#gXhO?o*)
zu-|R97G^M_RNJ8d;VR&yk3y5&Ruy{l@10E=ezk<{*2Jj|V$&V<G_|w|Nk}O>hEk#k
z&zNKr&T8zm#?z~fYnQL>i@CWD8{jSV9}jBqb}2jqj&_szNl_f*8s*PcbpGC`)}1M#
z?XzxAp9Ui^V=38gE7>k&te!KR{cE1oFTX^8PFP%Ganq3}!|b{3TUeo^)n$d%GVnk>
z)`EC;lOzH}98W1GR##DKOP;5(I~|tQrmRgREX0Wj23tcz(FjifdI67m)GX<ZU}wgJ
zg$Eauobs|g%8#l2>n*C_UhH2Ey+duC4kLsmvgXsc<Ah}-fN`D<I~u{s2Wuh63!9V)
zNl+<B#{m19<?7tJu0daM(<s?hqS}`34`JA}$n-y6eOIpGeSPQ3ZNNuuunW$dtxGuN
zBirj&j+wf==8Vzkj8!2Cgwa~lz-tL1S^dG!&Zv+U>{en#ZKoc6N-IiERe|fDPnoN0
zpmw<zd#%#mxa&4+cE_J{#KJ<>2n~O{L08BHdy2EsZd*$8zy4rHuKxgNUOMe6ZL{r8
zI5YP8oGU^#>f?8PFfD)TtOWifg$_s1de*@j<882nMcQ6{N!q8DPF4pzpIXnY5g2b|
zWH!=sjJBK~>s5D9)fU+7cVa*OwUV+6pP3^W1bg$E?OVfH+$2C>FQ>tIP*W{|_v%*d
zd!1vw!eS<(wZXbU1eCWaprp1)<fQjW$FUVc^><2X>p~%1^f)mC?<I+Lzypa1Im3*V
za-0!`B;;}k#t5vv(_J$36+vY#Ey4$kvM`hYa(SxrQ?(s!TW%4fJcgw>@Ytsg{Dh-o
z&+?>#tO}>rEod^)^>}5%GwKK3b($5s=v}d_c>vBQ2L$c3`0lk^h0TVacsCJfONv4f
zx116BeezCCYB!iru5NFAE};s0W=el4{{WqBw-=a?E<8zyDkvURAw$dR56``0?lNpK
z&gg;FJfaCM9H1}Mf$d*A;~?O#q?!z<*djsoUkFwUb(-W6Ag$&U(u;31-3uclzZ6_s
zUE%~~+|cCIL5ifd>RlkEMM@_icg}0m@o^Oq4ek<4pO<2j<=|E|R$GHH-G0?}cG~GD
zEV$THYge{AgU=OjrCrmuxG$@*1bo5!DqT{^^=*SGHeifkP7c$KehI|BTbH9-jRA*P
zxivS$al&`_i3lUP<lvE7wCk()XwSw(j{)?!92=3fJJL=9fb=;$fm@VoT$ru4&D{xY
z4l)vll#nxyNgl_&XWZy!wVQ8d?-NMfo?+B@jXc9?Qk+5TuM8`G2*x<(u)3}Ko2OM^
zk>$uhpOVmZoe`yrJI6FN;s_)FXD~CkJtsL;t&3Y~mCH@3J{(ZnVdq^7@ehUw0E~C!
zfmp`$v==UJF7(5aWxV>9^pf(@Tv~}Fs0?Ey`c;E-(6`+Ob&Teqw92qgb%WrpLt8vl
z{-6)#J;q0T*R$Z_O0_>CNJuT5DcyxzRC@&;$<NNU&0^Oc0mJfCS|_nuPM=NnI2%)p
z;l>@^#0{cmayQ44c8LNEXw5?{u(+dYV=@ZcQhR3y*WW$!UiPLlAiANLgp93}vyh?>
zC!WU@h(ngxjkdVXt+@nYZ3PSveZA`>(v-2iF_X2Y0Rh4ZBh(Y>E6tB1n)(-H%5=k8
z*aHIq2poXgIxTlt>Gi(>_)(vi9v#WQ#t+9yN&rw$DI<b7I6M(b`qXPZ+*>6yt9voy
zup^WxsSUT`r)o;O<PHvfYbk%2rY*{LB0N?ZQdU}4Q?)yW<mEnudsaEw&)w&`{enYJ
zIpV2pHsV3@l6-_7<I|ez^it=Snc6Yu{g)4|ThgOdt^>Z|zkntH&r(T`1@yMuE{Kfd
zT78(FI`RYiuvPy6ja<Di>cnOvm^bHhEg%GkI5{2D{c3`W>(<M{<Iio|WUvB|e=}<N
zW759UCZ)%mab61YLY3q^D1M->3QjAjYv3+;7M4T4ADb@88lulK;L7b&(+O@TE+DJ?
zs)Fl%+S#dkkc$eggt-da9y9Ll<9d|0cIVWkE+;=+dRCWUhbLM#=kSAwM3zs4ZW7%g
zrWe6G02`cG2jr2Fl6zOK2TG>cbse@Is%=+mZOKk6<09deIQRuhZEmQYg!j*N4C5Tu
zi?thLSX;HgyQkWEu6*knaJ&{&>IYQmzo!>i@xWRlP2$x($EEmEY)-nU@tt!DKtffu
zB#h)|9sO%#wKt~bI_op$%UrNj--60g%R7grRh1F_D|>!ai#n3bXz<*yy!PfT?3Ukh
zB3nQKYgSK~t3ITRXT4Q7+hiM+#4gi3LR^;=upL1K3-!qZfm<Lst<F`|HdLofIo<CG
z_{8#^meXX_(zLA420FeDI9>p3k~aSU&aRCMrXlqsL+W@MnfZxkM3&xzEkkOesT;Pw
z5D%FkuaJ0BcMoDY#i8TaX8dG;ZVV@QSBJN9lgQxr;;b&4bvEOnW+qL@DNx;MD^Wr5
z6(b~NAZMO351_A3Am*04VzRg`twGGFKxrKD&tiEk4&`o>XSq(cTtWoM5?qY`0EVr}
z-h~vBlj;sKK1RH??7U7*()D$?HqXPNbl2piqI2Pg94ZOV$Q)OWx#jZbM3~tsRLv@t
z2&mJgQi!B!)M$vLY1Bw05TDKI^`eE>-)0*<pHKAYY6(olRo?e5Ne?ZwxUj=Z@RHt0
zJ5!XYTSs!NpGvuvb#g;x)jEcnJnc(hWc$@6qpX&ReKXK+w(4zh6>ASPBe}6^Q9p>{
z&+1a04ibCu?TY$dH6XV<hT&fteK`qBL=v<8IIG$g?CinjS9fKn({%<Aaz~=EWLcMV
zxe2kQzYZY;I?DuZQoX_M6Yf8yX+2ib`g-GIRqB3^gQynMr7~r-(%YDkv?Mv=HbRsJ
z06Ve=2eo?~)O%sE5w$4}x>8o?{V4}LeCr{s?0Saz1}u#YbBS!ZHt2K1dF3|K=upCm
zARH)XJ+OHOy`M}7?J^egs5Ci(;tM=>f!CgTt{%C;`?BLI9_1}8xr8ZSnMfcMlk>qD
z`R2TpczvTZbSpK@o9sBx$9_xA#g^)DV#!yALL5dvE1pa#JZFQCdN_^PNLpIlpq~*#
zAsIN_enUC^s)nmOH;}k1+8?L5b3lPIIpFQ`SxqY<&c>~=D^qw*T2VE%%xTONt+A2<
zhpKmN$o9>3P0#HOr_&5G3U9_wUJw{Z<w-nX`eWr-xYn%@tvKGC({_t&+$6NW7CIe$
z^>P%oxJK>glaNL;#sC$|a%~`8CPaz&W*nCimzAHv2ymn+N9BMIzi#HaXTF}K=Nz|$
zbJ{xic&;ss{{ZAS9hDI7Apj5cNyGt}{ukCm<}Ln2n=(+!*qrOJ652A90JDG-{J7&C
zvBh<6f}3mV4u+F&xn+hONMd@Jlb4{nN0CV#_9XTvf({LH{o2gimUQ0q`#HAU77;xu
zSw9OaB$TKg$T{4M@r859tbUo)5;Sh2k8rg}T9SYg^Fxs#vV7<xwg}B`+Uty`Q?hve
znGkyU{%^lU`Y+j^X54ghS(QnuPFuGFn}XBNj2+I{5D0>Pn#W6AbdIB&V!sB_Er$a9
zV58y5ZCs_)sPd$d&-Dic5m=^@(||DA3Yo|%0b5I-GJOSf_fYzEAF4V|+kDfzZg)Fl
z1?X)h%zSKBd5by7^92G^lizUTb#R`h)VB#sl@UmC*aON#v6Kp53Q562^U86IZT_{R
zccWCJa%r>N<bOG?um1p-TH4xiT;`z12;7m+pa<8U=L+VyYU^yx4C@ZL@mHNBg5nsC
z=q@hW>wzT&c<$57NybSDc}EycQP*v6bGof%E~W!VfYTmRkDB|R+ZC=Yl{TD|jkVFg
zV?Kr2y3MaHQnh<xMxE2FH1wE(N>9Z+>XaI7M0Q7!YCM8=fygHt7Mf)XNj~(M&ne&M
zC)IqbQ1+iuxCWIsc2vnHg}C1*JD)AQIV%4EN_Fc{=#HM;w04<lJa#TmIP9rQCB>_F
z0N@_S10LTj){UyQZP!`eKJ>pnnG-xF+T4_5%7KKBbAjq>^;4}MXReN2w3Bge`fksq
zR<}bCE;fkGL3yXw`9RyXF6Rfxyyu)?@;@;8snbipNj03^HGd)1HUrTmwvrl|8Cme&
zZ~LbN9{5mFdxKXly5e_WU628f41j*3S2X*ZnzR6M?tBJ3w>~?qJi2zB%2Jej`hQyN
z{{XQs*`rPMBG+`+9Y=sJw#f574%q?4tqm>21g*!G1~;T`N)j?sPl>o5D~pOqNmv=j
z%Yk3Bzh_G;I%A<-Ik&|?Z7Z?Hl(F0KA4iPg{nX;C984`omk_9rwD;LZKwR|9%f5oQ
zM$($LEN7pM4&K;97ZB1nmV5!_O3G4psQ_f0D?DTKS9fe2iv1hwhPRh*`%_t(O!m<N
z-)oH&w6v|wkE_LeEhs=fW8@qTc8u^VjQ-HNW-gTL2BnK?h?q9XPNIA!5}l#8q&AmA
zLVrjFWjlQ_ims(}=UzI4wk-~Cp)GJeAc^uJZdJ7u?Wxvj-v{bFBj&4B4-XqiDOaK9
zy2tG2_Aa?~e#XwL*LNv8b4^Jj;8~2?OsUO|3xKOBX&hlBrA1tv0ko=(=!Z@n>gQB6
z?vP8avlihXna;I<rlTPxZm1Fn3fPhoNF#Age$QLtTlD>=BnxwGTkSU3$YF+ul?*c4
zKuSh?1f?VTRe>S7JeH%JVj90K{?ngjDP0OoTmG52$iC?rF9uZW=tz+T)5;R*Mgo$o
z95@0-M$!S>yGFHrq4m^TM9X!~=I!DO;b&vcV+&Gt<zx(~bDVst_}Betoz`6^)$fUM
zKf|rWP_#rWaMNr)%Fyw1)lMF9`gk0IYmL&V<vB+7odo9xxUG9j>W+O@vPTP}%s?Q=
zs<)-v*p`-5jv+r$wn2sJw_dJRZKed5nB#)lysG-7@M`kurlFIp^nLcr_zAu@J{+X7
zUqfbF06LYFg{T9ttptqrIUS8qQPAX<+m9WkzWc5OG=`E&ma=dX5<8N60apY60A;?i
zCr+;V_fGDA0+z#yKwBnO-~RxW3-Pn^*`HijoyDa)fsqHQ&X%crYfY@9Sb*0x!KPf<
zYlDU)a|2=zinT2(g`%emtlOQk<#C9WA{+=0HzYFo1v{U08A1Yb2uM*@aoAR$HI%f=
zZstgNIVvt6D$n;+J#+8gsC!M?ZJqxBjI>D&xCR!|hElZq5O_c5UE9!poK8)RI=84+
zVPbwT-4Zk8gg1eoiCR4u&JvO`IV5LoRX0YhQma`^$UB~&oS}U?MD~{0wzcKlo0kTR
z4(Vtog{<BHE^#5mxRP=}0Bzbr$c+u48@TGHR=K7(i*if*R9ttvOp<xSY3?(Ol^UQr
zkJddwd(-K*LX92;zD83bWMz`I4_3gyErJho+#V|})h?t-)i<|okQU=Mm@Z+k9NML?
zKbb?<=zrl_Sh}O*o0BnyUvq%;cagc5!0weJ)hZkj>FHM&db?~M+e=a0ZV!)G`<`Zb
zD?k1_UsSTF`n3xx)W|(N4E5Ut5F!pCYn?yQ&1+3Ui)^XJ*9DfmSKe)~w>ItxN>C3O
zB=<Z34}R6Z^=F|mv@L{c4J~?+b+)pkCTwZRY&_CbLPM!i018gx0ZsuK2P9^_N{M9Y
zDsCFCEw)<aULm2oW}T4ce(y?@6t|vp^LRl?!+9HsJm<L4ZC8y$)O|x9$9%gO_Q}f3
zz`}TDIuD4locj4d8TBHyO~rb(dwNd(kcsk%J~Q|i<}2EF_Lq*51vYQ71OpB&Bi@1t
zk%<wwA!z4{jdnh(`!8vG-iUrjP3)H_x47&VBS~gc(vc;^qj!YrR-&IjY^MYg4{i@S
z!{~QZr##CnbmLPc$8ZzlLJXvRR<#7D_cdv6a?6(SHhosjwaYHs#Y`VizFi^F2-lk8
zEIWjCKV^W@r`+;(p-m(5w556n7liwfyA|2eAVNq~>oGx7i`^kCr(=7G2Y`9N002Mv
zR<F^{f?c$pjFB5q+3peb9M{zJ&8ghmXK71Kg(roCB$7{U%T_a4dD=@{S)5v}T5@dI
zy`60>d6n}{YoxSmDY8k)UrN!bQMR{|@E&qRjkyi~0I^wV8p~rlBu){$KR_~mm7#Tu
zq&Kdw>H9qGEp>_Uw#e#`h!T=f@y<Aejj4A#P^>2daKS6&q;pvZv_`d;{<_YYxWokE
zXjDDV5$-v~Sz2lh-rWtjb2Q!Pw1I-Jg*%VW>t5A^A563n@>{pmXjQi?YleCe=D#$Z
zZPp%niA=i|OAaZg*m(sGG~!Mag(UKo0tg_~E2KWry)D-ogQ~Lbns-27=P@GR7vd#D
zx2b86_)39Vk8S%x5`Wp|s*m(3)c*kbx7DBgF<<kl2M!WK`K?-go69C)Xtao}>-`FK
zKmM(?Xa4{USN!RJp-!lO)wZnv0O5-N0G&eeS}iPA_5OtVq5l9@+Oz)vhAaMc2f8uT
z#u{<y9Xi!bGTKVkwObSdQU*yp`%xB*c;xX*Ab>#xA5mGo85N7BuhQ{fN*#?Z@d2k2
zw1p*TT$aHE9ta?wJwdB4sy#LugRAzqIwstUCBIr+UWXZmSpkcDxbl}0YCuP1Bf=7K
zfrLCN6vCzf3eE^P<AYx{y4z<9aS1-fKvl`sD+D|4rPD9;ze-AG(KAX!l^P|s+P7Tr
z1er}X^TDJNTv{7#N>aHcSjokEbe@{lZ}hIf{{T+(#kO_HT7vY=;mNiebg2mqh`tMI
zGf-5WyPfi<7|F=(Nk~+O1Y~oXRdwo4pFzF6sh8`8i$z_u{+x{~Sf<wj564V}To)Oz
znDJCwM5VA;QkzE96{u&!%81rl>F%0pWv1DB*0Qa4YwJwOwxL#L+>aVOo?)tciIbL8
z>J-|_TT8wYTuD(^AWW!*U1Fkm<nSulk<#dLG|r5&Th}R`quljv&c!A(_T;6X9i>D<
z+Hyi(RvKWqr3Iz3SG{>kc7m_Hhow-b-)-;c>(u*_Ew|faa@DA`nxaH~ho>~cB(#$1
zymov?8VY644QfN5?F6MDs(Zg~X&SZl2Tk<monqT~*Lv04S~Udgl38NUrxN&x7`Qtf
zZn)Wf0Ssjzr7iAOGLSr(Rd=YYa&*3=z1S{JH0;|w#znqD+0TZz8F5G|PH=Xexf$mM
zq!~~|EM+WIsZ^*@qL~z8h@(oSOB6)0OBEwZh@(a+;+80hQmIjjB8@Cmu}X-eMKeYy
zipmusQ3joAt<@@(L{kQeRE0W?FldTE)2P$U5lB{dN9fzmzP`0%(-Bc3V%t-$t>-*8
zSY<d0amC>6NXQ+DB!B^|4P4)5>$CRVNvRuw5zCC}Hr6}{t&FL{mySvP=-e_-10uaC
zv$S|`RqsNPtyQ$gHG0MAcY&fTaPRY&pQ>$k@eR9^PQ2R*N^%mG(dq&S1gLY*031~e
zu9sZ8Pa<vd`6|sNsYOR?6IAP|Ao06;Q{^KavyRo&QuO`V?-FJ5@bC*j0yViQB`4R+
zphgGCS1k2Ir@D=uW47sfRo=w%@Y|=#>q$~@P~&;v^ZADd<an#r9uOeRF6PDMu+aW4
z9ljB{g;iX2mB#I=qrUsU0F<nj8*d<}9>+e_W9fto)$P=#6nn+p5Y!{fl_0cQPIHa@
zuu0=0w42VEo1uI=V}d-`&LvL4l7*Edr0}c-d6KM=l%B`7M>UVOupkE{F{q4LuClc)
zB_wXa{FwLl_pdh84s;Wr&a2*)(<?aBbEVtC!5)Su(~{`z6Da8$1Cd@^>Absear=RN
zVMLOYrL?6<Bou@vj(zFeHEb<VhvOT9$pZ^YRg8n_T+?QqX)Q3h_o+8sL3^Ckc4MU~
zN*ZM=8@x;$fJS~`cB_5#S))yRPwDH#C{ohji7CkqE&Zoy!a~!6qnr$$!=6ulnsq?L
zEt*vt49DMm@|f$o#%rBJ_iU)~p+pmz4Q^Ok$k<1=JMmalPZv9cIhQ$+n}pFziEqT=
zUc+y=#d)<3oz#)wv2yVmyF-0Nw%>$HgE>E-fU%q(LO3<Aw`iFfOA&>+#vgOP#Hb^a
z{dxZY8uK-Qd{3hGbDhP+0bAwERYlel(PMdAZA(JgaJIdxDp=Z;XY_z@dH(<^(=AY6
z=vJV+OO&aN&63khvZ;)Oyv%hdmF-eVN`kheZcm^i-k7poOU@ys#)}$1ox&UgIPa6(
z*Q)Vix@vtineWMF;^QcF*JA^@O+^Yw4iV}%XCQOxJ#kB`+q%6YRL&wm<|pi{uk?F;
za*L=}94{gRvxqYr#1n%c?;|_qwI5k+_p4HEuFGu<$sj(rGEmw_Axgj}g<`eqWy&<S
zlENHOK+fk-G7rr^QS0qmtF{>M*28cZZ*qp^B>(`w_~N&FEt)!5T&uguX-Q9!l=mtp
z13xc%;au8m5lwV{#rru|*_t&d8k|jWk^nyRMh}o2hRYy_8i^pShk-%zZ5$kSKU%#y
zLwSX7)A##34yl)<KFpxuUJHPyY2^BXjDNjUR8nIXRNG!Bn4~Bk06x``vv~6!OHf%3
zA%@6aR7T;RQfq3)<XT*|sS*P2H7hZDY-y7lA5dgU=y{sm*ln#co=O`|aOUpyqhBtu
z?hvI-WkvUX9l|#pjD(Uu%Bz`fF>QI(OJVDqP5IEupWy)ZDoN+%o<(Av)YC5yDmV#k
zr&3!?c83K$j#cPAIIpMDxusd0bci7I{P}Lacqtoq@HxCCV|4BMWa#bv?&R4{xV#9=
zHWHN|Vov~lYil#^H_1)Ih&%?;yf_e`tYd|9+Z<y*D!^Iou0gmf<L5+xHx)L7o>ZU-
zNcY>g4Ahz)9@gbPW45&JDoFz*pD@qwT#vLD6&S`)<Z^stZ@Ks`o7wwu52*dd1p3Ka
zuTQ#QuAu8VcKI%@C9d2PE_{~2TbNP88cFOFyb=i*0VMN)4^=~NNA#Y+Ty1u(C1(yL
zrO1%rZ^dzE$`<PKrKsTdCxPe(9Qn`=rC4;e%I~Ic5*W8LaeWdYPI&O+fguHjtoGmn
zjQW)h<Y%U(LAPDmZMp43p1^evHr%-AbqR3?C|C*v1tjtmIUbd@quJ4Iu&mK8Jo<Qe
zesYEI-};5E>NWL;*j6Q!nGoHBun!r}dQ8Vij1X6oQRvGirjDz2pt3@r7@l`D5T?(m
zO4EfT{J|B-I{yGkqet}y<!oj5rAA}Ib{gH~Wu>GL6n#oaDF@dXuGvzyf~THJio1}1
z#McsQtMBp7q|`UWK7_aNUJNWN1V?C;ppSf<tM?VJu2G^W2fz-VT>7hD`eS*1{YtIB
z88kx)AejJ?I7l3c&zPCmFI9rp#<bLNEmuh13`Q0t$WTz)mYXRnPTzI#k@Hn_!+O#b
zIboCq>>!=^7#|_>u1eBZbwR%eWV*LE#&Mh_BrQci5J$h6BCS(%gQ%Kq%RKc%kOmZ@
zj(?%8pJ!>(eY@TMY0s2n>Q~dfqPFcW7}xutW6baL3i(c`g+2r6mfJ7D+DhAy*jg3!
zN`VHk`c;c{gH9&hZ(u{VxRsLuNeXLf$t5Ho&ImuNKGk2??eecsz8UAhWu=1hlriFf
zYR8>tkv7~D9cl3h85zg}<&Rptt3r!iF`u&GYtf}c`a#eMk~w2z=aRlrZCWuc21b?B
zsclKwkGh%d_1m0RH+9a{rR+B-PiYuvvddG?GjNF=N-Z6rZE+|h?B^*UaCpE38nGr^
zCF%Ramb;)*T}c}b51cEp9{H-1sTWpnI*oV0+Dvy;mO^p3Eh)$@ADWeu{VIoBqit_&
zI9fQIap4&!?drPy0^X}HJ4V!TY!Y%{&eNRr^jdYY?!}>i@<S@QJld4fNb;d7?ZM-D
z8OQR2?s(9q2JQD3WSBB+z7k8W?00%lGCckJbLm+()NMD{()<T67WWmsu$(1qpXE99
z9+j|I{_jJQ9{3X?T$Ff!jCX{i`4SHRanGr*8dsK<c1`SvF6qvEe>|7HdrQqy=!%1e
z4&-1CQH=T#&T_9#l5}fM>Wwo8SM^fj-O}GJvg}Aq$VwY1!Ae&1h*o!Vkc5%6fx9Ol
zQoUH|vMp04v!<>pBFv`}+T3us+?EawNGJP14{_fFdsmrSO4P&3eTz$NA@yb0pq~wA
z+@rN@&<t?_mK%zfoKWxrRh^&%#s~OUg?&_3Akzh>o^j<7^IG;^&EC_gS@-qDM!x_x
zvBL&I1eqQqpE6Zd6IG6!USPGSpOtyH$+t(7EO<bvi4J5fBqM+c8A$Ji4CK|Qy=5C-
zX$k1RqD`s`ZnE<(DLxv@h$`m?^nk2>^`6oeduEz?;M!XFt1ac9guFx9;g=EmPW}l}
za(0~L5s_8qw$hR`t;tqLBr4#<v~GzlTqZ<Ppipvn3-oaQk~rYh+uPc{r|PQUw=3tD
zp3GTknu*kFor!P)a%TX}XK&smR`FcBTdvcEo_bu46mX^<8&nV1kbUbRe1$IYBG}_j
z_zW=0QuBMtRHt_p7c<#iz`^a0om}yL&DX1yjW?|=I>maqlqE(4cGSa)PqH3f5TZU|
zAmH=wr%&nrsJ67XWZ9i{4ZGnl;NNOmkfLxhmXxIdo->SRiuSbC?X@O2*}OP3!QThO
z5D4%)9!p-e_0!l}O{5LaKTiO)=UsK;3yyXe%2ENx*SW8r0PUXG<mZa^T&*`dGElqK
zs^x1!{{SMUL3Mzyp;ADv32^}h!ldj2JF~_;>t)Y#{o<*s+}Eyus^WbA0A$plft4Hz
z+_d*eb>^#x^sPOmC(Dk=<xVNM<$PxdOR7m(`U?7K>tuT&v)x{s6?aoGDNx)B%x3nT
zyRtF7oF4vB^RAP3T0Ln^nq`UvW}AIsG8W4zN=U%qkTRq5t-4l@sM#v&hKW|KAomz2
zVe`u4i7dSeTd=3ceiYVD9gQWGH0lq{3IK|QcIR63^F2uEoWh7~Gk&)=XWN{0SRl9N
zb+oUz4mK1q+dFgE5yU83TtXI(Qly0sp{;6^%{M_*wdgwC{4P$F6jlpeBTAhrA}Tq-
z;+dsI3dPf1Q~SQlY_aMH3Y7-j(2o`P%EHjjN!p|z&5g&DkbXwC*i&q870eNr9S)#5
z5#$o0>Q7>k{{TOoQHH&6ZqseZakz3;h8;;ujFXfo6Q16OBRLo~Wp8@wU^V#*sna#;
zmVi>PmJOf@AGrDXtJyaR=HkkN*>*Eya+-bI0zH5gzF0b-%BMLIHs(iwjf!x|1P_q^
z0Owq}4^X9$j~%&N(yZ=n;e+)_#%ptd)fPlAx!!Io4J#R#;|d@r`@mxg9{sAxw=`-9
zE?r}9wCkqFYTr}C^@V@GZn<l%Ie3LGEOzZPTG;YlInO!Vo(>d|$UcM$r`!88Nn+a_
z+updgL6qa+3ra2SI?5U+g?NQX%E-qU+mnse_s|_+lc#QOu`b}um`)(N!>+FZKoAN5
z_rcHXYW9_@Y*+gjc54x3vhEYL;x;8j@ssE?UUg`;yMd2_(Z17}b5*6xkU!JEuU?^Z
z#mlC>KGE+#GTo_lq)XgGhOR}}?Y7J5?6A^Nl_x)-ueYsh?}+_Ifj;4AjD~e<f9p3W
zji9#O)B%Gjq-5=McT;194>0p&D<Rg#?w0*rn|;C`!a_NIC}}}VNI^MM$yccK!Th))
zv|D8P5acx?-nSvV)2Vr-GH|l7`A+XZJNskPn)$x3aY@$(oi=c_xbZ%I9S5(MWu|*2
zZ$jOd`e6*Y8EM_5b7QyeyJA3=?%aqkPiiT;W?JOJS`>vR!hS2whZ&ZP^4o|!DINY}
zJYd&{s#9%xFH%j7W=V21gf%7$3R&D4b)>kR>d8As{k_RJ{p%~LwXTtp>YdcFE*6`_
zg#IJ8B)0QwIXj#zI8m^ify0<MBqVcH4^j10eP^t0H+y_l!i4B$h>SR(R)!gA4L7)s
zHx!@~jxtUwUe3_gaCJf5`l>x++85dCU8SWXO1WWeS%N3Iz+@8Fxub|Q@@a<;@~Z<v
zeWR~h14m4^+RLtAS25MbdBC5AW;=;a=JA}2C@Dkh-@R1Yg8MI1-X&fyPl+?-6!@+r
z1f=aqNdEu;Ij-RQ40InxYP}<N*80}X4^d4wCoS-!+!{;q*ln~RseTf&lC>#kl>>m0
zjAZ84>z~={q#CZ_0@pg*6Gv(Z>^is;?Cqi|mQX+;Y~VKV1!yO-@xV~7uC>FPL~$PD
zen4|E$aUlw0aEtn@!gZjao^8;o~8+3mW~Xl1gM{_c8~s!T|go0y=|wIl>Y$rm7$s2
z_Ygsj?#-ZfITA_ztDSna(H&ROo4au}R7AUPm6L9|#wBs3q<<>ArDN3!!iRhiK|6og
z?^dTteW0|$q`sCSUHofP>QVf~<R1w?yQyqeyWRyd;gP@HX+5$R=m*-q%)7@$C(UJS
zw*881ORH;pI8TJ=3RXZTgsD}}dWTCf_K@i6?J&%FTK@n~C37H_8d?$+jJU?-CmS9d
zjzA6s^WM8dQQDl;x?@pTBfet4af1A2-%!YDPPS5&<K&~;p4G>l4b&3;>9)^dVG^x?
z!Mxj4;X<P+3n_6s2_-5@#^I7dO0k6Ys!dLzZE8<w$vxBl;yu&g@eTg~mkGofy3;8(
z=7mdRzT@rn`LEBSR+JEPj2w?|t$yI>#!+n28d3uZEwdKS9i%7FB`hETUz`5`Z9b1P
zqjhUK-%T)<^!})EW=a|!NY?@8aU=OdiTpq^dGP?i09WZHya?=CnL!vt6sH*^@Y)9l
z+O0oQ$A&ql4h}yhNGX{h^8JeC4x+?5i>bXzn%wu;nP$92N((qn#@dG+#Ero_hb8Rt
zGuo-Yw#J)^glIiaY>q&g7DNZ+738coq`1!SUE5w?Bys>Am1}9clXCvmon_PVl%@Pr
z(WN%oPDUF-8(I3{<o^Iqm3;oy`hG>v?B51rTyf=T`<zEzDrh8ZJ|tpuj(o~&S2u1S
zPf>B?*W+x8tOwu?GwN4EaZ$CjrvCu99|@1A%|rhHM`nj&2A|dX{%a%RB)*$OC8;DS
zEg>m!?0OKTDWUalx=*Z{ott);MSwcuZhDco*<maw1(YEhpHR<Xf)W1Hi5|52MWcsJ
zx=o^ViEJ|_90WN%3MYrv_^<Qr;;ez1rmvct_{Z&SceEwaVCg+4@VgYCP$fuxg}9{g
z+@-`I`u-hm>sKUL)C@T-C(~i`k?>VkEDX4&=Lyf#@>L^q(kas&F6wN>qDxA8EQXu-
zml7VwjLJ$#Pjve8kEL=sXn+cGrDp*EXFT?<@9W$)tp5OKeMsw0EIV?N*3#m#q8BwQ
zDFhDKZ?<uP>sVi~_u2md@2A=7mb7O!i*w~x2+K}>B0>oYl7G6|h7peI1o5zL_0q$`
z?s&Hq9N+vvZ`oMt=9?}!2O*C+D&G4heU;(##@iQKbpi@xYk95ijS=)ENwl_k0U-YX
z(~vyN?vQp2d5W$+u646dbe0TPFVjcIPTnEIX&c>mq;s%*i32A9X0{DYtD))W?8vyS
zDU&VKu?jv<i1NrP2m{pNDp4b{K_|6vA5vnkUiE=jJwW4fS&y};d0MtK$R%n)3L^n6
zg(!sg$?j__y;7Yzub{*3wa#%Izse(&@es7EwCCJ^Rl-Dp9ZCI_CH9AQG~TvrX;C2<
zD3v@&TQ~rr*Be6I$R4}YqJCu8r%UzEQQ7Qr?H4)I?yZJYn{Zr@D-INp6tCvNAwxMi
z6<+EalCRg>o!Mwg1o>{rNCO*Er4p3m&;fu2cpEL_3s3GnD(23mdwNWlcYpx+n9BF1
zUG~+Bs2&h!;h6XXiCey#*H19hFf{=Vw2#APVc|`a=(Fwf{=W5g+5>u0#}`q~X{mQv
z?k&4JQW6%^J{|((s16oE@}M3v3c0|?EwuY+cWRWCr1!z@D&?{3y(4t8>8oy{x!kM|
zSzvq!EZb8pmwy?>hd21BQV9-Vq@<51!St#->k&PrCi#WY+xtxVlqu=@jYk><(C0UZ
zyMzPWJTl@OctImPJWW3Iw`Ydc+fd(>h7kSE?LBx{Qi9atig{5djkp|><p~_%3d&n_
zDKd2$I(stRF8dZL-gT9&#I&}Pl{&;832^xU-9RG00V-JovQv?hK-ADJ7I`o<h?xAT
zsqiFRWuXl@;AbVKn?jYeD~zb9lZ;?zHHEj{Ua`xKcD2s<3yc@TjV(Tk^dtTvs;%pq
zFYjfiao6+vuG>@48|_sd3XJS+=?JDccwFNfkU%V^Fasg3F~niKAmNkM3+=|#)CIR5
z;vH|oh^5Ez9c;P42;(I4!1u*mJrC%;<4;-c+KW<IRSnrJn9W7IFch|$Lbn$KYsucC
zkO3fZ+c~VKN_u|+&#JB(!&d3{VN8`U%(F*R3PTW5=1%0G@RjZ=2@3qF0Dv=FZm-sE
z-Sq{pPcCcFrd%W?xDewk7amU~PC5Loq$Nru<MN(s>3V&YDoquDfODUh_FpT~eV-a_
zV^XMSgVsk*uxFPn^;pO{iq&wAsLIp!hYFNJ-}nRtXXoYOwKt<%*w%jz{jS{P7F$Zm
zaiEksNXmkE$Cr<K+b&n(Xr8z?7meZ>Y(C-eQj)NE2`fT~BaHFSrhC_d?{$jXO~`<h
zE*{XP*h&JBjDILO=lp8?G#!_HO4X+!xIEP7+L~(Ba=F9OYDKCXRmzhjz(GSyq-9G^
zc~>65nxgd|QmyZVr%Tyl_`7zlbl9l`k4=pOjQrL8D%I*HtDpXhwRETu=C+AxiEWc4
zB}zkWJiNH29?1nQ?8)QK2d#4<{*_gES<HU}O5!!!`qs6-Pf7+dV>$8sDNS3K8BWTa
z>yJou<!jzkpFx0}06suhoW*PZ0KR|km;V4d^cq!ExN=L3la=TAR{sF|=l=PB^Q2<8
z{{Y`V_sjnPoq7!_ELWf5TmJy>pZn$i0M3`fx6k&35rPY=AdjYN(MpKD`gZ1v7NW9U
zTxCzSZn;I6wveEeEiF8U3PC&qLP#0on%+~@#J3Aywu>^AI{kK^aj;EW!+n^~-ptT(
zjpfLt2pHijM(>?g#+5`VmABsdg+60?SNMKS*249dOhd9h<ZFW2RE09@&J}{vl6Dg6
za23u|pK8Qi@9o|+cAT)uj_cAbS39id<j7cbK4tti-uYJH@aoAu_YO}rg~b&xlC!#h
zQL$puy4K0?Ds<{NaAP#K%20+p38<2yq3gIKXveAMws=~zLtNFTF8bEReUW~!!-);}
zcGuWU8{2Twltoj{IDAOT4WYK&@X+8`MpLkpRm~JhR$afV&akUZ{&Z;$Yg;z5m#L$;
zz-=&P{9>3?mYoFnjsE~(LP`R-bDR;H$u-q$EuL+%RlZ)n)X7ES1otCqJIGT|7>^~l
z%Pa&sq`u<3J%QH}grzwl8;(;@;*~@sm9}*sTD7k2wiuD%Jq1?8+``oBsb7ilR~Kcc
z82(ha5_8;+IILc^zPGCNzNyqP*m5futHis5Y`Q^PX?4{sB}8$M4>+tgDOBvCMvPO%
zEL5n48Y)z%kfKE@l@%%!X=0^{R79~#rArh=98rpvDO4hjEL8DJ6h#_UDp;hcRxqgp
zP!%fITWVm_sEP$dBA7JlH1ov~NE&q-Vv1#ZZC0y=`s)hQVv4!fInIV-Fpld{^(XYC
z07{g201|swTWJoRMd-D%M5q&8x?b)Kw$;K~f>PK*a;=OY4asb)xltusQcgG(&;1b8
zEosi8MsegPb;1+&_FPs!4c9g)I6j-aGLQGbt8-G{ZntZTi}=9IV#1@i*cedl$32K6
zHEm%*ul}LT71QXpEv|cKL4&gN^?R+jTNZ6BmlX1U5#^^lLm@fbPtS_d^yZ@%tvB)7
zlsPs^q<D-YoTadR$32Bt+M`iFb70t`$$h69QEaW&gGJtdF8=^yUfYJPHVrO_7TD+#
zd>;*X^9KHWRf|g-Ba-XsGKD4<L;>;mthTVWzp3WhOAkjyt#RMkA(a;dcap9G)A_ck
z80XM~?SrFf-7`N_-c@P080c}dsmU+Aqu{X8NCm|ZGC|0|11iYJ%gv>AE4Cym=7|nB
zEek7c(l&(?-;YppinW~7x-!`cAeQ2%s$glL%V`Y|2`UXKZIHE~Ekx}&s*Bn$sY%r+
z`_cL9(Q^9EpHkx8)$K&o0&~y6`1I?sJl2tXwAr*I#+|m`;@&O^No=s>0>C9ejHN+J
zBN^i(n$>iDhT(X=i*u@Nfh4W_g~<ve$Bd88p`PcE5<8VCHS+3pt|OX`-tC^s=9(`M
zOK&Yr$CR9dxwW{WkfH6n2kJTMf3wz%vf1={^-iE_6~<-lYFu=<q&(9Rnp%*N#!^&N
z7Ng%B4hS{J+-t)|ur=<9Im2KF5_tjXGs`^ixnF0s8@>@n<>ba-fY%A=KfFoiwJ9HU
z!nH(=YI#h2D<fo9fKpjVz~z0;6W{0cs<P{J_}MQyz(a|3cnv5VtzC&H-mK2L>U$50
z^A-kTTW*SMsl`V~LSAh@p+Iq*6M{WP4|=3+QVI~4lvJcB@<$)it1b0U@hUC2YfC&1
z<Hz}5eb6qg?`XI)Bw&LW{tqShPM>APY`L`hSy{?UZV{Y!1QX3<C2ET%oh!HLq&mlr
zw*E2V*=&TRS=*D|u_of|*Fq#I-K3PHdJmmWeVr>>9NG(*#@|pYp|jRqKo-^Sc=Ph|
z`Yi7>Zri<T8p3dKi13Y%*THyTrPC%u{u%I=`pYCIj1qByTa}hObL1i*i7I^O6Ohv^
zDaRIlf>H^^WIB1ICUq}U#<jNlcF0iJFUot8QrJ*V5(fojs9+zN^sc^&y*1M7O|A=4
zTCl^oTo|{-+*G&cOmOW&R8k6-wH)$%sUOM(YguWPbpmSpt?TvyQTs#fg`cv_ZJSzZ
z)`5wL9b91V$O$K$V4gs{Sg!hUxaUz=?p9WwQTS!eh_<{!2jv+U&#pVylG&)5Vk@X+
zpdL9HQ6Q7*Yq~D+pxvR!v)^Jja<@w!8`0iI^sCqQBN+-Df&m7&i&N;kewWtQ{XVI?
zquZu<X>n@L;VmJ?!jJO=tON4~qf^qKU<1RYr9F}M-j}rReYI+Q6<Ro;83Y0bImjeP
z@t*;Ummv<7%Xw>2Cuzd)Q~Uc=Uxd}%zU&#!Ft#GDLQ;eQxTL3YQ~lxzBixE_TB1DQ
zT2k||gNOtnVLQg*xB@`{<2W_<V#gj+>S_btWjV2w^Wv#Q?Z<o%e3RSyR)v+-OG=^5
zI3!5w7jdXtQ@o^D@sKcjA5YJM@-ug^!-i9Akf|40EI8ZGFFVqLk_aUBCyqN;uFY?k
zJ%CWqb%d!~P)=2kQ}nN8@1-lS$BQBaYpvYMT9BB9wIyVLFjAn8GIwNP9G);eYh912
zrZU+P5MwZWjxrW@q#x2V=Er{LJ+e)0>i3Pitk*O^0zUpdRd$HVl<1I1l6h=7dCu$G
zbhJm29k@>*6_w+{BoWW^Q`5|9tuuFRiyiLmr&jUWhQ1)Z9D(Rtb1BEtysR{*-E`nG
z99HC~*N>m2d?sAxI{Qt^b=ML>N)?UR12{iEYOaOVdslH$d2f-0Z>VWD8l^DH+AXL*
z+|Xmor=qa+Pf#`Ni*UEzHDfF_Aqr*4mUyM5Nl$M(izKH%+#<Ddw=Gekg2EVD6ZsEt
zJ*!?}$t!8}spYut-c(PZ^yad5yOdPNTT@$8vQ(TL_cfi(^~LMBtG;9NVTG-v=z4aC
zNYk;R7!L8d=_Ha&Nr@&oA$MOD)_fwiR#XZUaCVS*$F?hCkt+1v%F4Ks<0YA8w^kCP
z$D5Q7t_dEMrwFCV2z`dbBm$y+h^>jJ%6i>ter$#tklKpjAo8Nx6}yq!X*+=R^{dZk
zYPq*ArzQybf;aS$>b14%VbmJ#VE%m<S1?%nm2zP|p9#Mz)9RsHJUvSV5mB|!PSL^6
zYnN@h=4HA<1Vtg}Tq$jpVD0w7_N~5OQ0=#9h!GfZl^}j0Sq-Hl>zeutn8yzBUp%d3
zDjpYSEA7{Nlj*uy<ivQl<G^0m(s@IEAsF}1C!ax7<LxTsfgKAuN&(!FjN^g9tgfZJ
zuT)$E>PwR2#f%tZZ(st6Cmw?*kB}9In6Djx&Ao{q6tjbZ00O>Usa*c1<<1V4j1M8x
z&vo?8D$H3~vY8O>e`)d<SjR20BNFAoNoyqRJ5CkyHL_{RkmDq}_)7OIDGDeA5(gmm
ztTc$1S6c9;wxZigz)8vTduQigJ&{>MXelI>d6AQpoO@MkPeo+*wd{%bEse#deayQ7
z3R{X$Qc#5L+wL*+=DtQsqsehDoFonDLcJA{$UgP&)6HYVeWjojr+HFNc8{KGT9&sT
zxGbN=StN1azH%#IIw5PdyhOBY7SM~yM0XV0oKvs9m9J`ok~Zhl=uh>mcUR$0z3Gc-
zw9JIemLv_#zOdfr);S?(@_~_`O}+b8v^5HCQy{G6wTA<0@jxg9<P{U_E2R2KskDXq
z#DqU=w@llXoLt!Gd27Z;JF|dCpuhu)*VHwtdQ}e5^vl7-4xS}&zS38-rBC$rM7i9C
z<Hz>v@l;n&x|y!}e?7f5e$v-baB0AXJSGdMCq9lNDJlN&IIP~VwBO&oNYqdvd@~a7
zDwep+K7~4l&vLSpz$zq!<m0)mi>*2*PieVBQrqQRqgkf1n|h%|aH*K@_DhQAB|Abu
z1migQRb-28(@h&%tTG(bmWz@cY%VNyDQu_>#V)opjt+7O2M5}(eV(VIcB1;skm~K*
zBV(E6Ac8mR$giJS+}T^*HrUqhyI@BzJ*UEF8$!J7`r+L}0k#)DTq~3$63V_IN)Ckc
zwLo{k6^UO(Y?qx!8&KP|A}xaA^KUnARk1F#i39@T(xSAdX&|jB+CoY77!_OCprYAq
zx!i9Kn{1V>EVCKi&ApA;SqSU`hhm}$9OD&fz`xqAH(fmPoeiP3ygvYNkTNrYUH4?#
z(IaJlR?3~s5Ixf)9OLQoR-(EwrtW4sH8rX|;V~4aTP(|QpyG(-P9R{ZU+*5~v0CFp
zH3vybS59IGGN1zT;5{X7HzAaQSF?UfTmWPY;NXt<teg7oEwSd>h!*maJro8$m5b^|
zuX9c5_jMxHl-rXH$2`aLKBmZRq3%?*00*{xssk!9(o8KHY`UjVInIINagL*Gtzm{G
z>$@Gg9GjY<v2?b|PmLK{*2pQ?l_VYsAfEWoJdO=>R=Ckq`hBRJvfSKiN<1XJ4r3`P
zZd7x?T0!IxK}wVQR0!l?o0Fp&$^xyz-*%I+Z6OV*NdW~Tw*Ynmv0rG5%Mw`A7O;f4
z^jGD+#DV_+@ahRcPti*N{ZMPh_LzG+LCI?C*1^>KVg6r)6ZOiYs5DYFOt_Sd1mI+x
z3M<=Wi5B61vctLUFeO}~vnVNBL1j-ND+Kxtq|_kFu)1&1+s?kWOTApBFHBgQK=?UQ
zU@gT>SsBY{B{^sg?q>v$6P`%I>duerO&J<Q>!qDi?Cg1s$`XT(Z2om4J|YLc<niip
z&328?s1RbkAyCx(i0r9IN?T-*ke&eJfB+cBrD=@oJHD>FC03ODJY=NqFDEH;<bCSd
zwgk60J%5GO($HU0pL@IFevu1`G6)15gW8I=I@{7j^!jUeiz3p!J93axnE3NSbwI1b
z`L=L&p5yYLLsdOiIi-dQ<?7OP7nVD8jb2>_>F%4oz<U1xt79>CbyA#<4it|wEhVs>
z&M6&~qE&zo00425RADE8l&NYY1f?S-M4SKzsV9oHWpsaBY0Wyfn!HDf^Pi06t~0AE
z3fsuvjh-e32pk+^apJ1=3XNqh67bSb=a-(!lT)hJP~q(Z3y(jam!92KiL7*%hnX_u
zjWcGoz`8*~B_a6iei~d02{~*Xy^lBpIrjppU1fE;LDVg(Bk?w}q!!|(1!+o0ICCQy
z=N|t6F<Qo!)U#}tHszNWafs>^+?E_x(zcX2Azq3c5uA*Hn%E`i>6eyVo1|YlnT&36
z4Gc_YKcUF^-JIvloyk4(TJ>-4EG)&NN#mK~=-xxF^XUW2>z={ap=W2<YR@fbaSVH~
z#}ggSGl1YphL|Qt4DgUGT{Eq;zfv^G)0&PO(wkqHLTTV7MPL55GL`v<%bfO7PpxII
zdS!jmFjsri(WPrGJXWC8h!I!fvajTl&;?Bqj!!AaW0Q)~rZ~$m@Io4OK6l;5+$esL
z>=Fm{&&swNAKE_UXwx@ehPz6(-<b+-BcK;PF|D|4xKHZ`f~<}R?~2)@R@++#^)2Ch
zN4z#Z1a<tz%f8eNO#sckaNao}9PQ7f{Z0rwu6~y-`O=<xaZ!E6pA&G~=IxAn0oxxc
z_`4W32r3>Td-K}1aiw*xwM4B;6Hni7O-g;oq+BCg9(kp>PF70NlAaA}=tdn|QUOEA
zQ3^tV3IuzD&3c$_8?av@E)^blj}a$wcb;c_mE8XT`aJrV9jMxur;}D1eNL+N1!Vqk
zQik3~Jb8Aupgnge`d3PQp?ZApQTlxAwpdI~)HWv!*bKbcQFx_4h{|!uQq%cJ{b@#c
zugU!zt1kKjR$BEwn0vvw+T;h=BodYSDYXHNrAZ|uWN=M>!)QLDTQ&Zav}(%)g}H0E
zuokecRLc7)3Lc6=fl2ySv8lsTvM1ilPd*{b&zSL^i$v3X8iJ!YAD=y!HfTL-r#h*l
z#+~X6cC~Ge<+V$2#99>@(2;<pgO=V%I1VQn<a^gB^}C>&o9z94gLR1WmmNIpl(}fU
zp&L}&$ve`^=^xp=HspFN0#bNTPfm5`Pac8w0UFv3xi=1;>Q~$opr`V{xVQq8uR>dM
zX<9~bmG8#TKsMH%x!5(fm0g2Ww8o>-mxjYCO4M9JP;gL(77vv`jG@Gwf&m93HB&;V
zwz&N>#vLSW4(r3w!*?<OB1=alb6S%x=>DdF?+<u>-<k7PW|Gy=^<|#LsO{Jg?=ahW
zocF_s3mEz<Dd*Hz8fr;S^mFZPf3!#*9-G(CHFAnvAxSU2oyX<5?-{Z<K4g=?70}%^
z(bpc4>9eCBxEqa{9H-Y{n4nAUMN)%_Wz>!m;uf`}k$|L>k&Zy9zTLV~MyJp^TVC4G
zw0{rGQ!<=E0d2D*X2%H}jjtgo1HN1zI@V#Qe{WL8smn=WJpTaH$9j#w<MGg@U2jsI
zc7Aw$LbWxIPa}0_rMLYDaY{qMpBBv_)eN-q0WsVv!8{zauU({%TCyWtmQw)AXd*y_
zLyhuMl>{IWyVL`oeS6hk_Gjt~eM`_*Td8rkF3?B9T@tj6rPQ1&9@~b+gZ=DQ#BR?E
zn@WnNJ{hMUL#jF4lZ<2`AdKg}dk;feS9jGZichKU7T4nNb168x!z6JIS&f3-btcxY
zQO)NE<3C;fS0=`t@PGP1ZjC8vOH*zS#c;WhJkWti{{Y%bK>e$-rRh6vq|>)c7Nm|P
zS>(-2i(y2hEG6dOPtWt9WMaQR`lostU+tp(<@btMhpBC^yy4>w7TDdN_ernOeM34e
zrG+I+0K5z91eB1J9l7nt{uN<ft7zN4=l=lY)9Ma3{{WPFtr}c$*!4e1{#VN9sG5qq
zg~Dux#3+m{Zm1-XlqChn52!du{{ReECH;?`m8`CPTk1X71xUMGTS`Kbm2A(5@{@zy
zBq^W=_eE^~0BFvmD$mhPKtsy-yV*^>hSbV{-uWeYBLEP}7lEHpabB;m&Yn|!2e`Yn
zSi0Y2xRMo&AqZ)%c<1t}wd`pd+O@k+cZ^c>WN{I`9N{zgeQO5LsK)gE-$_}%uJodR
zRc*aL&~d&hEv7`|&A!fMAO<1FXyhK?IOC6PK*8h^K?yZ{G>ct^)f(4mWt(-1%^fT<
zo<j_wr1?^%6T(uF$u$dv_N}qpOjjFe*VVOZ#z+|a#Cm|5<FB=cS8lS5K9XpqJNMP$
z=HpClrD02H)daTDIpI!{2^svI&K1UQy?aQvqyGTgRJhMUJ?EbR?vAbm474m9(^Q)8
z{QR7JR_&rSgZ*FB`j@FwN}AEOW}mU?c2o*Nl1f)9UKBDEup4X<`czVILCr<>fw>(g
z)2G<Dh|XU1Aq*0QdB$AvT~@+)2|!DE#z|kG@6+}j0S7|ptu@p5N@{FNJX9{?Qojtz
zSW!~c20vTmow?2c=DCLV(!E*stm_=-EWq0IO@(IO_5JqBnsI4a@k=Q<@mwnM@xV$F
zR7OU1S!5k|PLqAn4?po_h5~xI#m;c&4Lp^bE(NWFrv=}C;(lFMGH5QI>OQCHMywhd
z%=Omd;&-VH;VrP(Jh<Y|l?WLFB=SfDB!GWI`aAX^(YhHh?ww2Ub)KV2cNnWiZOp5W
z%F!8gjz;G=InKn9S3gdAeWkiTrkm4x0uo|JK?YREh+EQK^>NkUZ&~&jN_zkX1z_)8
zRE+ai1!;LurL%36<V%#7)~$iY&=j;MX!9vK0D*v#aCzdoEB#L2PGr=Q?oAu{o`cWR
zaH%O!uXgSRU=^L#dV8lwPrG8(_6rL(NsSgvcUWzd;Bpe3pcJTg3P}Yd0th0%Bf6ob
zAn6{W>dif1k@5DsZPE53IpPNtSqk!HLxm^;0r`Vge!SKfd-e8aq189}S6ETs@gqi%
zFqXW;p#_xrH!P0)@J?!wn=)0#;V$JdK~p8ZxeqM>Bo(biN+1pZ$?PlIjcWBOo-hCc
z2or}%#P|pY8{}ZGcUrQD10?hE`TlfU_exiH)H447hwYGNT&1Ny>ZUtIdk>;kuE+zN
zD3CofU3;eV#fPJ|q~A5C!_L&}Z^UV^0?QvJ!5A3zbc~b2c;xfX+4rvprpkWLbwoz3
z&ottieeKEc-BPlp90R#n>`$UVtWvs*GpLhf+$B1sNfNguDqdCr&eE@ZkJuc6irjTO
zI|dux9ygtbAbOwQ;Tw;n==XK?IyAJ(mB$Pp`4B(Ke1_Xd@>X87>b3h=xZ_RA_z3Dd
z<CLo?O1%y}^W3W@vid_p{{Rcz=4u^vs4aKv&E7DL4ntx08EGm&Djp$1P^FQC?FR`!
zR~~Aro$#W{+EkR1thkVJ5>I@5zvowvO`%V>X!+M2RRTo5pWNI`XX3cLZf!>e_L5JP
zNLWIWp@Wb}sM0kHtNYFhz3fQj1b+KT=L_4~>rFdEw4;1>rr<buql<{dfw6OPKmcNL
zA$>K4^4j7&InA<^At^#1hk!PJF46u~rrGRkaz)A<8-wh?P|FH+oGT~WK9%d%{XW!o
zX=hGb?D~fL7vd88H+yB8L+!s2NZitb(1M(tjmZask~>%3#x+D$Fw>e(RITO^6XPRJ
z%_rz^)-zqGuSA@fj~|lprF~#&hc>f#aR-QV6W8Ro&X?*NU7j=cO+Xx%Zo0-?dF@I&
zlIv<oN|Hdw7$ko6%3VRytmu7tsdUUa4oZt@o~Z0P=jSc$O3)SVpp}G^>PCHP)SlL@
zj2K)FpX<An#=^o~I(}m<p(OUtgh~FKR)c=g-AB~7%Z29Yp*3=*&wIsmr%lbqc7%XG
z578+D_Nu$r(s>1kD}nZwy^Y02y4}+5agiLex4@O6(lx$m{)%-QQ(fcQ?b;(yMtSU#
z^~ToxHXBIprMTh%1LQJKpfzz={=@phQ!lGi>L?axfx`_#wn?5B$91fR_K%PR)p!K#
zxfauV{m{9Bk*iZ*{hhjp)BDmb?rHmuq>TH1ENS*jWSI@PoZy9^AgQH~RIA@0ky@wv
zG1s5{!0QkH02d~I`8rC#f(#X^(#36G=*M3F0QUo|Km1&o{{ZCb4)ohxu+xsep>=Cb
zHj=j%y*)80LO{tRmiPb+lSPazUXdKuUrEP{KUHbS^P5D7Qf}~DeYIqz#+M<qsV5!5
zNh9cL+mp~;N_w{Q4Cz(|m^!?)h6TzPZ{WW0+8Wv8@5hDY+l=~DN<yOurHZmO7KF0f
zZnv5GlT%ytO`c`?=@!EsR_PNI^Gr%wJVJ)QvW|m>!pTyJLc&n3gxA5&m$hMLM2?|q
z+h&wyi^RJ!l9)0lx~JGnD^sXLVLPLgNJ9KTbF_>lML<$g3a@DqRz9KWBJ}$jt{?G5
zs^_Y-lM9u4v_p#j0EUR@bq%;$mY@*hh%U6HH?=qmz)@029$9@hjF=bpts1`7d(^se
z0`50^R5-3FmgAtLIvSgj+pBMScMYjYISEpT8A?G~4J=iyZs>}q>L}Vp-DPKku2hc}
zRh{S(l-z7bFRg<q2`E&QAZ1O2?FT6i6%1B3#nPl*zlLr1EnjD`>YYy9SFLu3;>dg@
zsVfO!$&k<~VQ!@FLN=_Fl$8{26qJQsVwNi1)V(cCeGO!nZ}=GVtrk1&%JCo}VN--#
z&%z`R?*O!f<P0Pn*TbV-G_~seNv0ju^Vw>{b+}z1{4!g7xZ|-RA<{QB$RCb{0to)i
zK=;8)LaH%FD$TQWvR0_l_E|Q&u9}T)M14Us@3*7NZOKeQRCPGF!cwEOCCs#xpb!dy
z1du9L?wYo{g_`B0?$&)@WS)z}a=V?bOhmCJCB0G{L#z|HpABenrKMzU18`0Vq@*go
zm07mljv`Cidd&8=vm;gND`Y9wdr*q|fzOFyF0{;v93h8Sl9Y@uBn2I*Qgc|_)T_Lx
zknL@%T=|YR)OgK|t;ZIilpqgsr2+fYsD$Zax2xArAwrFQX2GlNnv(wjrrT4un`~Hb
zw1&`!Qqzl%A!B3dZEG9O8}j98-jtJHZC%q_R+f`?waMxQpx&%9n~Q#mt8|ur7jubi
zPDd*nrKPni&9w<pPn{`Jd8m~ztL#x%7f`xcr)>R8*O6_SmJN$U>6uAPxl$OA^N}5K
zN=q<WX=lWe`n)x$5TK2yT8h9;VA$y*rK)tsHFbr(G{vQ>(>J*d$Ze<Ks#%Jq27*e`
z>Kz3Iu2fV2Nmk%WQWbHED#o&O&d++CX|y%e8#;9kpm|N$;5TlP@OdTGG{KVMfBPz(
zDcqD4xTGaXQ=0*=C6}jgXV^64>)x@o>D!K}Y1eFU=0kl<I+osBKaVV7whEkWKnyQ$
zl&@e=q@*nlmMeX-bm|oN+I^e;ueRx{_NHaGtd_};pKv(ajw!a6A@mKg(&CbKoG;2k
z)v+WR(q%-E0#t~T*m5k$&aH>paA8fjg%qs>dxZi&YLyVa1X8I{L{Y^oRIy5ktRQKM
zg-X0u(v?V50jES$2AxAR^F&k4Jk&EnmJl+df%K?FB_t>ipa?y|t>32(T<_Y(*=KU@
zwjj+a6J3*+Qqv8#rK!P_oyiIE^W1=VtvcftO`cGTd5a?1D5NYiF_kc~li2N02NXq;
z<T*@9V+F=m6agd!d!*x>5s-dF*QGa>I1ppWY}?j-y-?ud+=-3j^O3^eCu!>y#%nAy
zs-{bNOWqHNm?%Si@spJk{x$J;rP4I?w;Q$In3)a5keACVLYA*oq<%#!(;I-Ti$rwx
zM^mph1!-{BpVF|4>Yk-#Zbw>FoTME2%D0V~KBS%nb=CUUWxZ+TS}r!`-qY+fmQfkU
z3J`>(0Gttm6fvBRbIo2k%`irMSASmah%7AcPdVgc@-gGda4xIT-@@?No2k@X3n>UK
zfP|zUMIe4ve^FjEMRLh`wp}6V^t{Vy3yg`95*DRnhc@Sgj`{wT(fv)hXgwKVZruja
zZf1MVpfvCW$HCk@%5h|seGW&;s=2!A*v7bt4@$+KeYi_>qCzITl6K>eGLIsCew749
zf4a;Q9Ark_C+9n?P19K2?V3t0f_aG|Wx{cGN*!SeWyBQ~V4+zU8OJ`tyfb=>s2{ej
z-(!9yt`q{V2q7dk65`5~HYb1ri69SifnQm=M&EL_NVrdo`!_j{y8LyA&KO}CKuG5V
zDOpx=z}t$`UTrYoGa0eBADk2Uxz2Ok`qwM0zS`=aX7&O>#O5MI{MDVVm@nNmnG7SY
zd^YR9%c|DrN1b)NDOV|roUOr5F9jiI&|})S+f!&m1&8pEkWNoveszV2(o2a_Km>V|
zap_krr|kQ!Z(32kNeQ?PGbxnGV%zaQ>rS*rQm~!7MpJ?kRk(xuS3Sb|-P&!CIRLuL
z8+#1~l#&=8d7rt@#a8j76eK?s4;3J*k(_?j?Sm1?O_1`+olzr|cK5CJ!O`u1E&}dQ
z^s}ro0SIQ`@*_O%4`j5m6n}6t>6+2yzTzBGwiZ@WQu0(VQlM}__8`}T>Aip#0wrHj
zxubCBHj~4M-Uu=03d{RHYCC3`*G|Nq@MTvBs$m6x`oyg&N`9ng_ZY6PR6w~gWT6Z^
zmXus!ZXqgDODQQTLWs&qN{VtZ!6Lsqo$%KB3{bG}Az|IbEh_X-$NAN}7ws9VZB}I4
z+p|HNB`8W;nDo^pAzg};*iKKrGApgoH7jaV4GQkzjERy6K3u{0`Y(ukf9#H>s9(1K
z08gfBae&tVKp>0*k}yUONby|>)NZTUdT#->T;4BSq=g7p_6GOmD0%=tDszBTa0YwV
z8!klKwZ?72@A&tNjD^XPta*2==L0{bBLIAWtj(dhldjY6T9R42-sh(>Uv~)sK8Z-|
zlqaxA`uD6>442&6q%<2|&lITPKT<s^uU6Fs@f7I@U_PYvJv;};!>;xp*zxS+U2}5o
zD~GfL8!&IeI_5Z!I1%IOw@!%?TZ@+J-dX@CWw4(MJFs^JW3cq~KA=_Wrkl8%3a(RZ
z%Mc;D)ObYLTXsY03d+Zb*x>CX4B#A(Y?`a5a2%I&h#gJAw7DU~u4Hr|AQU8F30lGP
zDNAp0$B_!$K^ezUY5fsC!7f$N=byMWCAQdRAWMyWC=G)79wt0>DS1i(NeMs%kTOMm
zr6)f;mB+MK^k@-G#P6PYh#Z06ep4BV(Qo=r47t{C;xJ&a<btV*xl4T|v>{)H+r_iB
zlBE{FSjv;>-noY7234x*CAo}|B@Zk<mlL!F?l}WI_Xoc<*Zo0$RkfyXH+DYghRd5g
z6}AfFtz{>BjyR$maX3&%f|UfQc|jbGT-3>psAOGl3z!TjZIvLVJDHH-SV#%)u$=BC
zM0Qc+oE&c2(C8blPiHGssZ71bTemU+lYzfc%-{|}R`H<vTN3+hYIdiT^jBZ}Mp%l!
zIB1SHl>z}h#yP<p^Tq?KT0-BVmkvx7nK54~Z7W^_jkq}hSm1&)f&lDuSbLXNu39Q_
zhFDD2l*>wK$i8G0>`y5t2OMLNJ64;h_1(i>u-lS`$jOkR8wwkeq>Nzv@UQW$Awr-W
zPT72~O7?@=>fY4~S0*Vr&Kv{)(9j7SCM1vmAcNlWD$eQ8O;xKchU;><n{;)YFxyOr
z9B>25j!qIY+tl~qV>q2@qhx6-n`>0|=R<QLsRbJpl@HLQj>jFj!N=`d_Lb_aogUA^
zN@dq#?Z8uDsHY!Fo%>w5s^jOvTT%CgAx@{CE_wQ#)+UWcjxI}oO!kY~+P>EtO6~rK
z6M=6C0j$hBia54|B*Ufv$d5AbvJlISsDckE+l*(_k=*hAHQ`OohnYmVF1PV9nDD+G
zeZbmNl;_-5PTbRP$8l`5lKK;nw-tgj$CP^f>+fo{#JJwAv17qAiq;wkbt!KuJe4U)
z_Bp}y0DD!Qn|b;grTjA@7uPjAGj~h6V~0KqJJW3?8&pA-<-zBex-bKfE$%3%;?c-g
zhqo$G1cQ#)&1~*zInYwdpN7@q-6bygD~G$rNN*WWq5{f^18~YfBm#J=BTZ@c^&ER_
zt3B~|HWLMGqCAMnX~vhhZAx4X<!!bSrIeKg5z0R`d-{Q)rs;IIced(z(hH8d;*eCt
zB^Q)axoiLd3)qw9J+s@)MQ>eHt#%DZZPS;+e>@i-Yk5l2;9G|P<BWm~j#B`P=RPAN
zYGs$3voi07^GTGTwYY?&7RWs9O21GU$8O-}v9|W3O<^)uFX7#3MPq8Pepm<Ex1CQ1
zM_ujlpM`CW8fz_~(<UtSNGMX2K#uuP2_OusatD4h!L0^-Hdk>-g0|Ncv?U<~`HG6W
z3~;VJc&b;lu=QQ7t!~|f!D;6)_9RAdrseW%aHic#Bs04q(0Ly^*V(gNwRO$LZE;?o
zDML7IAZ;FnN+cu?nKkgc0GVrNa#%_~IX$!cR!2bf4i=xD<Y(Lsv`H#g^B+U~E6j(H
z-3y)ew_U01=9KHZdO`0b01U=wCNlyy5hQ^lb?IG`Qgr!k9b0deXSd5*TQW&Qs8KzV
zm86vKI6NQe#aZw4{{T&DD+-^}k4S@hC@NvaNiHGv;~@$Mw(Mgg7$kS?TIRg!jh9ep
z`_7$_B@)qagyIrEFloRyHs||Ea3qSVbS>XkSrr}m?=Yw=@`a`B?@%0Z+yHUjq%qEK
z6u}&iKPB;cKG1t-?JZh2T6iq%$Z2b5fya4#&LRO0Bmg8qB^UNvy;~L}VIeKxgWX3S
z{{ULl^tvyQpHp@VxVJc@;bKPRHlg)SPJUQ5);%cDmRo<_vbAlpJ<?^xz3jCmpBXGN
zdn~rEE>v;Kf#bKmSeMVU-%hnc3$QJ&Y0Hv`P?>94Y#(r0B)5b8(3A77hMt*TrLcQ|
zA=!iZ3+ejp&X;j^8(x_$Y>pxJ$T&Y9i=H9Hn?FL_EVmn~?~*4&c)aIiHnm`+r#yg?
zln_rjPH|Yx2P!_B($?v-<F^?z3Y$b#x}xw>Kn2&pAwUz^IRoWgX>aL;h7G-oRohNk
zrn46Xsd3m-D_6}&JIVLSAlH@NhV<6=5%`JI2)8Nhj~3r8)}1QvoRtuzXSU!)Us&0;
z&m1BK(aL6eM9SxC+-ahtA5M|(0s+A>%QHO8^UpQKw=2uiZnIdq?m>O+?JZrDto!<W
zt1D@}KFp}`o@JN59edNcdvc#%f8kiYPXStO%fjJIMgGvlmm#*jsmp;YAS=`Z<@7%I
zqR`_(4Vil-Lva`bXgf39ANkeDBp6n0dE()i{gw4=nG0GvhN7jkNNfPCIh~)=xvPDM
z_M4m^xUbL|yV~Tih9$*)0Z33t;a}ZXs8GQNkZX{7f2ftB?oGOs2O*{9G_9kQjPOs(
z2fcJmE}+}B55ln#=3?AODco>WJvgn5RR9%*dVRY<`~`D%xUtRYzPG#BQsNATFt#TS
zT$2^fT654O?eeRS%$0Lm#M^|sla0A>lI*3l*lDujv$X>xBzp{!ex|y&Q_i&OJ0s%d
zXtwHsZGCJ9Br}H+oSnrErw$};&NiPxRM%5_Qr?xbLe%<cQWap5@?%MjCC?GqPpElF
zUIAN5><RNFTpZ*Yr?{t8pps>)jMS)KHKo-b#L4`}-BtA(bgM;k$of_7(XX?bb?vSO
zr`DGbhSQQ4;xTQF{k+!FqB6HTG=(W7U;?6?@|=pIbBgG$k@bbRoj-x2*5Vnuz;$fK
zQ>#m1#uT!o5J}{u9i(^QabDDEim%}%ZrM<6&2dbao~xxNxVIy%sYys4V38PY0Y02o
zm1wah8^TOw_)(`F!KYP)A!E=d_N`9YtS&5SC)-q{O9(z1m7gwgTN}FOG+F3jO*FSs
zf=LI4&2$2r*a&Ym-!|H{09ej@tX8L&Yt)*7{UNB}Nt11p6te1@1af%_1b$Ko1Rp{(
zT<z2jj$L$PGOo6F9=~aZ6^AC4f*y~~KNSOlJANW~_X)1Ki*aT_Q=Th9OF=$1-P;9u
z9ZVG|>ofD0dW&&_<4b|zq$g<@St?El$RuO>R=s)xsM-ix7uHnn+6NB{nm5m{FRI}P
za+d;hNsR!fBEH+`1mF^d1p)pQXb-d{+v4MgwEAW+%JQ!kKx`~$+-I8ET>CA^nHayO
zHGD-ik0g7PC8cfWvJ~P81dhd9e`=`pmW0$=277R|UAV(j<cQK+Sav*&ci7<Ik=&%=
zL)y8UyBc*n)!Tr+e|Mp}>Z57Zrc0-U4y51@QnRB=Sv69he?!k)IrCgDqQ`b9X~DSX
z!(s4tI5J5IQA)Of-nEz6lWBc1rpJ2SJ}co_a4EOjU(2yc?epzYj;PGYby6Gg8)bqL
zl7BMD!2X}`tl~A*$%|@Hd;7ln#6}8`ZgE5Ej)e2EF624f{!*ej6~n%vto|;4kiSY<
z>3WB=)}qpsTw8$zJB6<t-Ixq}Nt`=`fxF(YU0;~1#+TE#^?)bbR`eUDI4gOLr7J()
zTW%n$w<*u9X#FFzT6GUqv~9Ch7XIa#dW_7(IK8M_WqH`6?4kls`(4L+daGSrwOZjK
zdr)CpqN#31hYA{4X)Y`zDP#^-q7adl6T(GmGFQB;Ab4jy5y1!LT_v?QQKi6lUn8g=
zS%->4K_QKq;b##oZZQo802l)TVpr}eW24~ASYSj;ZTM{l#?-a|zyJ&k4%ijV+OFZI
zwZy4ff38{)r(KLx!lpdRR9Z?^!>!0c4>sDc3RFAi2h>-W?8)|-iPak{Ej_7bA}+Xr
z95mt=%B~?GemXP3BxJ24kU=10wX@Xzms)zOZfP<kyJpmu<f&HMv|>`^a!2JMBo`W2
z>PAL=3Qh>f*ZosSrXlRy5<&FLXOS&%@YzyZww1HXZW}E;#^c3tw!ZrkB5XG=9S**I
z;>q(S(RY0baew{-NWxXl084=<0Odxt@3XH{FMnsve<wn9Hs312Z@fA()xn~Vgpx=?
zUIg%2SWeX_WjrNWz%{=`>Mhr$TD|={)+U<K*Ldf2DYn?|y$;~cFdRuyA;j_PwL>H*
z1p`;Bw=E^ry)fOoUfE)5s|&ohAt+Lk$sl=>cy*OyjG+GjomJGR%fM}G%U*VzI(G%6
zVe$Uc#9+$+m2UfE!N+Xw(Y-m3&%mrZ{esV~^tIPV>c-5wJ=QvzB|~b|o(NJ&7!Dyp
zDoN**gXvror>{5fvd>ayXbp7um8K*RsPh(u1THGc+WG(_gdReYGqq_voE-J#y3prL
zEifWRzrS~}DSjMD_eVpILtY1j+LkaDFbGPxC$Z#Y;=13{Yj@fkr_vxoEDc*`{A*j}
zgzb2w6);IZ*}9MhbAYXf^x*5V;kt_-Yj=u_B4T%*?M9wJnEwEauzlbcg)S>cip=*;
z{{YY5;yEpj<9lh{4lb6-226W;6FNM_x}=4&cqv+ulA*Nj&!`oLnA;sm(VDA9UQ87|
zc!KK@gGy74<!Q@K?jU|wLUHuwxgVfCcYCGN-O$}gjUlTaj^sDdAu0|*B<yvU5_>nD
z+2biW^zC41op&csYR4fxa#Z+nyjaZ2dU{Hn2v%D0Hi4el0Q-!Z(7A0&Ppe(-0-$W3
zLFI;8=JMhriG{m@=@J!@px3mwkvKko&U|H6zhus&InwT`{l%!8TsRlG4ZxPu`AVY9
zLdZgt4{l13uWiHHuIZZDF*R|7`rCA|DoJWqz@;g*a-87hD@j(|5Do`9u2k!y?X&vD
ztz_Gl7ZP2~Z|`lu;(SG=DsTl34jd~SRx!S&-`ZtpT$bH=P3-u!H<wgB)O#sk-cTps
zHDz9luIZQ30Jft}4hSw`XAnLNaRhqq1bS0vW;lq>K2yK1HShaKOKR`dy<;jm+f!?K
zl!Ds#r*dPok^;SOphkXG*Lt6;<5p?w723-4D^%+%3`$aFC8abLl&M2#B$K!-5$W&g
zTmd0YNOi}aTHSHQ6|KdbsY)j#lj?I`yLH-ixurJ>e2A^6leG&VWcMI?9z82}^!2Gz
zpeVdeF&PpLBO-Ya963l6D_WZx%8ooc`0bT$eWQAWH3_ll*vkezu}(~o8*_3H>xoE1
zdG1P3l1V)I@#$T!(YesH2ifPRaFHNKM5}XCCAqV5ljHAwd~#3b$IxQGFO-!!weL}L
zaU_y+ocfx)^w(dez|nTQ73FePyGv+dBaD=kcnJk4Nk<q`K_fXJ`i$3uD7#IyWeN>0
z83c&p?*rZw&QFTK&=u<OzhR$;<gS<MS6gkGa?5bMx{n#eB}j(TnL^Y^J{utLa-+()
z$Qkq%SpAARdvfXzQLlYi)+g@<txhet&pbDHw-*vJq=Uv9X<QFNw)XyBIk#PFTduE?
z7d2`TSW=Z4g%DMf#^oPX5CHiO1%97&(!prxmrSf0S}xX>%zuiy$#*zg>Hxg5M{hrr
zdjx^$nw>VymhXL9xO>LKFxHGQyvzvkao$c&z4&{$X|R5E{QIrZ%|6x953cIttw)d#
zjkVpXQ(#~qEMTN#x`EHo^Ik`97ELW;ViW-m#i!sh8ez03G=PMU%8|fIKp7{w89zF%
zb<bGs7E5f2*BP-|jKVxY73GqpqtQynLCyveK3T3iy=r}F_OaLTw0?|bP%PQ_hXbn0
z7-cvMkn+2R!61h6e98loMl{Xcd#i`jv1krH`_5X}z-xch;5LK8-lUvhXmB(>x!YmW
z^Qyb9JzLaYXnkKJLG)rv_FX9vA$o^ZAgp){XB%UKjjC2QrygaHNWxO3R(oGHVAHyO
zCYiE9VOm1Kp9C_)o(hi8R$42_+&2Q_jws-$t0yL`O*f*fy(H1G^k#-_Oh;gN*DHgg
zFFxr2DaBxN>V^OvkdOfFisU}6Yb{IF>-)Vw=;f|;?hI6=x&HulB~CP<o)A~UQrJ=R
zDR>H3t~>ZX)wF81+SfG<IJoXV{*E~B8UC2W9{7&wJJxP(1{<p0KzaOkA1t0qh1a^j
z_?qTKCAgbwdq_%`kn5p1Q=Nw#kdf#<rnLtatPj$W>MOJQdH(>T=TY66W^Yt=41F}g
zAxgK~(wTBL`lU{i8f{+1J|M1>(LZFqjc9ZsNYiQ66B0-=Z)f9_pnW_%21m$*X1e=(
zcG0FOuwZ^=QP#Tc97xGOp9T3gg{4aKDFgx7D05lOAl1d&{ke-IcV<kLArae*(8``G
zPyrx&`u^4W@p$R)O4xv?_iY8GS%S0Soz`f;B&&gqsmMOWbNwsxf9)O9+kZs*y2?6n
za&k4IWK>-3scu4)>@2Nqt*z(GKwE0sPjsjPR6!<tOL~qJ+~8-BAea$8qDRDa3TRij
zpy67Ohc_)er<DGBE}`lF0NHXCxzFM*t-Q+1X$x-A9q+*aC%fw(o8M{<IORkVE9I_!
z(7Hs!yJ^&0rd^`6-^0Rg*oK*m*aL0@g!WHv0j^|USv8)%wX<i{7x(6|1qee?fJ05X
zfG{_N0lfbJwVy*@Br;q}L2ZGSykvx)RFlE}gm$bBt4B%xm7P5Q0IA=wKRNVWjjys7
zp4gG7YnNCv!pe99ImsB?U?*e5d2brST3_Dj-HL6p`FXQSfiW?h_zTO-hhw_hu$85^
z2bs58ARKZWKGj_R0Hi%=1_rj(WB&l^8K3@Eqo{KZ6K}ThZZxmLd@mbSv0KnVJ-Hs3
z?ah01UrV)@Q6Wj6qbx35t?`w$$xD#bc8al`sZ)v@$o1QtahkJb({I|^%@9b)@f-f@
zgw-@^nl7PM#7l!ubn`7aZ@?Hlq%RV>i>%O+rR$AUl!1~?qL={x0Q|LMbeB%`KdZ7H
za^KV)O=z*kDG%JAzD{29e?tiI0C89uCm|z@pGx2Q8PK>^c1Eu1L<rXjapf(zuneZ(
zj~8w*^7ay!949ygl%#WluH6HvH36}Rv)ll*q2Z+k%n+YU4%qn$-lb~ip7PnW(rVNr
zwGlkOex6HT)A~Z+Wq0nYz3Sz5WeQFmnSGZgQ_9<o&aA8@B;)d+06o1<Pf%Eyu$Zq}
zEy7GRybP4PGD6l;eUzsSX_|*s!;rL3x0cf(4hJ@sV|u-LuT);Dy7S4l-C;8rI^J@p
zLb8%O)u&+57#>Tk{{RkPEFpl1$c%n?t*Rpy>GB`8-R&>Mi!sfuzY5_dJAu4sDOw#0
zO2Hk)aDC@oYWrR8?E)82wOshH=g5x4ui_bhj@lejQobC=AOpu9)!0tKx9X;D7U?>c
zR2cK2I~2Qa!FDoMHu!-@+p!(UBmxP|aSo=^*BuY2?wV@;(`{U>FPQHJj$2T`C|VEl
zDGEx5$wStw?`g4)93mGpu3OW$dpkBjBYsQY{*kq}{{VLSv;P3b8K3@AzHfC4S-#7R
zzpXV(th$9Z;un9GQnaXGq=M%lf<YfT*T|(+>zQ8tH$9ssqOn|LA!?0oxkQxW8Ut}{
zr_i+ogMpo?I2?0|%E;6fxB9U5uMk$44r;S_2rMJV5zOx&ZZnPk9~j+?@tjt)a0X9m
z%-A%v{X!=yIQTZ>Sm)kbc3UnXxlKiH#9CTb+$}_K2*@6^MQXX${{X#Vt`l0zTIdMy
zuD3}s1&TMsrgTYC*Ci-*u_3VA=~IgvyvQja5;pT(^%qx1*4BpDjNQo+zWlpf6sv@j
zDSix=VKmBA`jk}TfJ8fqz!?ENU<@V3*ogPnZ8mAGYDFbUOAp&4ytK$Z5?ofq6os9;
ziccS)p4c_uN*1_^mX=;H(CB4S11s>7;p8B%8$!RjPJUE`RwdV{mdTpetM|qt&JlH-
z8;pB%YHa~%Q}Satj}&ggQ?-SHQb`#Y&!*#f>n@&>HDVK}b(EV0`qMh!15L4KW);4`
z(}+G0ODK`yNGK>m2Gpa1rwX@WCW`RfF%>K_@rIXt6-f-M!47{Ra~ndxyPVg}DhuDU
zDhS)Wgq$aLDarKDrhEEQ5?4{_`&?voX`Z8MO*g6SGGsx1_jGwNT60gbw;-&pb5|6t
zek*GV3PS-P_>OEV^5E<GBT0V{-+E7~ZyH-urdlIe!k@LW)QdE>Ar{(1hv#omhFU`y
zeWKY=Eq;yp6^@4Kz1v>3Y=H*k)ChMSK-H=P5}k2OJ1tD9=Ufd1U<R8F?odfPpKN-P
zF#SH$6Z(UwEZS1hFkAlsh~y=_KI?)pSVEQ*<7nZ3lN^KTQ3$N*U0u@mIR5~1Pj2w5
zMB6@~v`x81jD@YCHtJ@_kkcw!d{m8%Z$T(HQns9dUL7;kZ6TrVItdnZ-|q0N7puJM
zoVTGh8FEuLGfV}r!F5}92LAve*OhI~Q@d()dv1cXFHY(Ewxrj#y*%ym3a3Vd<(7QM
z63BhlHz{nOqa|#wj`+rVipJ_4BGsbP9`k0s$JBObt}okFE<6|F_);5f4y7t>;1mMe
zaH%ALpAEr}E=viOxmbFYr*z(c8cr*BdH(<nXVn(gC9WH6hfTo75u8#BiYORiMPny!
zKm}Fg(A`S4X>B)ewp=3I9)3O2`7vr?v=o-+S%fBlB|z>DjH`|l$RzPql@&0eR`+Sw
zHrQQP(0aA#^M3Br?CJL9wwBUfS%VR#UD%!2AgQyrBxGYatS*}BMzhmVY%$|%OSAUd
zG^mppv%he4P)gW+51}QU+jj3jJ-hSXwcJvvg$n4^-C=6&15hoUYt$V?&FDCmwB6C?
zB1D3R9SU&{$!<Y15#jG`DM}I!;8X_Prys0(iDkNIoke1ge$?8w9mxP$EgFv4f;8%q
z`WBTpIZwFiidssU32Y@R3ngG<ZB+EJQ3_>Vvbxc0b60Em+J8~%{U;Y%%87M18+;U|
zO|oN3a4I^ROXK2LQ*SFPO3-%%9i#;VfYiNGfp)ZNi))uXQ>i3RvO%`TyI$A1*)KJ7
zZd=Z&qUywE_9J2&Nl_&sO65ltMku5ttItPulF6l6(30)<tzoC*>ERIFbghyrOvbxO
zX<2ehlLM*o67B+&hg(v+wg^cIPCG#L7foo$_V%M{Jy^w>8>&UuOuJ@ob-z)zUs*0K
zx1^S$sn$vmwCz^Hoyby+Q@Er>Athb*UbYu3x?#JXw%1xy?g&iV-?C}s6-BtmWyN@2
z8|CzTJDw7f+SH^glm(5)%T%?>bC*k;`-A=`i#AizSK>am)D+{2Sp~(CrJpw{Q6*i^
zCcYS=kdmQ_F;c}WRH#v-6)aN45pRIg2BS<G@mnf+r<#DLL{k*=QO!CjQm%yiIdt;Q
z^hI?ORJfNu?zpLoL}wNf(0R0t&#ZS+f|Z00$tm1&cH^EDt*OWgQS1_tl1c0U^(5C~
z^rJ;yI$@!l{{TqN!HS_Vb1iV$c)a9Qx`c-dryDndfq;^r306)(uX+s+r~zBHRNGd#
z4iY~hV7k53t39?W@gUiuPPoZZvitDE#1c8$Tm<I_)4fpk%>jJW7Ny*6aTrU(%&0yf
zX-XXb0A>}&f4h<2k7~a4)7Ji^LYwz;n0@#lZF%v9w!ZlaPp|dwSZic&gpTY>dH~lz
zD8Js4@*;SMb!bW(QvU#uoSuGtjat;A+L&;K+E=roUY7+%!RycCAHuD=F{@wF+S#aY
z$Z|EZ@46($RCa*y1hS$%6c#pp7D4o`rqju|>+c!a0Z}Y1qi%DxPA@%%Yn{3|(=_!e
zbGLm)-1{N3PeZc;P&Uh2T-=tt!-XBZs2|EZWP@EbI_$es4n~NE;xZPMvdT~C0EKXV
zp#K0`i(vM!v*1>Zl{&N-`T_}_>F_=sf0eKuI|41C$Ts#OA~rJeU5tlAxc+^>l~+G?
zPfy0xQKiJuQlmk>LuB|5plmH5`CLb@l%$*i*nx~z?Q!Z%+cR?53@%&V9#Vv-B<I`z
z063~=Psp0(>g4OLd^6HgJa7(nDMXS!qPAN^g9NL4TN<FdiP`Ets|%@+%mq0P+<=IP
z2xbY+QkGi@LtOim44;`f6<yC^PQJEX04)Rox6oCpZnn#%#p`wDxboObp|<6?6dXnl
zHwB=BpG@=GwVg-PnJT}kE{UJ~LA9{8CDMi-XcK@iR08wvInSW3H&D~A87^Sr9vl2W
zW!YF?QD<_mc0L%!{JmjgdTVdDUOI!OZ8zP*-7@6MGJ;jN#X^td&!AQUc<0Ss@ZIr=
zXh?<{Wds10+DJ-JkT3uPumA!3SLb2-+eF`B&65TDZ0mfs<VH-kRDib|P*CTw<PTq3
z>bP3L%k8Gwa?)+7F>h`7sn7ii_YmVp=7j=2V+Yo@bQUn0l--A5`hOpFU$4*?wJE$h
zL=ZZ7{C>*K)EBjv5gO3irA<&NSDW%5b5!le?Aq<=xz|~mu(5HOA#b?Mdtr5yZaKkL
z;G%uVAJ(lMG^l!Py4$K-(j6Wn&MUb!vc0L|G7v(Co3<+M?#i9W40~h`Pom~%+}-KV
zBF_`f0iTE~g>{EduN^(TqTPILl_B&M#+b<}ZbCguNdSy`q<}}zgIeQqcDkmLfd1p1
z<Y1<|FRJ$qJ*ez)BU}(Bhg{p>;|oC}9wHU`R-WS=5s-2Xaz)MreLp&Nx#t0q8Ra0U
zBl}EtSMD%th1B%N*f=<QuG{uMW%TV6RDJai>o<kteuu<;{$3jflG7KxZsXCcDMM*#
zIDS-zJT_Vca0vjCPCEck?Owf6pfB1V;MDr#%R}yXNOs(nI!mN^TPRQmD(43TSC>e2
zHYSmU9y7m$z<I|UP&f)&vB~{_AGJMA)>yau#5Bc26Cp5_I`dDsq#^7N%ao8$9-WV4
z#%iUMs=5qee3wx6?^?I^qx21=(Lg*ff-*rd#WT)$o5~_*b#G{v7ol}swYTg_g5BAc
zWW<QvZ;E`aBWP1g-h4HTlJAIi;ahfskZSm1;VRi4Wc!G>+wUzh9Ge*pklL7NB~Gma
z8`Q9qun)=<M|9&fPMhj7CbF6LSzbNK_{c(}EtDb83zFMMVnD)kj@+D+-nZVK+-Bb2
zerkL-tt>tf5f1s1A5M3;k?0Z*->E*;b7NH1t|(J!gD`q{mCs&#P5vpYy2#Kn(pu+E
z<%G@%kl7I=l5k*82=VLPS#7v8agO9^Wj83E9A=dE=*mKsy~m3qB{Gn*osOg_Do{Z3
z<l~j3%3a1a)u%2pyg4t2-eYfsmsXOkt8ocCLhw%<;HcuiK}(2j=A{AzrrRwg#1rL8
zv6PQwk_R2Q6-9la`g-N^Bunm_w}-Ex;M~N=0V<Tn4iu#JD?!Jbz7HqMTbJ5pa>G;^
zBaj@wIWMJqJ*-<>)E3WY2y|qb0FN<=#%F#}w=CUXH+kO^aZ;{R-XD(h>ROy9umwu*
zz#X^)iufko5e|<Dl()S3lzBXR`_=l7vla49rMW7<+0k(=g&3g^DJVb6T>y;yz#~5{
zYNNero8FeWm>P!NCfg}0DIXBo2v#}rEO}Nvat}GG8rJs|1l4I1)pyo+nswXwE#4ek
z%Ws5%j#4nZNwdIjXNa~7pyzf@2gr)~N?dY+!(k-*=dktz+P)7nBgQ)&0HgV9-o@hL
z%s~c3XtQCL!^&mW$=tA#kf5ZHq~kf@fJhk!6{t7Luq-XhM67%k-h{O}&ed%0GI{pm
zw`+E>mb+Xldp2u#$3#=Bk8vtkc{`GG`BoBF=#!6X)}>2i;ZCw!$0G<N<2}B0<c}&u
ztE^;4X(l@)IU!4JWe8*+I@S~B+6O#y?anJUOyPN4HkS;%ZTa`vbq`GDO^0Pgy62~E
z&Rgd*9z+Gm+8S<Z)TQ}eDg(pV0{1NhC(Mi=C{>B5uSr8z$*xXuPZc=;OhagW=C`<%
zsZF31_<yY-zz7Kkcd(@N-nfr9VxO9si)jgED_<L%NWw@5up^v&`R20sJzW}nE4*tZ
z**0sbj@WAE)&iJNSlheNX&msZ<B~9H&ff5s3Prf<^!((%ERSo3r>t-bas!Es$vBLH
zF+BIqO!D$i(Gm4CvXC0L#JWeC&~j7&8;d1^2K1%0@C#|c3c%d0*#o^)S8GMy$1&)W
zW3D2ihXRJgg*mq*6pZtfkaB%H6JKo+)z9IRF3+kKV%;LVpy+>srR1H&9^m)S&azsw
zQ^(YDZLiB{psp$uR-_TR1xhKw^&3z4){Q|^kG|Mlzp;MS>l&7>{XXuH?BJ0A%Q#?W
zNswkaK_UPc72~ZvJ$ZHX0;FW;jz9D3T5S6Ol_hFWP;EWVd!MhhTcuW2HMFN_&PG2u
z$EU~|)UQ!c!iZ@2Y^dcyCxAbCmO0Ea3i}1!tsB-BR&0)kWv^N+&|xrC>JX0*5C~Bu
zpPp-e)AsUQZEvr}x5Y_yNjch722g^3ynnzN!dP^S+saVkdL#%g08sqLFm~s-LUN<>
z;AXS3C&z(qHk(|6>}FrfuPp@y=MthfDL<rO@I3}9_QOuCb68ZY2xj@`;5`0{nx)OH
zoxfpd0Oj2P0o3CY^Pg3C=$&L;x<2&Oc#f%rgc3h6`BvQ5QdG>RQlvJK#u84_5AR&n
zV$@P>GnBaR7WVP6Y2T0O{&i&OsnK=Q%Uf))Wgv{Yq#W_>n)(<me=M$2r8-p|Ft1oz
zf$OUcl@$k@-ck@hFgW1WtTo!2xnb!DVYZdxIJGMYN)yVIPoMxA&1vLCw0t9JS@E}i
zA<rsTrfcEVOC_nx9BaemMk$bse3We5mza~3Ed@T~C10@>tyZgT!FLW7Ydbbp?880m
z4?pCtG1Zp1ns-smw?dR3x1EzMt940ixe`JH%&Tt+2V;O7dZgCRX45uhSmLHJX5n^A
zUl8Jc_evQ9JfUg8QAix&C!d{eHwG?xXQcWj?|#xU9$k(Un^eWgf*w?KH2xZQa+A3&
zEiNl+xC0+UR0PRyuTVL3uq7e_4(8I>$Va*qK1Qo3I)mn=8iC?SkZ0o@{M8PTNy6A%
zRdFwV<Cua$G3GuI7%IiQ!iL?cS8YDZpvehHG1Ri+SsCQ*SDT-iIIK;RQLbbe%&kZh
z8c+#!4J0oI=rRRjubQmKOlb~21o^D*ai&||P}n#HV?1Q``c_I6t}^d!%kYyK5*bMa
zwVkJdl1IPqRs-I`>Y7I!FwAd0D{Im^#rteoEVV6`o!hY}bAY3s#<RU;)wjs@Yc`Od
z4aiJLjMc_Nsv{Bx?4bxA$x?jT!N?fnzMG(Au^Rs0#_duZkfktI+D`Bl!O8ko_x6sP
z21Jc59ffb2(=NP|kN*I5bq$e|{{Z0<tPhf_8;3je<b_$Rz5f8ABtYxsfgeADq-jw>
zszvj}sw+xdNlMZbljuf8Iw+xR7Oio8vas7RCLzY!7-UFjI9pHhg=8Fji6XWQ5vcCE
zlU-^1Wy#b#25jxGMPw#AU-B(M1$>YSk_QAHagm(Wd~53xT#J0jvtT+{mlfnb!-KjO
zk_u1t74F*gTLXx|@m4go8@hZWv~&o>ow{ziL00(5R0iZJ$TH_{SHZIK^2!IgPp@wE
zkVJNLJ>n~o?&)r8$?(G3i@n5>JDtlTX!fl|`{d&S!>QE`Ouchqvhk1j;l0_~m0)ME
z&&Y6j6@k8L$xYv6u>vv!faMR!1O;)<4RpoKE#ey=y86?5D$Ea_=^Zznxpe+jw<}W2
z(w62EK6IPCui_G?W;V!e)D7GvW3lgz-K*bnyy;z1q(apZC(MdeTtqk6IT=X-dr~)y
z0&uh+Q_X1B9bt5nsBD(2bU}2uOjm^+l#r0>wvuy_07w9mPXG>Trs`gzx?Z(x=cFxB
zra{>e2w?bXXr~~gW7l@-sMPOiSkjt}4g|z_9)BgXX{Q^y#f@+d0%RQcU_lcb{1u_8
zIu&ETj}xZ)q8k~{{{UCq7ObR`&Kv`GZ$%{iYP{Cn7wS1?HLlyFpPbQF3(%cy#)1bW
zMO%h4arv>@u(o|ksI2mv@h7fxppDJSQFoth#O@gR8ryE&eYIb7Hl(rM;YyEsjB#p|
zh3@cP$L2!D6g`Sh1QT4v8d^Q$`$|Ny&CGK2<>VxJD-A)~y_K=0TBNo8*)UuOF*xNj
zJh{v+Ym&m_yzF^tQx8XRO|1?LDGCP#BzuEiRWpqEX(v4MU4!;r`zYHwonU8Pbs|I3
zZ1Y@nTkX;0DYZx_aY%8;oE~5|r9dSl6O5CN4cVyv&m9EQbHq!=gj;J`H=${{&mm~e
z2?`GSdXDuR1~|EXbYCzxl$})4V@sXk{nzHTzI4l7!ZpItB18$%RveEaGldQ`vDryb
z<Qnh4v)|gb9<^#7nd%d<ty-0&hT~07ku%Sx-$b~5QQ1W0IQ*hhKF(if`_i`C&Bsrb
zaupi#=s3o5pB*a-6|3I<!Ww4o(%jJ9K$P0H<qX`SwJ0qA0Qg2!k_XRetqZ$S_^Jt}
z@w12{(=jbP$3Fv=<yF8p`m8PU3#xVQhtmCA(@yEle{D>dt`cItm27pFal@>+`WznI
zgV==vLE+AzbnB?UWjngAR(VU*x((F?H#NqxmbVZ*ISB{Iv49ezlq(|`B&1*6IMW?&
z>Dx%O>UdU;quWrBi1Q-ewn&bSFqI|Xg1+1yR6ccU*!AV7P+KQQxfW+Z!;$Agb-x*H
z3}MEeZ9^+ha6wLS-!)urY1abNQKkWQ2R1)%be)g;PJhx)0@k7*MD~`>k<5M{;Zi*_
z>)x2^b)EYq#icUrwn`=0_NA0LllhWK9$-R9S~&z~0=|#+CSOc-LzZ1vAhd|6OSZ`_
zNG~RQQhS1gkHkp?C}3ej)DUY%>&Mvfff81(=y-ZV1tLq@b)Z~U4|T&(<oozXp8HQ^
zS2L@rdX4ri*8AMI<+E!lZaQQnc#UNFl1Ulv2Yz^`=-k@vsZjQ<Y>b$A8J6)u;s;_J
zCBNlxB2~pYl<rzhF`i?`;v>(WlD<CKIwI96RxYIJ?+hyR@r8F-b18Yy*fHJ-=LEKe
zrFb~X6UKKF%q(1HLukfkVwz!N3JF(XTVAf}4ewT3BU&yKF>H@0%uIeTUMbnQoO&lC
z0|SzMYfMWAaZ-X-J$8)OwV<o|aNCTL>yA^6<8@(5(9>@T6ZT(3LyAZCn}$CsYvSl=
zD`OrZS>W&mNohzqZ6zZauR~3S8ZIw#fgawqw<Km(_@>wQLqO_QFf>!RD+A<vijxT`
zI0y^lkWMSqsP9bkrJ$tyB!GWvlA(qH4>Y{v^((b{agB=BZL5LeXvbf`SCw(nk(XK^
zo^lOC!Uq5-g#Q4QWEzAX2WU}m+qkGE6N=olAe5(%r9h}Utet4%1UG-r1>siYIh43U
z&_P0g<Ppd}*1AsT_NAG3ff`(vB(-^Mw58RcAxUvTJnhfr8;Lmi)c|5Jws&t(aCgZ6
z01ET`I)W3A)Of8si+VRjrSl?22^b;>F}Ndev2~-`Pme{ruyvnbHLM#2y$ZP9XE>tE
zPdl}?l9c66El1HQ87Jk0jF2nzx1@a;v-D3zro*K6$hk;TUAf&KY;TtKKQf1-X&DG?
zWF#L|6)5u`*wW>vG`5-5cL!gFHEgM^#Yc?d60s0A6qKZ%c9rfb0O0ISdkVYnoou&S
zpcmJCw=$IFN)1UKAwKF-h7+FO(xRTDr&!Z8!2q@g4?p}sB>W?+30&pvt<7q@AVWu9
zeDbU-)`-*hNDjc&5}un1Kp{|BeN6{J@3^3c6`x)}BaC9bai-aHWt>8>TcByHEPlw3
z6)duh`i9T|9{krE>wmT!W?OnLl(o4itoh$mwY9s99Jrh-=jGzHT_w|gvwfwI+`U10
zm8Wz&%KrfEQk1l^;&M1;jP8HG1dxson<EveO1<S?BWp{u4l-X;B>3=$AN`#k0eIE6
z4QO@4iI2}Otgf5ZUuo?fr>3=Qwml<RYA4<BShQM^@sB*S=n{`0`e!xsyJ}rdtv=<)
zs1GYfy0D_nn$<BcN=h-pTv!`YvyAL$E9SAtA1w`_G&e$ENQu*ULg9Q`Hch=vA;(D0
zN))t#u{i_q+Z^B(WQ^B6b+fDSq1<1A8OZm$somo~c~oyt4F@D7XTR#^v~MkiSGL~f
ztE#_vkTKLWcUazzcs*Jj%YM$-kLta=E#xC7_W3O<sNF!nwSH8WwI%l5201Ef1NRd8
z+ED~$L~vXnpD4&qd-tkGS8E%txxD@9e~`Hn8(|TeE*z9HjO|W+Pb8D-Nw0;*W7k*I
zxg<B{B`v4&BR+tC#<AWI-HoGg9{#n{TH4d18hAi05FlU;;BInqNhFh!Ny*i(#`1a-
zva>p0(rsz15R2B4wKZ^o@hXWRnas4L3<6eCwF9>}=iD0TdpFr;_NQX5_o(2+D9-f3
zZOIM{`U0SY=l3G0PLB0vM@!;fP}Hk}6)9+Sxa=hgZPfrl3fwq3$3DWg>yKCUrnHLO
zi-q<~b{qiwGY)uYPEH8&ft*#1#XUBg8(O@QaRb-O>bqS7_0=i<n$D<h?lY1$2bWL?
z9xJ8Z(;YSGj3!0Ft6Q=WlBL|5OzAGH;|d8rR1kd<kU6hy=cp3w4MDoOGAr>AHtaz|
zUxs^kIR2bhB3mFXRmoAF-t^~Q+LbL?&NGpd>zdtdpJuo9eYVYZ(z=@7Aj@DbRBMYa
z7vd}u78(fhxSh%1Wd{UjJ?nE#)hO0;sL-PT3~lSn%lBTI{e{MrMVAi-yPilgVmf4l
zgP$n)WN*D{wy|=T9u3lTsB=`eB?j3FVW$cGBx5)LcF3<po}=lj+?WcVs+@T&x92aN
zp+8iqJ?f*^y*s`1^5(erW>qTMr6n;g(b-UoCvtKCQO?zlK|wjlILPL;L(N$;QG3L;
z2=M;v=WO<#<dQ>JM~ChT=_@tQM&55OBE@s~_Eemyz3NE|^*c^DKQ1d`d|4bn2wIN%
zK><yv9H-_DazeAcy@5)2s3o9-=PM@wC)XsLRoLf4daq`*wQ{mdk9biTlLjTnd(3gz
zhk!!;j>R5Ft!>l3aowK<acS)xN}#%>5@T}Q`C$I*p&_o>VYfqs(`f=(@X`>TR-@Q)
z-yXHceN@!0YYwGqi_5+q9h>m&md-+(VIhPoKBR{8pPhR(&7Y_mDr6tyS##q#aA8V{
z>o*YNOGv<40c_zaPE(ZNcL$NpXsJj_LQ*gX09K{d$88M)BdVa*H74H0Hn6q{CU@}1
zB&lMhidCSw#hB5e(sj0#8mqw?eBR-G>EoO=@V+`cUH<^w+nwLt&0bay^t0o2iN2{O
z{{Zl5(s%y=jTbQg0Kukbgs%(XH+~o7-?PHw!O!Wgb086dG7oy3hn|+iRwc-jA&70M
zsLeeg#}L95`I6dHNJ3AjNC5UUDpyQ(>r!8I&Xm>iEEhY4qD-A-5w~PRlH(4Pqfaof
zjp!il+!CTY9f{9s!s~raf0xyLV_}tdp7oW@3pLkm%6(r9w^gT8Elw7HCi5jl;=FDv
zJF}YS)eYrEWlJhMj^!0(;~6>iz{Y*J?MRH35>!fo3OkNSBLoxNjB$@{J5mx?S1H)-
zYG^E2ES*5QXk_WO{1#JlW-gd^)?g&Or<A6OP@Uc)mZcKsia+(3#V6G*Rd}AAF{fRa
z>sB~APfomuOsKZg&#KnJFS?P#j(|b})shl~q+klrM418t?ZQ-%Zd<-Gp@|Fd6zB7n
zv#_h@jMvK?<dRMR$t3Uw0O!yE0QRCQ`=n`UcdxT(gN!FuU;Zegzr=4~oc{p&9|!iY
zH`()EL%elsK*WvH-3@AXT+op&1-42gGx!c2$y%hSZsWO0=bUj=^IC#iT4Gk7C~e42
z+?u(t;*_Mj5<**3P8P^K2U{pg!SCTVM=7jIM$Nt+QMdAx5|TcIcBCS@VnM%1>Ca15
zXXyk@e;fE^-PafN{l<A|e|gRP9r2w)004zxjl+I(f-6~>4on`Obs@X<pH`Tdy;Y}_
z)vMs1h=`7sC#gw8PLi|_0E6Zvl&Bowim#e=_~;GCl`V$T*$m5Zw2z`vpao>*>KSu1
z?YhRW1W0ovPI1!njyo<(sY7AM3Y15YrqbE~><Z6y8Y08e#YoYL$wG}Pl`1Gp6tPmp
zEKwA3MN1U1M1>qu#Y+@X6lr3oiddqR98#%KL{P;nRPjopQEtH0ssPg!<h_)^rVU1(
zXo^{<nvFcs6ol6;szm7I2jQ(UTFB3xvKF2_c}T9D>eQV<d6Q?gTqHGYLoBm0Lj}TI
zC{hB-5^;qQyo2lVu3vEpb+xv!l&vKv=xW+)t9I+eNUrN-xXs=ybVoA)E;lJD0VyRT
zl&=71-0}~gu(GJuIENSobb1xdDixe6xBx~csPW~6@X$9_ek$tQ&MBCxlBFfJD+*cx
zz$AC{ty<};v#K6gbxd2y@KVqxE_2@%Dfg%_q$+i;;w3jAovI}&!9S-2WLCVy$C-J>
zIKPQyY6=Ki6O^C!k2SqgyFdVy)>qUhF|7`$I`2Pyyq8~e&s4*2ruKh>N|4cZNOY{^
znE}!j{u==KVzC;ZP~5IpIPxQ@5!qvKD?IPxwmqwybpExyX||>_Z+$-xDbn$d?iA8o
z#y14xf<PI@GlA`1*j+=qvZ*F~Xj6mzfbkkFpKwBsN63%fjl7`I{4EN4uAfcZTv^W}
z`z@DJ>W7%R$Vg&Joj3}3zBc36Xz%@N1rqWaVn@I#R@c-@)?4TQ0Aw83p2;F!rn<h<
z<`Y4SY?%kgN|b`M?b+*;@=`r}o;|Q9PG0YJ@qfR>jcu|=@jex{T?#W@N{R?bNhK)-
zD#<v`II7y(qZv@OfRY6C{(eivy5&2Y#@X4hz2*-<0Wl=*BcFHGWSxlfNMx<=3AaZp
zR(E&)UuwzNq)m%1<M$#w&Ly-eW9q?560OH*tQSnQebZZNrYz7VEriJ{b#foeh+;ZM
z<*bif4gz?|AY@g~tU3W|i)?*%Tg}O*!)0D9or*%p{$wN!51}~u*EM_Xg^r(c+7*No
z=6!ba@m&>amiC}_uZJAOPBzb<#Z%h<09PYWCh(H_mZiSZ*l7nT-Y}exW1c^H?fn6w
zqjc{<*!2GZgaqaz2j{wQRAssXogYM;AbgN3^QPYxZl2Z5vpr2WDh#Gv1gm=_?n;uc
znn=O_06uH<Ci|?!Tdek_I0B4?kWXXgIIfP$qcsZdtkJL^IV!rXI+f|Pw2l`Narxp`
zi(IlT?Iz+MP>@JS^I<C=%75T%OSx*err5NH3gkGPHWSVX_pd&sz9#nIYDAsrZ9!>h
zA74z>Ppf7|jP^v=Ba-I~p=#O(xdZ1{@2J~)d{1@<GlgYuLFKJr?;i!SIeca_&OCrp
z8cqwYI#vnJa6P+vR*BT7Me@$o?Mp$GZ)q(SN(Sd69ASCy<s{%A)1G+6W2E1ruWrZO
zecx4<@|66s#d&V`_NJrZ;50~eC&zKY%b6I)J-Mn|yQ>?TE~ff|Jo)%_^j0E;)hKfq
zLFI$bu0Fh$p%IrJNiCCwjDg?$_^hiDmR@2r(Qrep6!>}HydDa981LJ)Nr*xtXd8JL
z04E^U!*8{-G@b5kQie%&eZ_q2z77{#`U+K96<Q34G9*V#^6*K^bh*f3hF0~x*sZu-
zkr0<w=~9Z4f`i>)<aay|mpAW8ZV%Y{abp7DWd@TYE)p}9Jf-14b~#ZT^Tk%Hl@Xgl
z7+hBVB>5V0GL+i(r0rQkz{fZl&U1`$SX(ve?He*g_~>O(o=SXp>B@7+?hgS&o_=T0
z)xMd2+bZGD_f8Llu70<(*0n2CyQ4@ptG7Su>&`NBF}U?zVQ<!+Ja34U;!wf{;-sDp
zeJs~kF7n*E&p`XVN$}WhU5NEr{{SIc)uT)%`w}D4R#;+74L;jL%0OB|fFtOt-0l_y
zwQWpTgaz%uS0x~QE9j-vh!M}|xeC9hrg%0d<QBmK?F5n-DM%fFIIMP~zF01{={9{&
z8M~FG;u7?CPn4fR4nazXqLM)sR4(x*!*+57!D9gBE(5_Hyq|As!Ry^$3e^HEw%cxG
z;_>hsS7U+s$n{7+*R^<8WxXm+saxFxKb|W(8epkiqM0P}gU_t;^W>_#^^VIEQqO~B
zo@GLALeRq8P%7E%r49)liS@-yTjRlPN?BgyjDzTZrxmR2ZEqn-K_fX(SisM6c&wtc
zG=SJh<CHRjGmm=t8Ow<RJQvtQUe<<}69Xrz`rT%w@PiGNIHEh8f<9UHuZ^NR?c7+A
zF-|oY5Q%AN(s#9va-FKqPsoAoo@*e~Y3;`fXfl8Y896`rSCSOBQ2N=t+r+kItgw}#
z(p_w)1x2tHl!akKm4zpffN*Oj;nKD1hPs(<{#&d?&rHL)Mf>1f+_gx3MJ>RBv;u^T
z4eH43bG0b|twa*7qmyg&!ozBLGA$Z&P26U@&=O=!oP@n5M*wFlQbS6~^5YwO=Cy4N
zrGJdCX|=MihKn6)knG3UO5cqcDmze;5)xciM<<Nu&{taNSW#`3mTjgRYH1kC<ew4O
zallg6c~Y@~pH9OA0=i8)(yiFzIB5C#FPdt$I&Pm;)oD>3smzQ-^Yc0JGbeoVcTu#H
z)_D;IqqIq4M0pOd(kDSiU2i36TQU=rypWPIcp#CSoSO5=xxF&q6`6p$9VaMTyHE){
zXFL*cF_WAQ1$Jhu(>85qVSdYhU^@}eOHL#Y5;KGHy4mzl{)A*4gIb<|(XsTLNidv+
z3hdchk@2pug_o1q<tICT*&Kaq(x#7D^+;>Gy-(5>&5pfoM%#(hzo-u=6XP+<p_AvB
z<Y^3t-X$sXb{OybRx<r>20EMZM&%8;&Q3_K%9GHI1$1%un77Tft?Zxm393VFsQRU~
zZb<re`Be$j-i!?h+Y&zXYVU5E@|tQ&(cw74z}>NE$r&R!P&hkIaaC6ub;YZA+$0WR
zbk=(Pj-dX@gtf<!8~TDr)4@{lX1?nSY{=O2U^MF^g&cM%`C`3r5h*eY&$8r%xUh^X
z1h|qtK=t|4O|7*&b~uhQGI`>%mV`AC<sp7%$p;6I@&5pYTDM)O14jVH`QOW@&1sDV
zpqZ$AKb+^}pqQ>(=RE3)TVw?IX;Q+J(e_q75BOH?qBUA97r%%hJ`2MN$^3->0K%|W
zJBuwc5Zhmda-`uSpWoWF<=)>+)HYlRTHFJ2n^U_-r<DMx{=nAtzPtzj0Bbq&>FTxa
zboScPbwK{;1ey4qheg=z>UeiVMUiF$;*)~&X;8@@I<G#_eN<hONJ6u;g(B^8n9I!}
z9F~}5l`YflljI-o`&CtK)YA0!q_#)6@3%iYhSY{$X)8~u%b;ZZfUVD}+By}{yKb$A
zHcOKkkkd07alo|fAcQR$<scpkdwH@k&R6=)t;H|XwWRT5BN6fRUpc9(={I+b(^*zs
zP<LDewobxKXUat4LE6vg&r&T~uFVeJImTqSJ+Tr)4q&CkugIjRdV&eAMS2u#bm{Fz
zSK*>l%%#o$0NSArDG5=>1eBy4`qhJG&{n9IV{(NlR#qHrgg|0inpBr@$wH6zV1*9E
zdgB7Jt?9RIw-?&eI&rl_@Pc1NyLx0TkOw$$l>(pXR6fspI_)Z@YP8?nsSr9u&(=K_
zwQVlzwBd7uOJqnVK3)o>aw{&l(~E3xZ#zys4{&|OdVF_B{U$)p0+KL4VT!c$wv^KP
z-BbSYj%*8B)RrV$6i}Abo&hYcC_B55G4jP~w_O7w!lM1g;}T7zJ>e!)CFM@}v5Y8T
z2j3+?dS<%b&b2s?lG7HNjj;@-Odf|GvkPB`I#L~q%m!L=S^-N13>CONPSKP8TvpU{
zMzPiFk93|RCE1B>n9H3gFdRtXDM`UV`VtAwdChHaTH|SZV++zQhhkk48JdES;>t0}
zQ;PF*+W-ObtA5>mnPk#d#%-%~wDOYJMtq3_({HV9w%zX#_a7y0H0t%~0dY{c&cgs7
zhwQnhTlC9S^yx62)waY&i8*Ds(xb^k?6|Nu6mCx`Rx)rv$OMew)}(9n676r(`tL|c
zw(2N}dfHkll+(O;J3&4(XY?%`s3?0H{Ptm6nn4Tk1~^~y4@3KoYeuajNWomS-LbZO
z74)K!IL8E%KmZJqNx%RO<eo8ETh5l$I&mphq0_gUN)`c1<y)O?Cq2B|ar+waT5w9m
z8dU^5hZLltV66uVPpW>SxT(=XyYz2R;m*=_t16ihu2#5+iln6jYsp4J8~}TQ0=+`H
zJRH^n@2eMdkf@H^kdFm<Ux|>Q2YRa%kgv=E`q8v)+mA1NdVfl@W&7B`$k}!Fe$rI6
zpxQ>9#wKIs2lJBZj(|CCHw{m#8x1=q0wY@C?NU@wr^#EV<aQwd9{AinO;(!opuI)2
z>N~~W-*5gZg(h;}M7voJEbmg4l}FEtl??I#DF^i)^_uAxq(+zM#<I8~D3v1LeiO@N
zWGS>oVIUEZak*#L)YrN%+Y?lV+*3MI$~PP~9hB%PQ6JqL{R#c+TT!QJact9a@WM$y
zZIynNtNTM&TCI7eTXuke(m4ni98w_UpIwzDGShgnszi&-3xpS1UKS-qak8AG5>DVT
znyc2b<BvL`RHv4wI62AB{x#Ug?USgRg7Pm~R^FxyWw(~hr7wkWe2W+(k>x%8>yq!2
zV9UPUWY{7bWCvupxUp8f-V<cyD9^4dn{A~FW|z^bA2`P17kP86>YANK(9|s5K(rDh
z$aLewp^g6lezN-`{iH2ATEx#!HQa>Snql`{v(I_Np@5aEd0}e(3f`rtDO?@fatImi
zS*o<^8+xK$nU8aXuogg0^x*ba9HjHYhwWdBp`fF=-OEp?C%szzGy6wto|$|!SXU+8
zERobPY?!Ud2>w(#`H|a!%15<n)i*SO?7*nQyAD6`K0O_e5V@O;I6eKV3?2UfmE2m_
zp&G5C^zM!8WW)<8KXu=m_@)zs*{ASU*aIU9OPSAcT<fZOi`4#>zSDh8>FgVHR4py0
zdshDd5tGLOFE*fz;A9QJ`--=^dG^E6nz6>BUA%28by)xzZjTLQk;jaDzxzODx(Y6-
zgK}X^c(E=~q#%OXDa(mH@{^RP5%a;Sx>Yom)qp=wSETl5(ZGhgrVpa?ZN>e$l1qor
z<NK~l(%)*`Ht<Q8bi3KM;UIWEJ4)lzcW>X1>09mE`)2AhDZN=QaG>fWqy19u)1Db2
zBl5hIDEO^}j#a{kp~nYh*8c!zPL%7{6sB!z(YJDQ;#v}zySVJ8NG&LH$q5QR_0Agm
z>_@Hi+FY5TCqdQm(T~DPJ_=?Ia&{=}P#-0NeG^-E8hy-meWw#n;q4BeUhDmMmhC&s
zD#mK}U*aSG0AVW2vUR@srSGV-YFIK6aRfN*gx#2O6re(|@)iKVBzEBEf&mpt{jVTt
zwd-pxq|<?canumkChF5KrA_#VDMDSq>{c_9I8i}8@=Y&&hpBY6#M<>N8;z=aNzcPg
zVNI<mKd2>RI6mWpShorvbiFn8Eo<e^L)!z4aYoau$FRr%0tg&Oi>6%X5yQ(Q#wG(|
z%G%0m_L#>x{ujUiq>!Zq6WDF3Mv5PJpr~Map2ogOPx{JK+V>=Jlh_K#EonhfY@7f&
zPhx9n#Eb=bMw=hrc-Z_@W?McGl|I{PN`_O-c+?WSZEzFp1!PXyO&~nkD({`#AEkVJ
z7E+?5q>=3BrC`^PGrHKVL9TSu05tr5%j9yy-ZN_`Qa~W%8KP9j=cq04579WOwuct_
zf=7ng<nQf|-o3I=ji?c};DMZT%?p4ccT(C<eK&BJZ%(Vt6^RS*(3eyj&tb+tdixZj
zB9xS^K&QX1e`@<8Op(D*J4OeWH3vfE6SyP~aGurY#7WBA6q?p|B%dGdzDH|=2^j2h
zp^A&_xad#iRt5nT?L;{q5ldkT2iMmX<y==%Hk7Fu{%+MF!f;kKD8Gli)0O6qrx{n^
zEp5Cw%1#bGqPDFQ)4f^Mtw7C}O)~w$V!ZA+`-C+a9<DmG!V~@^-~dSiuyNY(v*Coe
z=6ywWN7+ZHntw}ZTdks8$aeeeo2uV);ue$_kXt}+Z>a-nhC2dt>sVB|qd<q%Fxdin
zPtbU(Yx*vsY-+KbPTR}O{g&s_f3fzH>CAR+y4j(vwJT&e+eM{(8wwtcw0Lm$^Et<2
z5}Z}Jt7KoEj`Eqc-Db29aS|(GJN`;hQh%aI`PMnEtlQC)vvjjKc_%W?<B!aF#{>Q~
z30+~b#LvWPD@qm!$PS=jeM*Qp`Bpbt)|eZ?PUD320mS-4TmkXia)rV*mx8ZpPzN6w
z`3_%S70&%Y>Hh%Q4_~~f);%hXGh@aXL$_$CUeoGA7NV2&=l87++x83Ue5R7*i;k7I
z6%3Z0n)8bX=dq%n@vfnp_LI=o?dh4Sm<vy2GbIY$`-JhH^{q<#Vsz>{oN3$S<&Q^L
zX~l#46pGihztbo(C^7Dwk{I$y>PcvldX=*G>Mza*kp5L3@BWYOqdlG4k4a-5j>-Q3
z@>QzpKd|ptY$z+YL9=Q^rzaN6h)R+G?o#+~KR``&_L1v@y7jfn(RxQzU2UjNQ#wO`
z4#T4yq&VV|f^)_JKKxgQP<^E$X!*?B^-ZGbXqxg*!?h+uEAerG<=UbYGu-FtnzLr7
zZ2GOD81Uz9EIIf|^MJL8y(FF>V|~7PUz%6T9oJ4>WLmW)zD2U-9bi2YQzfSxBm?G2
z<N^pF_8@{Qd(l>#uBK{h7KT#)0K+z3edioYOt9HbN}O>-B?HQPk@DuRkG7Vq(|Yes
zXp6)bV!3}rhuOq;lC>%+Y$-uxd9as4cIWw*j^?U85ji@uK(nQ6Z?g{Z3PaLefZ+}O
z@3^OG(zC&Jv6T2{x^PpIkyuu*PUhQ=mv~P8Mi0^_ZhI@M9ZKU)tk;4mmmU)5Wvv7r
z^Pq_n9Kez!fhA`x_B&0gYYt4;7L-29!--r7vZi_RKT=u=BjyPeVQGC`r}WjO_9Dr@
zYFNxTwWP&_n8|D`asz8#^<ae`L(gig;PmHH+&6eO8-!xoJnNXrjM@l1g10uL5yu&=
zyG7~tZI0a7zuv9(<hu`R4oAC0aY%VdQg>i1oyjC9U~)z?TH0}>Za8W<wT=!1%wU7e
z<0lKF_JXa2TMD-K+Q=lg+-s;dLB}?ij1&H0=CazCu6jEE0HN=81*|XPp}N>%#O+q?
zzlLysP*_PGpo*n*XHGRPyJ2!{aFQ*o9kMP`77-l;4srUNBiR7_$gZgAmVnUlbo{GJ
z7TEWwA;9DBU1PNCvRwXk9lU&pp#AH`tnY1UtBPY;!dQsQ2rVJ31h#{b;q3qp3V8V%
z=rmT^KC`G(aqE!)$4}%hi2EsLr(RvU&Xq?Tacuy^0|$P5+6m>d*7|*<^q!OPS{A0~
zUDnQ3aGpc1kN*G$k;6m%o_)!!>dUGei!DvI>p+a*Bg&k6RX;N9#QE_iSVV_rf<vs9
z&J;7w)7rg^qVYa^kxi0IZY%_c(&BKO`jeXP7|Ki>Eer0H?5!x%ET-6RhRb>DT+1c@
z0Hl|cY8Yr@bOG^JiG7sRph7|u{K<1A1wOgY>B!^LT|d;Gi**NFPO`z%tXo~N!M2A|
z<eQ>fE0hX?g25TyLGtmp3Q;Nq;<?vTX`AMXxFX-IY}0I09M6V{ZEZ`qI3>3RP_gq#
zHAQ#AYaS5;>b_g8@H*|rn_vu2Q~8fYiKInH(ycW@qe~SqlBFdmN|vQ4B`HcuiitP?
z0m&qg0IiYEoNIQQTaM^`SldmcscT-In3Sa;WRgpG002oeP_=_fm?23DNdys)N2s8R
zB919kyHws`))bV;W!4n7(CSj_Wd%rDLXfZs<tj-89>fqw6h-mH7^jLTiZroO#S}#h
zQBtLfB917<OBASzG-9Po6h$0TsbY#EjTosBOB6*MQmIiyQN=7&u}c(18ZlDEEKwHY
zOd5bSAy`88Qm0YPIzlN^%|se`qA6ET{h0c6s8A;BJwp+KtE_afVMB;Zj-imHc(OK-
zLN}0<r1vRGj{uDF{%fiFIn-C~+8WVhfRL-)64jWrk=d@zJMs!obNt9vZCcY6DnV9y
zZ3fr44JHob)ACk#SlcuXgtlC+hfG=5J>b8`krB6DR(%FW&^~}w5!0<HrL}5q&T1rF
zpsjA=8ezPa+ig7O0E3cFJLMn)fKP6+o1v}nt(z|p;og?^el7W_-+}z89g>mq<kd3%
zl(WFOymXsQv2TvQ^_H1+OWF_eg_Dn_dsT;JP5TTkt+w`;4UQR%%BLLA>zRC+XthV5
z9#byuLZqz@vY<v%O45{&5A$Gwo<(cZEH_(y*%pa*_fd0k#I)3Ol&rd?94Bg$N>mTN
zez>c8bb0Z0BUg)k$%wY+2g6H^CBRe&K1WhOAc7Agf<ATjvsjZN?J7*POSoK<;)d=q
z+6s=sN=OcckOEb;L}Q%$8q%+C3?`88W(Qu1uKP=4sX6w;z5#)-Cy>t5w(6a|M^=)O
zSa#&X<+$3Jd`AUHLRE~XcN@6_kTH?QYjlqU4wUKG^4w1LAgw`ZSN4l>=T=qp8?joA
z*QS$oRsKVIa_JQe2X=3rBX;wicBBBZeLG`5qP9Ix7Dby+Mu8SvF8$GOL}?7~{7)4m
z?jU0v=ijwZGM&SzmsDXS_(Ih7K8?jIw^zIzCxnS2IgEJojr`QQORJ&i-ArXpJ7LbY
zJppede_~g(rFiz-fDg!@YR>Eax2jY*7W-sZ`9TYGr^~n0g?8uD>s4fCJXnmnk+~}b
zryiA%dARQ|gfcRf4XRNb6YpGo&XsF(bS^51B0fv%SK1XVN$su1TZl2w_Vdco;x{Hs
z@6Mh|-jd-`xX&Jg=mrKpRldg88l|QX(|4H<Fxz1W4ka#OAYcrr6O31#n5{5U+o&F4
zv}3+2(EX!hLFnp9KtE4kYPJ>XQ!`1$zD7QZ^3KAAy(ZEv1P-ECt-WP?nA>qYMq68|
z3Edhn@th}s20ea*HJ_2uE~ATL?nu*bND3YzqWoJ%Ucxhy$yV(D0C)3zt9|HBms}XK
zb%eO!N_}dFX<Cp9n*ibGQ|Xd?fnD$yS0p>D6D3cD5_=M^meSY8M`^%ZWVoHp?;eFf
z5<hzDY;<~>l?K<msB`X#`RA(nKeWEyKSsWNmX%4p!{2ceC!mPiVo5o~2+t8Rq_rjJ
zw-~QSn!>g`%jhjQ+P##Mf)CcR5iRUL;+EbGEP0c=wO`+88w)qB60KP(8IPze&oa|;
zLBixmTcHYR&*lKHa&ySR#{|_I9xE=kt-snNWT(`c=JicE`fYy9nFk=RqI)In8$GA6
zHOn|&!@}XXm<I=;1$oiAjfh$Ut3Ikc5noaacZ0GS2ujE0$CT9CLGg-ZBo@cz+;NJ{
z?vE-jgfgwY)A@!wXW!ekQ<d6raHhG&W65QJJU3L6umDPk?eg3`>s*@@z8^t#NXFo%
ziNRLidYPB-F1XlBWgn)#PAE7*Z9op{PT$OEP8MwdY`ba{t7MlMn!@tSt)syt@wA{3
zkJ|(Gtd#rf5t=R`c_|%-t#bEG_4;hKX?A@`WG*>;$b%pxuV&%rZ2EzpF!beBmb~>c
zJ-vl3FG-QcP>|pJ_#eG}GT&3OtwpseJOddMk?FsZ`Hg)RyDM;TmjSWlLi=^9^!#`b
z?$Hv{bEHl9bnY3#LQ0fC^*@wk_RUlXeaoDKBIhk@djlm(><6YjzCyO?8h+=mT!%LM
zB~e%n<|Iar;?fm@RHYHhm4Hvn9lKVitF$c5Au1}&gErkPkcAP2B}1Kx$F2@R9r>;=
zQ`A{~a78yB0kGxgADB_2`%R+$xapLtgIY+~#Ese=5MntP#wB{3xmwynK})JQ<BS4p
z%NBR~(u{SebHLAf$!J{#BUz=#494w|P^=+-7mBrg6OaJ;llxQEIwIxM`Aj$^H*t$4
zWeJjmY$1L2sU)0n$iX@0sY{#1!#Q0AA8Ryf`jOJ<*9NeW!=1+BV}y~+13QhuSr3Gp
zG9LLap$+#4AZD>qEy<dvGJ>W4RP1jbxikl)OJo@jsN=ZCG5hwfv_wiEh^tCl1M?G}
zewCa`>IosID{axY6lv{9h>_H!36WNpN&)Vjq$ys3IRt!)s@7hyn`)BVvR@lH+mn>w
z`h2ULoK(wvw<IP~hmP27PAFt23dqho4Ap_9uJW!@W3tj)Ej)m(`Pw-IfPIzzb@WeX
z$o(G-&QGS_-_>y%qd4vijzibS?5^f@%Z@}cojzP)w2#zJZ>?lw-4$cDAh@p(x%i7t
zdnsI#THTt#3O-joLC3;@Y%73*epSE9vcaDLmSlkH5<PwD`Q@#ELgs54RETMAIjkH_
zak-Eh13rLfisyc_YSD4lw_7=NM$>JYpoDF~Q=vFgk34`%fcbOlS?zOt{{Tmts^ba@
zi>qxdzR6hpG$m==GwwmpA1-~Wp|`@Ft*&n-13}kTvbWxGz?AM$B$Xd>e|qD!+xlg_
zg(Lp}E}jG9zwWv#23qN?cA;|SvX~pVfHN7+-3M7-5iyj@-rfUeup+*a<Q3sfD<vlY
zfmtn6)7z$xgePC2KIN@tC=;#DrRL+T@H}KI3IOru?Vc-q>2{gY_nQcE;{mz8DD$ny
zR2ARQf;Rr&<6Lu{!qDN6t91|hjiPDn4+Yg^z~B-#l6Z*?#>7m{2<EB_)x}Ll*w9iO
z1JCBjuP;uu5+Ld{y&*vkC~e=I6#WmTf8kpuw$jY$olkYNu=3@{M#Zx0n9qi^1*3L7
zKvoIkky>*Wc2t)OsRgu?f)#}Wo-jwPZByWT3ti1^`$b~^0BN+K+ggyytqv181{^1t
zk-yP(RqB1KRA{?}lJ2(Mk0v9EVaFB3XVQXOc?Y^wl>l-*GC2noPw6*q_X|TdT|p%>
zB*{}tQD_~lr96SpzH)nZ6{uTDiy71=OqUANwJLSetPfFJ1)gislvN%|kg~0%#F7=;
zf%}}+bSXBOjl$%;l=c<6KsOhpI;b+h4jYa9Psl(!?U=dVZHd(KEcZKfN$f=M<g#5+
zz{)m)06hLcdC2Cnag(Lf2(H^UO`hWZ^(IVNMJ_EzovI`ek3oP4$>yr<Yb3#+_v39Y
zSB6m$_7-^X!b*bjIqrG-*27`5X#GW`ZWG;^a&Bxm;pU^X<6akxrG%v?$W?=t90TcH
zZ9PWb*_4>(l3qhZ1GzDu3FpaL-BzVa@X)9w<l~kO+`3_Ubl$#x<Y(FMFR-+>R3kq7
zSX*o4D1-dO`kd0#w=;UO#E%)IrO1m?JQVtbk0}6gSdBl^ySAY-pN8aL5)^kOzVwM3
zGSg|v1Yn)m<J;+2S@%gIWwuqSG8sU@%JNoM-_U?K^yaR(!vJf!tPRCGaw%01=WW;X
z>b4fH&d;?%aVl8&bl~khi0%zqdQ(<Rk@sXsj;2yG_>B{V1D+2(>aK*-KNi1<SS(5N
zsD$l1y>snZy#qbZzgcC+8)>f?rIiMNSw?aB`<mLO;s^y<G0rg3uRUX{^$Ikmsd~k0
zGYmLuW$={bAr2&^$A7#Kf>c1~13j}`meNv&n?rn|DFHm^fH<z<u_Rli!fgSz;lAkI
zk1=o_6c5xBTuCXGVN07HD!0auDfXEooVJG)l%JoJ3a``}L)v*R8(*ixS&kbK9|d~-
zmb9g=@u@FbhV05DNz>m9U<Zy`W!HR6yi@v?kc=nTl6!zhQ_r~E+h|CR#FuvEUR7YL
z=2M!gzR!9J4vW#z@5T47H+%aL<~(-~hln;PwuaI_GQwOtl&tc20|Kn+mza#OTz&MU
z=PD~a=BC|*G+||9LCmJ!=6U{ke{O4A)Y=zLYpZ*I#<q4Y5ADarhKo`eC;44Y6fyH8
ze5;xImC^e~mXjXeqUUNG#r5|<YTG6%98`o8-K92!oTs_YMghqc)bn*bZ-!;&-rhpS
zHh0IZec|f3uQH{y`k84vyhXU86M^58#d|v6j1pS6pJ3Xd&Z$aCk&Hp)cIDA=OPv_%
zD=bNU?H6-xsL9;s<*-youGEJKQTYH(XsB9NkffY~GAp~J>R1<PO^7cgsA@ZvCpi44
zoDXWkF2T|_*6WhA_MCai3sRO>2?VKR<x0;7lk=^2*t`M4tE%XA8qirY;y-1^@UJr?
z#JO87(~EJgO{J-fp+JWcm8Ez-+@U!>!xWf9VmwuE0QiAR8RYYff1P!<xlc`)w%cRe
zG~JcRO*ytB3=~0AWQ-D(prqp+#(DLvAw4_kRK`Q?LcGHbf<sX+Y`BB|^1;XTsy#<W
zyt;c!2!J9d#GktQAF{QXp;|tjYGk?YCPZxw1Dx_dCC@i?wrzz@5tTfWK{(2BkbkKE
z01DCF34NCwTGCuABmu^MYU>vCcS@$MwjQzEF3zKt<D*hA?}>xiL9&Ho<PBDEx@!xm
zA86<rNt<IjQqgpjm98{3j3O&+mmJu630jicfbWGIoYtE(+SXJ!>c;+jzlH6t-+r#4
zt{6iaBR;2;s*1s<FPg4Oq3Mf7%K0pEsP_17NLmx_LIJ?~)yt;7#{F8<K`VaE6HZ51
z${oB;Lu8L{4ZZ6hLXlsjdUr-zG*+E%%hTIz8zdHgBMmlEl`Ci))}iKF$O9@-B;%7+
zp1rwiO*Ywm8d~|N8OaGYRW#`s83ZG8Tpq`TXX+~&{5H)Fa3{b5Psm5ah4cDX^)B36
z!q$Jt=j^$v%k~Stx|M$s>uV%Ge}aPau08zT9dG(0?5A((?BMiXv0dXRgOpoivlJ*F
z?zp!B?d@1g&s6n*3UPfL*J@TW(3fa=NJ{bfy??_MSlv3|)Xx|Q+G*<oMt3%=B8JoN
zl^~Pz?Nu+XYl6pHxR3XSfPeRY{{ZD!iZ83(?d0?T51IYfRb3)Yv6haQ>I`esDi~Z%
zNa)?1cWK5zNcY;L{`jms-n#z)2FzidOKiSbT2k@jsc4x2!bg7*87Ultf<ey!S0T;&
zM)d?ZlsRyT0cckWW)f0&4&>y2QTtbdXH<25poX~bYDB)-NlT5m+h7oT`g-=N>QtR>
z{wg$$Fn0p1x6gplEtO$QN_}8y@RCPfAEdQ*FI4p|i|VgTFDlikhMCs5l4M$Bsqlx9
zDJ^bDZ#?aAfHs~Lk8lX!SCrb>Z}3V~wE4Gk0sjCx`YlV0--f>orCfsAff@Q&)wt+G
z3EEQP`;vo`n%v^3Ugx~XClSbW+|QX^Hj}5+w4~}s6PVl&DIEMTvA!Q>&N=o+VP2F6
z8f9&up)HPoE=_%sv^J7tGruREKjU9WTOE1Kwo;7wM*IO;mtkB}paXyhC(U?5RD^6m
zQ7iA1b6*uYQZRoFNI4l8B-YC^*vUeCH6tn=^ZsVA-*zX&UQXla0m-OkMxE5xvaL=7
zSIILKEwSQZSvcfVag~BR6os!C7)^Z}hdHz*NeOTy<RtlPF&|LLW+9GaGlcR;Y-j%f
zYN5`Lb1G?4?F3vB4_H{nlBQ6TASso0+(rc^*b0!8u;%qRcm&{At#`Mlwh<wwoWSf!
z=DeO1X8!;X_>8&V$}$sB3Ff^V))*`@2V5W7d*(oX5)!8wWdx2qH#z#(jPH4{RH1>+
z6g&R)CAzf@uDBm>9{~422*0Fu`d7=~+&g?Ey5c*O=gUUpbu}`3fX7ely^;2~oD}|1
z#yxAzA;hm^8}=j;Rll(MQ$uS|AfZj1a8p*7+0M<S?%h|jGp$m?_U6#*t+g)&r=%r0
zLRJsv8Oht~KnEitpt+R6bBqD<TDMhADh_`Pz$A`lIV=vE=`OX_(VKTnX`9`~JA*Ar
z_;sQ>kGOSsNBGs7Wcv>5x#(%z{ldXvZC~0px0faM{{Y-=I}iTdcZ+xU&j2MW!eK`Z
zxrJ?4wg~P0E6p~|8t@5&eU#dP^0r;^8%h5FXN4c@>T2zl)Z0t7X)X~sgFaae{{Yx8
zm)F;>YP*C}6vt2r{ys~U?LT7<pJ}wI?RBi~7nfT*gAowjy|O(*llYDw*ov_%x@)E#
zKWHySXm|^d+JlIhDYUw@5yt-jh>}T2&!Pth&{Xx`OFFWr<SVAv-6H}T@<?(c(d4Y-
zpTzt?Nk31ma<0GW*I$}>#A=H+rMM)O6669UHlgZ&)ycr^!2`8dKBe1-^yvUPx!?Z)
z%X9FmvY=>P7=2>%;&?~EL05-S`u?VwD4%(^!BPCo!jhR!BiE8n-<A+Eb6lIPb^CY8
z&%bPC*P35<W;T^NeMl=gAvwtjNdRQ`tu9n|E$_V!Yb%K<leN~}K|;{4Vw1@FSDX%1
zIl&!`V@loNlTq_KzzqkUV=nOGbBI>v-GPFeKm(xt_dg}`kn7hslOkD4j@^I(fB@`2
z#<O}x7m0Ok10!=PZy3nRh!{1Gj?zkhHWz|MM+e%vYen?)rE;{TlI?Y$c(Yy9%2x4Z
z)u`^kIZ{-WC!FWX0IO<Nl`h!obcVrh*nw$YonkQ3CNg1HkgbZ;)2-Io*QmC(nJzc+
z7nx3cJ1R;^z#%KzPho-HwrG7nwAyC;RL-aL;I<N5A^VJl0iHm?V0(X^SgmO;jg>m&
z%dO&Dj=EhXZn%OK@(FATgnpj%nKy{n8*8(!4>a;z7W<Nv>~~HG8BWohXFg(6?ki%)
zMZCAF%8qD|cax8jx4+cGsk)Y%{U-kar?Ua1^^jyvIV~Q}ZWd*}B6WA9@mP5BhOg38
z5}#q1^_v<)_~b}xA5b(^-ImnZl3?5=xrAVZr9}~rGID$Kinrxlw2TBug4T$)NkoJX
z8HOz^l)a8XBWMTZUVDzJeNdt+PFh{HKx~ANgm_`44nj*~u=LI=ptjQm3Z|n#1oMxV
zhobr3m7>+t?q6|8HLi4mczGO<1i%Ew09uu=r?S|K5)+!EPqxfcjqHi8DJlN|XW@rG
zxUKt6+B9X7admfi7YRimCD{f_lmPFw0e}ZTQ}eGwokn}$S$#oGIt~fkNHwe6^@9d{
zTaCWxr(Oj3@xq8wLGOX<R=hP_A<l)+Jn9z!wxviO0a%vn=AE^;rrEwgLs=@>i6ry?
z0O)J)e7)&Q{f>2}?{&9Jvs{tj%Z&3<d^a0Em;>POuTY`LAQ8x_!}!-SOO0GhN(snm
z?a2q}Up-f=?(uYe*HGInvMx{Cqbf?{Hlk9L0s(PDBPbc%t+_iv<GCI$pa3p&vE-|(
zSU3XuwJ-*7x#LiDQXP)>KHkSv`gqKC9#D>(wc1Q+ehKBW>wgSDSwTrSI627gScyF_
zjT$rW{{W>vmdNm%Q=Sty`3iA+K|4}D8<iYj4^vuo!s$BmK2^%?Ey=UyI9-tX&nr;?
zXN~{>007_s2c>zpEBTN0ssrG@cIcDCvdd_NsanfPEhsyU^4g$<aC7lZaDA%5>aejf
zsrrE-o~d8W!MmN+X}2cFKf*4Do%|0JNeBtgmvK%2<c{@MTjxD%xk0!?*d)P}%%*pY
zr+ZE%X~^{%NYBc)d)~f_s3u(|+`4z6)jH<$@5z#eu0dtjRHZFod~VQpD3CFM=rP4Y
zg}TJiIxc3txAf*UhGP?Mc9_n6`t9ZAyAEsCv`j~Y!gjQ#0*=)sVM;rdg(LtgUyGw`
zPFyV-g=moOgnLIXQp-S=rkoBig+_WBUQj1;t^u?H0U-~k+OTl?gL#Fnplddf1y`6&
zM`^UFl@?SPgqUe6PVACfNGAk&xfmQ)IzFkoM(OjK8MQ|?7iT78g-qr_!cn=86Ff4d
zvdgMQIdP;bJaR>DInpgXYPgLfsZnFLE8rVUty?2r#A-xag5x33qi<WuPr{|e2Fqo?
z8A$v<ut-f{Z`R905QePOR`)NB!LVs7L@QaC<Yrxx^^iVYea47)!$KK2LJCThv628e
z*HP6Anq7x+Rhq=^tA_<JSk&uoL7tY7(P;}Q4)_XvE#V1yO_hL@o>T&>$j4A810|cK
zqRV=<O1E1eNVZI6)U>eyl(QN1xZ8<&w~~OMR)v5=iv>GQ0T$TKkkQ7>{<NQKx+6}#
zrlegNv&FkB#AbYZs}P)EKC~4W>klM_9m_~shDwkP8hb)%?xDuC-e5ppm59y8bSve)
zHQcS262-a6?XEnDXDn|^E;O?0)|4Hta55{wW$K#aCsat8Z?Q&bX*O(DI}$DKE&ycQ
zBf9i*Hx~(U0z->=Zg_=iDhmn-#vlD9T;fczt4~_&wi{KI*$**iVTWZzlH`PVQWYoS
z9C2^>jDX1sPzi4#J4q&pz544;*<$IouJIvQ^u^t~lW`5A*{oQ;B4lR}>V$-V`>wXO
zl!PI9!W10^AtVu1<!pCdSSMIfVY6xLCYG~&YG+7~YfOh1DneT=wzpo8>y8wmDsy9D
zK?yD_;FFQA;-x~4D8)+@sERaVrArh=98$$fiX<q}Ql*L{DB_kXSfYsvG_g{}7^0X_
z#VVC7Q9_O>RH&krwdS2eH6d86l!2#Fr$kcCJk)bWXr@%btLyC3rX@tU&)3ep8;J?G
z?Xe?-<x(9`L2<%+1fXy|N|bwJnh+jqsQNvrt<ChJ-3Hj=M7w$)YT(jO;vz!cTKqyg
z?NU^dm3HGEn60}?Vx>?InzYjBw!P46xo6F8-9qXMBSXv)*1x<Ig#;l3Bro)geEZcA
zrX|dec)3KAAca1LoOFZkp4GEm=FfS*jF6z)%_M{dh)P`<<8dJO9^6%F@lzFca3PpY
z+++nQJ~W>U51A?;A5X1an5IN8q|$3Gn+@7jwN1$l>ZJYH31OfT5<4jOKhl(KPj*74
z!?h_XVoHYMwQ!XI$rXpW%YNR4w<b$&$x%DpXo8Y|Z}?ZEP2JjbE(EAd-7c~mVT(v{
z9vflRuW1-389R`2uVd>~*H<mJW2zA(avz@(s&ze5j+;r<o+OOGiRsMk%$`xzM$vhG
z9A<6MTuV}uaWfs3@{$6_Vw8i<4`cMN75e2SRmSUcOk}v!k`iPj;l0V=<KNo6eMHeO
zSS~F*y+a;+#~d5bn5qqx6ZuhsR7Q9iPd>u71lgwAt<x<x`(4u5{{RoLsnC}hE|d9#
zX;=iL5y?IGb{MKUdbzJliGY0L?fj}817BvlSWt5!XDySqz>+?AldxDjLrQKNKzVk6
zLG`avKwFL=VF_^V8T}{aUwHA5;t6R$3=EG^UY1}ZCAE=)e8dcqT-`?HeX8BTtc8Se
zWyGaU43r#k+mG_EOkW@I8{FqTx!{kTeOGT^<0?9aP)H-tk9zR<%0h}1t))2NcKTO=
z1#IzvuRexq7Gy=Ar>;+ypJ1uzWn|-Gh$;YlmC5-l<Z9%%+t+WnPJI@*%uBd<PD+@{
zaH&PKY;8+dsY-mKw{z-EajOkJm5EG9Qx78xX=qjy56FtM^#1@|Zx*{!qTQi8bW%7%
z<0&auZV3d8e&6_4d82DI1s2=fo)X=O+Bta<w}|my1oqe1yV{qJ)HLStwxO3aZXL|W
zFiuY}XArhty=u0;8sDXp=aFz)B}*k)@R(`9p^@&jCj;b@RdnW=dorP@Z(lw`j8-yS
znc9l;FHl`pkv?L8@Y1Y?TS&rCl6g4q^(MWr!lMPd;w4J<Bffp>nAWd_{o!*x*5G*#
zex#G+zMbq=hV2JPZ915$@?7!aU`L<;dCJ1OmlU9vHj(JA*{?dnMofhjCpjAr<*R?D
znkv(EZTsG#j?|^P`r3&VS@4n(fTfiFqDdeFz`^cuj2~Kb)uPD_yM>je;5?Nj4z|GB
zhf;XX-oS!KBfmMWcsv*ItviqUgQif{{{X@ZUB$(~T?2$X^4@pBF@xcir9o~AfDR}f
z$2)gqlk+v}dOF%s_(l?2PjETFsr2inH*Ikp%ZqawwLn6O8+pdc*7C=Fs2JdODkOUh
z^N&um(l;#?A-@(#pKo<r68KKlC0OjC>7H?njw>Qs9m6?Slzpwy>S{mXy}0eR;m-Xg
zIA_9VluGfjA;$-XhkPTBcVh;zla{rWH15R`2nM||o>S!mf=?U@_DQxd<7dNhLDTv%
zfuDTT!t2X`TTQp9&~3q`%R<2|AuCI0D%zls2;=Em*1pzX#q2c1HrAF}bUTy57zBTg
zPxP!)_L00H)vF%7^HLF7VYM~2OC(?rXahhHGQLx%f77i$PSwA}Sx}JDOIsTgJGycN
z;{fd>=5m@Rs9(ZyOHx{KK!J^^Bm@5djb<)-soh|~Lx~NvT|<FNNlrHBo_@IgwWdV3
z6h0KPg$(3_S-%X&LW_G6uJ{8rkqtbuv$XaG!q-~=02CDohZly%&N=tFfJ}h{l#`kJ
zyk1*Hl(?0lC%!!^%FN>fYBnV&o=R#gx~I1n{J@W11$pJG;p0B(T2PcAs|UHjs9#Tj
z23AJR4)d-rBEh9tZcMcxxgp0@v6$`W1#T+`10-+(C$JT6>3)n{^t866ja?F2n@WI$
zEviZuPdh`Uc}UN$-`cirn(3A_PKmZfguq4G>dSL3atO-YbxGWmljxKsTT(lBJ;^68
z7g1X7TAuZ#Bdzyt_K1v0nnNTuguQ~4h5D-sNyahH1mNT98fJ+`&5Ws7{{T?<$ES~$
zSLL01+x=4Z_2W-)WfpDS20$^y=>`EiL}2w_ChsvOGZATPWR_L3N(kg*xFWW(sbV~Y
zGSi4aKb=ZA4X4#d*a4IKR*9|?6G~dwd$+WHHLnev6_6hVU;v@cNXfzZRV%8s#m`X(
zA|x|!gzxsPF_O1G+FA7Z3=e$PT9%=2r=AL#bVwa{=gV(D0=|>%@&5qj7LB^5&JYP}
zr<0%(2T_p+9x$+7M!&PE^#$JR5R^odB>XZ|eEteRN;CCJLC4Op-96SUX{ozsC?S_z
zQBsd!c*beE%PMVUcv8n4)*1Lrs1URv&Bu^ak^L*?h5e}}re`H}9@6_b&38`y5Pu9r
zbK7bB@$g*@H>g%yo}IeEdD!w8lW%>u5Dx9hQWOXO0IjzlJXH;&-@EC#31T(DDu8%X
zYD&CAp5r}-)}azQVl*0MrsD;3hS7}uYwEuviNchWtGQ2owdUBTA-fgJXutH{!qUyu
zFVAR8rxF0fK-ih)aCV4^K8xMK>*eZH$@mLdPT&s-N<d0dK0zP~#ZHinsSN;xjzAn^
z-o4K)qT%>cuy-oY`PKsHvdl-<w~~TV0sjCR&X|Y+eKGXuTTm3~h-*XuHUJ0!c?<>U
zX5!QPS#88_-O1gJzdG4147IQX4eYIB&JNt;zd5Mr`-PSSNNrEHKzRi_ik*susH+{y
zh{?@ucg<xERl`lWZI2ZxX+;WfG!wu-kb%e0k?UPcbb6pq5M0xBQdvA7G3c=KG`05n
zmtL@0XU<_yocJgiDe%I01cIPRJ%Qr9ak_n}?CW8<T50Qaa^hB%N!r6@dB6o}D$28;
zC>i6mZTF38<KKBmZ3&4j`5qd}8NyMH3UW^0sK+(#u<B*1eYz}!A#mZSDZHmD2OOOH
z)!iE>(sM&yfxa^*p_m>xGt@3(y^U*&*Ib8|lNiTH#Dmi~RtBEw6@^+tRjPEm^hwub
zgvpf=K}%TOl{ew3JhpfW0|bHGWY^XYLiEfx+_r0tHo{}LLZDskPrku-kIJ%CN>}cM
z4*Y_9*1@J^8?EX4#3`8w+8G4!2dEWmTkgIyC8=(QROl%q(5M5&Z&jnriCTBI{q85U
zI!CDIgUjfs9d-6+)37wf+V`UGR|{OrWEW;GJm<slpG!$9P%2Q~*&rMok)GnYrrCW<
zXpHksA@b6<przuCx#t87*Ko|&P@%?}<b$!18D2h504Y0gK4g#p_o|Cnbm}&=(iV4^
zQx@%69U(2tdum#qk~wA7j1YGKQsK@CAn<ZEs!^*;EIx|9t-bZD3#dLLmJh;q@&Q%1
z9;;lY>6dK`vZ&HuJ69|{${IhJDD}#R1xK(a9rIcOKtKsV0U%%j>0fD4WWbjq9mX@z
z=EZQeB0I?1wwxW(q3{0y%yC~Duc=k_OuWkGE^ez`zmBnzFuEV2I@<F;M$6N2o@6^@
zbpjz$ik9OKm0>$a@+liZ_EJZsZ&M}3hieiql9f781crwRQTlhTOtW6DI&SM0?P8K*
z&x)|N)ITb)K`2=LNjT(x!~<76F05HK4e_Kcr)>_)%96RMNoA*TpAULf>T&{z1GaEY
zTUp$*fHCF>U2co0(Coz;&fz1UT;ujx_HOrf<2?Eq@S`s$8A$N`jt^?YzcNGULn@l=
zg{+Vx?jfK($@x?+YY25t&6FNx<z(SobB{{FUoZav2O%uNQ(<dBJ|;m4A1bsY0K1^p
z2|F##tuo}aM1sSuLt4+`PY(rcP6^=$x{35S0<~$K8`ZNOc3zUc$DI{O@YJVU_#}`C
z?0m^mv-*G^TEtGiN&CGih~$@~;|LoF+@tfWk$q6I>FY_2CDb<XjD)h+zmRY~ha$PH
za`vsIHg-ZuJLUv=5tH-<a6Z~<cN$f-BX5%P6D|NipYo9;^3K5Fb4}BxdWPR)xL$9N
zTDQZ5y@ki+p~oF_#0V*EDJoIrTe5I452*sYNlZrELfmP!lm)c3ZQ$n^KjZ!tXkB#@
zZ#H>y<ygM-hVl<7lH_$blq<}4BoII&xdicAan!a}N}RT72n|XLO1x?Fo|-vN{;%-T
zdw!s<eJhF8INoVJ>@1e^jpXeak1!8{?EQ+py0p_`o}X3Dc@8pZ01S0?MwrGWpvNVm
zUE?<N5ZXXmTaY$w;GTFO*NVlcuUbD*!PJ&HuD5)*ydP!v6}*fBk`<odq?D2B39C@d
zv1-W+wBKMrvddDCh_`E79ugaOJO^1GMIe$gq=cwr*P5-h6{+id*>Il;ZhS|V9$I$|
zp~Mmn52z#@RyK|fq-mAEsn$1_U7dO+oj}noFl0#*(g_4|<VP?hPhjY;w*Hp5w98t~
z+cL#++K{)KCB{m-9jY9G-1&zC117G0IoGWvsnfd8sGz>C!3vboUUBM@QmhP)!oMn<
zN`P%hJ|dJz$F)T<le{7JzzJ7A_2%jqbi`ZSxu9}zYsdb>i~j&+$h$|P^8kK*7wk-Z
zWW<CaQEo6LrD`eOhrkCO*e5*k#%tJ(Oc$Msj--!Yh$H;Peokn;FMQRPl-qPwy5n<_
zwE3BUm1R7D6yeSikbhE$0=l0>{gbY7SWNz}Ybh4!U~g5v-!QGj<aS(z9f>*a5*MFC
zQreog79PSpSVyKFKQ`z!ZgguqVf{*?c>$7r0_)G>*3@=?tGq~7Qq-g<@!$N%^{geu
zdRFd|F18Cr(UqL7Pca$P?jGS?{<TqD?7cA3HZ?`IX<Iy&k(b1ayoIYL9IZ~eqP3rp
z7#@|({Y2KfLTk>V%WO}@uO$Z0C2`~9ox8^E%fa*~fCs)SCtqDMrv*n-o?tcQ!_0Po
zH26HX!d9gnEvF%+r;z4-0Vm|TE2|wI=~lPWm&y8S*K5<-hSwG6SbE$M9X=~<sld~%
zp!j4fADbJ89Qqy>Vl+_c@I$RUzcD27kEa!#R<PA(+_)z1Fu+<1YGEZII|_D`oDSGM
zs}|!b@Q|q>Eh*<_+#G#t#-&=7Dmc0WXA!)3?fJ~^zL%is^=)XAR34x^aqBqxuM4r9
z4;Iz|-PnWPy{v?=*$gnh5T8TG(xbj03n@}U&*e^gR!$wQGo(jm6yWo(skWO!(4?z*
z1F%j(<d8Y%<yezAE2U*Nu$MO{(8BSlX;M^|(4{S1vBuF~CfM+uDrxTwE7e2(HIckp
zXIW=>ca)`>2~v`#Lh?aMuyc;xz3bu>g}9YP-Sgf70<g%!*>4R}55alYG04D&Uk?mm
z{D-xC-exPvZNvu-<AR)bud>pmB$v>ID>wvpuaeNRc_VM~ry&0TS_tH#qe%oiBbVV{
zMy+xJ6qwLZ&Ig%GIRoeNtb4IiLeRM?dE!4R07`rIB-UA%9C3}SeMoOOIddPm9@X+?
zh7fl)<4-3CaulTvr{sGa;<64Sb>mWl92(Y)esU1J3`bguQX?rLBaEnE`d79y2|-$2
zTAEh?fUW@g(1%-Gl^EzrM{f)(f%DI;d)BCrq@iU|oJbpzp^&fXQ0Enu8Y}`qpU*|+
zM247gY&f#EG3r4-vBh}b45CKp%PDL5lsi|Y#5T&xc7>DJft>#UO6varvIc|EcbhHd
z{{X1qLA_sN&oSC!ViM?#%3DH$($a=ED5+j!pUH&doaak~yaHlzl~t?Ww@<Y-p57=s
z4gUbLqih|2>IIEWF$YpETTP@S3295X1GZFoKe;t%SpL`d2%#v|_LpvnJQEH=I|2NP
z9DR3vE3&8P{XcSxxxGDOxCD%NFWcErRy_eJ!2RmBylF0)xg}8Vy*IJJmU4Fe&f99^
z)G54f9QR4b&ZfSHZA9@%W_M}eGruAi&6}#&-vU2Mc)SRa>HIA_PW`MjT+b}G?v}R)
z{<Q~cMmuql^8WxDxHR8WE!u`ClV!WXxHH^_-Ac|rMI8G2imV*zXG7lq0PWf@z*s$+
zGa1LHJ6!kTv2r>c(6H*9iw0e$PCvAdd6b6}pJJ@{?Ou$s)maAK;m-d6lMPRw2zUO=
zO5%l`LH#;40r6-f(1Z3@UZ=3={dmG!*BW-wdQRUBw<Ivz?j#f0wf=N|*fm1+2kc9u
z^)n7k>1EwoW@=N!ISwjZMVxR6QSn<O_c>4=iLH(Xn(6M5E}cKCFV?9<U^?uNjamp8
zDFNn{#s^@aIIS-0*V%do_90#_3)QW>qwun!LlK?qIB*;#KP|aQ$3E4vD(W<!!*y&(
zKjvs~1I#`kbv%BBYE!qZKyguXnH-29d=3{SYfhctdTppCY3*MG!MI0G^eAObNN@DI
z((&g(_wEQFfI$P-Y;tYExNOLp`|Uw#VTQ|x2pdlr{p+AU)4fQt^#iAxJ;qX%-&wgW
z&8l%KTP&6jjFJarm6m>_e5#+)ntIyJvL)+KT%C&&TGjBeAvNO4k+EA`R!InLIXD}M
zCkF!py#D}H$I*MKxWSR;Mm<D~9ggd@({DvHMy1PgTm&>17ZE4A)`Cs}J75A%0V@RS
ze~gsv3*EWJWF9~sztX&O-<fY?#f2&OiTISMqT8xT?5q*}Kf<gz@pN>RG?wIQI~h|2
z9y`pjHNAyj%7WU*Ja7$QCg_;AWx|DP*IHdA$9A*#ld>T!j==3(SSQWcDzz+JS#Z}A
z9e)D5_LJHRL8RO<?5R!Bjw)|x$pa4I;qk+ks&%HP@w{*1OSg-RZW4&c&<+ReD`e4~
zW7N7SsqHkRUR#)=;rREKr6Fgz-N_*PRno`Vzemc`j=*MQufEbSi@=gjT|KhSc6fRH
zJ@NXp&2qNKP#;UJFMML5C&NOPmWoM9Do_{$Ao6f4u(Z^L!7ilZBd?D>YxCWPxl-lM
zeF~0|*T<Y0-Z|&VTUP$AJE`t4?V7Eqw#!?t<!><R!cwl|c6%hAJNs4VX1rSd0hreJ
zqsS2s1C5ld9Q%>j*BJ0exUapsY^yw^%d^RL1eEr1g>58z5!jEB&0SKzdjvdB)pgds
z(buNIPT+9~+(17_KQA@gX`Kt>6CjqP0HA_}C)E1j*5J&Da<>UG(GnWlaks$00kt+k
zB%Uw<B-a)()?G^5Xl`3Jx#1_wrz5GgFX~XC{#EqVePFrjZ87%*SPj}EKE2bOZc3b7
zgb(^GkT#&6NaUOW+d15Q^%pdrYR<m5Wmb_OnT!bE>J?)IVia-g+DG_T-xTphP_6(d
z(M<gK74u82ty@sy6t7^QYEerRspK4hMn`%w4nQL#y%8!{rU*Tbew0)qjTG@lDp5xi
zu~Nv+GtadwjFFL_QBa9umMUBlKqDfIQc*_~s#Ic#qe~SmQaByR6qHL8s#H=@MvPO%
z7^I?(DO9MWqK+wIq(v%9DAL7Fql$!EFf_ra15%>NN|-ea)U!lV2ADM*)6Ee|tnQ!m
zcUNkg8ycrfTp6_&<hv3Yw>p)$lq+kCQqVAl!hugY$w}jmYN;z*ai3cwE+w@T4|M=>
z{x#j!CZgE1Mv}1U1f^^)*xS(CF8NfICwkv;UA)UviYMpAY}?Z9U*xRx>tS<R4#Pbc
zFl${ke9{-F@g(aN-0tq94i=KMG8O!(&vEl88Levbp>-vu8m>2cT9*}Pa-^a5-_Czh
zfF(eD$g4wLXlu=`{;TE5*!Lbog(-052e*`CoK|jZN9Wn!wxwule3;%N0Y`dLJqcLg
zAC_}lZ?|iwC3MyFsuhR6?};*c=2ti+#(}~V*gqmF+50%@;ix*bZh6Mpay^nO*GD{I
zl!d1VXZ`OHz@h9>pGx{!ZF8;~eK4;KTmJJ*poGVchPO!o;HgW-Fn(v=x7{VGto=FF
zXtS=@Y_>_%VYYrE-Jb~#HdI?}&qI>6dB+*XaycF>wLCzRg;`HTb6nR4f-%U2(5^;`
z#OJOt(f+nj5?luZj&qNHol*T@ysF`Nw8wJXtIP%*Dw=}I-AD@HXKy3xTh+@}EV$jO
zC@YmITO3M9E&G%0ircIfXDpGI9vh{kxR6%rN8&AB<oi{N={2n(*_D19`a#C+&e>eI
zebIK<vA*)MGUbt!d8D-CZY`vz)nF^kG2D*Th;K?wmbaXO{3(b+K?+Qeg0OoOh2Z1&
zu9esF(`C0cB5KT+g2u(}AfA8E6;tY2(42<jabqFtdX@_JHV7b`<F~&xS6557t=<5S
zFXdd@Y8OGAOcFeQ0adGd8&S-8Z8s0$utr>z>RU%WwvnCx08x=x4M(SDX>#hWGGjgx
zpdLdz!kYET3P{R+Vyt`awnW!0DELGO@e~W8w)iRSwIkC#>p<2zicHXvIg}Rz3t*#e
z<!mP@&&&_=tvZ@TwHigwaq~F*`>pq1UOor|$O60wOn(i%i&+aCZLfH4IvGA01z7J`
zJ2JlsmR?rEkN{B}_N?e_M`|5L6`vyOk0KXYN!(2mrv@`&^rb~5C!7<-XC&I$@Uj|C
z)s8TE`qluUYFbc(f`i;wzBT1LR>B?+V}cT~pRHkq>_fK;=rtAI$!<(*UxU6ot6NEN
zSp3-B4nAWwr(SOt?Lv3nB!<=%grSAxBzp2j4r?`Vcsk)jNLEK;tY)#JU_NXDuSE=J
z6l^zOxZ96o^jnMfY87cq-I6D|Pgv{B<|i>LWYXP2lcKE<;ux+w7C2Hy-g~I4JahVu
ze065NR<MMoP}92{DZnWsu>_yn82#%H@WeNis9^Jy^N+24;KXRClnk#vs>W*))^8bA
z4fYF8{{R>opn3QB_<!9zTlC`0M})7Pz7vRTD=1#x$DHD_4Y&!~K|J%tdX~2~>_!lz
zjz&5E0LH%d^4m%!^%N7_asEcJUr-L=3(7nMg0kX5zevI7`qpPn^zT<|sLPwBttoQf
zxkwWvyoMWbLxK^Lm0;v#3}j<9h`&cl;w@3ovZ94x_dUG^E2^~KthGV3#f=Tbq8w%$
zYC2GO4TOz=e&6CvbGqiEai>vfw_q-D=P)8U2+5pfa{BJCS5KzS#AVZy$|L8M$eOQB
z>Ma*^Zr`eHinYjbB}|f1<8P!K5`}_NuH!zVBRH=V8BP^>++N)B3B_OidDQmH?vxOg
z;uR&CtUVQ8s97Z{AG!*&^c6!FBeH;|kBG6{r;6OtuPWc#3bmQS>4VeEEu9xosi<3a
zl>`uD8x@j^GBXO?rDXpADI8Squfe$6Br=8zPCSjfz&_pa?OrD3B|#}mLwM&Y<eK}3
zBtCgK7~qjstD+z~b<z3{UfcEEy_pV3jc>T2lr;1`{$`euf_dbm;1GSjb+@JrrwH3{
zXg9}+gd{0g2X0SufKD^pJXaXZj#Tm#g!pn%ov$>ag`|9xo@><I()9(ivryf894F!m
zhJLEeeHz=^ngxv)3?ajqf;{p;9$8<UwJ-WrdfKjbpIN1cVCfD6q<}$=xSoMsy>_@Z
zyM4CL31B{{LFWNha+D<V{ZuN9LW6H8JXDk?`$ChP{`DnYB$BB&SyCoRQhYGuu5KYY
z&Iiky$28*IQCxwBbL9utxZPIxY8P&-(G9>8ybtC|`zNxxEB&6*S!Yqf&yrk5(oZgU
z5Ikah7rp5*wv;g0Bhdc<<6b6QM)G+I&jgMIdG8lgw1lEMNjV7#PjXLS2dT|Xtu3k&
zwu-Ei9!viK*_HrwXV{dJwET`MPMsQ+8eG<r71evnG@cmu07~@Aly>3Q0@i%KRO1!k
zUjG2fu0DsoG+XXUxH|>geAQf9RvckWt9lRjf$ha_x^JQS!&LaCh|w+SZ0*GPVY1=I
zc-j^HP6cMmdbLb3r1=Gl?`Y9)6-R(P)q2A&x~+ty4^<y(@?67moeV|=!~u=Rjo&)j
zZ(1)@S#D0-Ch6($<TT=2R_0HKm3G5}$Wnb3oEnAarW(&r+fj77*d`|0?m(3rY^J~;
z%v&ni{_q*B*+QU~aGZE8ON+`50lZ^ABR)%5YC>(X6Bsy^HjsEJ&eQA-df-Btcu;m6
zH=b;-4!FqOwOGgsNbSe1YS+7f@Q1@AAw&RDIjr`P(T?f~l0csIvQTL)CH8+iYW5=_
z5$>Pzs}^2WqR{gE4zfp*;C-Oft+c8Re{@7|Iq(n(lNc~S=Y_bnZk%Dh;$X^{s7WfC
z#B>K0u{@jreTSzt_O;FgMtTyQO7Ilgl%7jxwtkhF(Xr?BdixQLM=ht~%-sAtgF#6{
zsX-nfP&}b&$jIkAfduBX_}BKBkiQN(n}{B8vOy(DY^;=p1IhB^Jk{o%sygZJ6#xwp
z1WtcHy5%%4YL1~+qi#TBL~xNXW@bt0>EjCH()V@+wNc_r*!eiv()WOVgP+>0Efy{%
z*Bq1MB?%xTt01pD5<R%8M?g%A3i`x{R@#}6wGiS?dCzSB07~c&h-D%xt;;?Wz-MX3
zE2(dJtGlQrxI3!ft?}jQjavb>BqZ8yk%Xws`ff_RHHCYSu0i%!%CeR_)N7M4EmA_8
zeUg=d>4V!9f$OxWcWq&%VMkbf*tXY%lz6z<7VuL;Jo$(UIQApnzVF!D)4e^^Q&A#o
zQ<}9r>{%_k1Fa}y7&z^c2hf`F642*6G4@^o+!n^AQ9K~$o<D`BeW88@ddkrBR}$sH
zc6Qsika9}faY<=P9)!1n^h#={p+u=`TGXYuwG}ODQBstBNhgwM&2zOJ9`fKKSIe#{
z3e}xZ2n5U`yz>E6IROK5i%P)vI5qdBSS@pv)VEtjmf;TG;c7IPii;h{N<ucJP54O0
z2l#%~r)mq`z9@1uc#XL6<Ai~aZ%V1`+P3Fph`22+GcC#oY)L9nLrNz*n<*fm=eP$4
z+t$7p4NY{pt8|$uMh4%(Y#`&<tMebJIjhF%3>3yPzKL(`ExjrY4hM*G1Nj0!A#FE(
zPaT9Mkfkvtyd8}4bMy2cLtg%t>6CRI`*MF%&5-0sDMr|+c(>v$!mI+Jf)bFE+mcA<
z8O>qawR^31n}v=;kJ=?JE3PAAihocCBl;dk{xwT~TH@-HnN8d$lrBG7)$jF6E~iP|
zpGYKg8=k!k2svF9sI;A?G)T5M*YCSh>r0Ok5Mgs4DhVWP!73>U-MA2N067>nPomAF
z7y)NdUG7D+d6N>z8vy6s*HTYBas^-`YYXgcL2tjA{w>x6!R8%OIL-(lk5E!dNaKQQ
z=OX5bGUQ8Tkr(0|Qq;;-xhOmLZ3n(RtCzl~aNAmDyUWW-8O#IYx!ajtkNrLUecNAW
zbAM5;XpjeHWC8|U`fnyAa|REFHYacPYdRGEih(>&K}v+{vfEPQEAsAXlmdXR*iw|T
z2m}CdMO|}{A9%gJMa8I<sYH^Zdy-FneQS5PmSrWx!D&jAw+DvHNy>;(>=HR9vQqjb
zsMDnHI)_k}w9|2bdIU?76x-7Wb#eayMh9S2JjdnDYU%XqRdbt7v-~fjYI=ROfDhv@
zsO%Es#N*I(0A~#WvPp>~s&%NZ$e7G%Ot~fZUQ0}}(n{2|sNpF}M<kQj3hVBYeT$x!
z#7#riSxdIUQc&ozMkOz;J;Gme{*OFm3Cggq%z`mrZ?Jxew9L5bU2Snn9=O`eaP8oc
znEoqjF1e3FQ-lNTRy}L9?hvilHpzZ+(~O<XJ`z*=<BGebM~Q{;J|CZ+doP!2T9rz5
zjS5l+GtbC+b5*gp>E51M4YNr=w`ogS4i44>J}F9jl%F!yf%%qBaqC>?uYS@nTa+Q`
z0<BMSe;yp~5UmL$_Dgu-UqD54wfCdC3sE|^HD}&hjk2_@F{ND|Q%O=l$Kjz#2exo>
zGHYtF+qCwLV8_xLdIgo0c~$Vyn~oMh_1ZTm{LNF>p<VLpx}uXm(hm+gImd*V=m>9y
zRunI7?Z@=#xz0P20)0%Mm!Mo8$4$E1))@p$v)rTG*0i`x_ET<*pJjls7QB0as<U+G
z*lJ>s%bMR;#Er3Dc5QJ~=H%zm*EWQo_YHJ*tm>tYN5wL=RpvFSI2lez+`sm7lCPi@
zfVykzifxAE)rM;@Tt@cgUR`Q4dr##dB}L4rb{jMDtvXjaRR#uI15+^++DM(F{Gxeo
zR`}I*Ct`qYAaQ{t`nqLe?O$dtk67ZRGOX`i-f#0rojv6!{{Xa<6u18X>Wb&Tw7*6)
zu7!_m)H(_ELbpwQQDj^GAiR_>VOkd6?5k-ASUD#L7~_h4R_nI6FZg!r+!&Fa;kdEm
z?r<L8iQ<k22MGXsnyKH^I<H>HVY|iB>3myCF1Usn3PTF~prr^#5<3j@-{)Hu?mI@b
zQeYeLW=QA+2q&+2fyk4!-h)R`eeY>jvx{5rNtXBx#(ai6mUpIl2Ip{zbds1BWTC|}
z%y+I$WodaU3-H?;(gKu#u2tnbN_Qlla}3yQQ|?gMjES?`il2va5mrjyDI^3GehY0R
zWd8tY;oE{wI2O);kq@WQRb{*xEiG-KE<1nm*oE;61u6{3S_+&{QAt)dgSA*BfnQFk
z>o_wY>E!7cQEu{JLXfGdZZbob_M_z+HadW&_Z{Sp6@Uf`Pd?p~1wJBk%q!u0aQnke
zl+O#cc0k*ooNXZbu5;8EmZeKuaHGdebiysPmcd(b+FG|HB}9@BI5{Vr_N_sC+Q<)u
zxRd!CPC)(ZbJbd<>%0qnrJH1XbC6K#UhvxhsHtUYKqW*aDI0JS2d@IO)G)|a=5e(g
zsVi18YPr!kE3}{=!QK(SKb}4-<nr88?e9ukIPRf={{YUtY*+)RGDMcbPjD7E`H|^g
zL46^z(YLMU$iYI%1N><+Bg|RwW0)%g3JG77*O@K@qS+0k_ix4V30rOEV~@iLOq8T}
zipd$k;O+G%oZx$Ws>g+Lx=Ol2w`wbtlO=~*gv-ildzox){M!PvmhhmZB}XaejORm-
zGF^q%q{CWUd9b85=VFwQK^ggl5&PAP(%n~UvR^EB3#%*{k)2seq`$T^EfM&B9?~%4
zN|%!9Qg+~X#d}gRa#eNpBFbcjNdU$(@jSmdX9KEq7NfVv7df_DyY?w=A*hlkTf+_s
zOGqUEHmrVbH{fn5!3jA7PnT>|CYHnOD{)_jr=4i01YnXg@+0aiwWh;5^GmqXZd;&U
zX4_c|8+(ddQPz}_(=H{>cBwuinE^X9>Tpjx>sv*?Nb2johWQ1%%ygnKWo*t`L~!B?
z!qRb!4cvkV^vZKvRp{_Tfx@EFbrEsJN}%tF$2i7vV{_{S^i>OX_m?pdE#Yst<AE&%
zq?I^xfB+nleT8g#e^To1lWJh?y>e{V1*Ix-G{zL#UqB}TXjTaw@PDOr&)FiwW3^xJ
z_X(?wCi<qEHofl$9A+xF1(c`JM1+EIkT3=TIqDr#V76-8QkuEit@rdc5Bj9o$ayM0
zp*zQwUc?boO3{~;T_$636XpAlmRCEidqqyp?Af}96EP&7xxk2z9==M3>8ILm!>QF8
z4gGSo{q0G^i;(IAPN-w@F99d$pbvai>oMzYp|`mT`ol6~ED_=~;qnqOl&v^Y73`#*
zJ?on9-)3DGtJs$R08FoMY3b=wx7+0<PsT#hFj2K%jNhBTD#6GDwP`VCb+_#D#_PqW
z@BJ?wM41gM;@EAx^M@0aHlLG#50z_0{g5={wWcsy?|2UabLjc!mCjsPY1f20$>o(l
z((dV>1JBV|T}JypYwKf9T>3-QJN3bxo4)CtaZij!bB3S53r|0lc<uR=PAZa9e`uhR
z+O3+w-Z7Qh$<NmSWc=%-v=3J_KURYcI?O3Il%-2Bt}q)uA8dq$Zpimi54J^Zn!BSN
zH|k6_;%W^!3fDOaP>nX)+9SN#Bf1umwL`y^VM96MriH$bsZVD}2aVe1fZ^j2w}_F}
z7LzXSY#rHLvSXfjy+9&-_grf(C)yQi$g=A7fq{W*SO*_LTFuX=ooKu%3cKk&Sv;pZ
zOZK&_r#-;P{{ZDrtY2r{P0{(m%e!c~>GzgX8u1micqg1CE~h_);TSk1gU;0}2Nin|
z+i<9pke|)T6|+vp#@zQQ0DJ)bmqSjAu9zQ5&2vwSi1-&PB0ojCl<TT;PJ`5>tsp5z
z+Ps16Gh3#N>2|snckLJb7pUUK68<9JB-)mxMR=qIZcaBAmJ*%Yc?Bs@2at6Bm2|nD
zqg<|WB`#DraUvB7QP7nHJa|U%qsl?X;GC-m(zXfRF}(El5munniE<fNhO3hb5*PrS
zl@$(Ao&ekdt*eR$^x@@)g!3LAm{wG6YFyQA5mmI_+_ZrNJ7E%F;E+KC7Lo`ct*&R;
z{{X3KXASA6q=wLj+6j3el%$eRpKo$=&JAnH`!)3wQwYt-vA<`H4F#8%E-Q;#)>XKa
zp(D%y$D1H}dR2NNMv|o^xa_G2Dp64!AN=;M%E=1bVYI4b#6w2`#i4jm%8v=b&md#B
z&b;)hJau1ElS_*lOcTE-5I0*M(@@tLq*QHp)2uh)Yh1#3d(aOPq~Jh-Cz`YDeFN$y
zlXaCnaK2sbEg>b?u_2|06u<70wJ0PWduF#y8`FvXI)s=yQ%YZiSCm&IN^izf>O3D5
zkT>LUgT^?mI^C~yM3^z6K(pH<&PqXb4ZuQ{G2ha(rsP=W&s=YSiw;s&rIr^M3}liL
zIOo5mbvhf{aB4ZUgCaAW%;SDvb@Gp6%{@R?eLH5-0tXj(@l4`Nw-L*(!gIUpf3qE&
z=>0))(t0-k0B^oG9de<^VQ#tuz>F}4R7faRNWkO{$BO6A^e@!k`nlC#{4rnis~=tK
zD<+e*OSHFSfcB@G1#B&$9lfxS;x_Maj?Qg42^{wA-nr=znMx9n7D7NAy07`x-P0J#
zkl6HITD=-nE;~A9rZ?g1`~DTa{{W$WrvCud&Z_?a;fntNoge65so(W;s=xSRzvo&X
z!L#hY{p!ExOW@i5RsR6*SN{My(^RW`{{TY$PX7R_jaB~u!xjGkI)l9&>P&W=c1KS&
zLrk`kwXJs50F;4}Pd<XQUxaJffBV({0M3ttXPl)(9xz-{2lmYoW^|iz=4zcX+@vA+
zaxV}N>J**HakWWoC=u!kNd$U>T@3z@)@$l@&5cE*^mCm#i+P%EESo)-b9RQEbHpwD
zF!;dg7zC$h;%`Xr&2z1a;EOf-&2n2xdAoJSEVVR(5>}R;Lxmuo0U;P4TFk-KtU&7P
zI{H1iOosJJuVy=HNO-cTW#Z3>Ffvf0k7M+rEzUljv1<O8bpFey?d-(X5^a}Dt(IDw
z0!`>Qa*~H2zEV8Tcn!9uR7o3~Q)3&&YtgiuI?69atk%-h1?nq($Kz)<+ES#lo2;)E
zON8S-6lRn`QQ$TOV6PgD60Mpl9f`TNhjg@gZAOxp!dyz+xVbHt8&Ww+kQRZT=1xZ(
zo$mM77j8v2OGT<pgH@+buGou&DF{L%%ac8FXU$~t<7;&)Qc@GQVR_7O5=j;tsSB}c
zn_ZJ#=xZxhD=gVEtg@iTj9Nr@<EzAqrFn=eb`z}?D1K$K;jM2>*zH$l=0AM9PKuTs
zX_hVaYie#cDT`QIiko3hHUmfq^EgT6Nk|zv8CQCle!OXoMPSy~Yu2iZaA}9_%edT}
zl&gI9T?#|UE~xE7n_JDSCzS=K+P#`9T)?vFJI0#1%+&T4r`+1OD&?h}X}MBThP*Km
z^5c#E5XzQ<6hKncN)^TkzOy=A2E_iUUZ~X4ZT9;Ews4;g$W=0GE-}{oNJ|TODP`oP
z7+M@&)Zu4w+7hU}()etZUKOcaIv7}D-o?~fzt<F*4=y`U#6sv##FyH2AKLhPTT`2{
z#eB7gP%V0n*Kvz#vs~?qxQ#wsOu6mKOD5SKM0_Q{l&N8DxXH?r4)Euu+WJE39l8BK
z14`-}eZ=YC;mDS$j=^!CiEdnJ(j_x3l)2<k9}uR?ODNoxugsDGqAxzMv)HY@JJFK#
z&BO0@?ibt1RG00^i7~Xc#2_Qc2~x&Tr7cO?wIrp$p@K*oO|wVYbvH?LO`<#~adpM&
zRqjQS;HLvBn*4bPPu<R|7*KV!{t}d-wbsy)!-lkdRe#g-G}fKdx=!15jTXy3e79#@
z-)T<IT$D#iTAFVuXpaK{2~vPaPneQx&3DxaxoEu`r{l3AB%M0#&E-r>z;9Hk4LaFx
z9%PhwUC*uv?L=99Q*VnOr9CW|%od`}n5{waZukMWp77^1lm`wsD5MgQ59JvH73XJ3
zX^0wgO<uKru$yigf-CYFi*2zcW04Tlr(>zt%HM2wS!*N1+_ibe2GCXO>NiuD)O&uF
zOv_RrU2Tm`UDiV-DQbMV4z{((OJn;rFT&igFrDjB1Du~^_2`Lu52mnnjBP^Hwk&g2
zsa7{*IH?S-?Kd%8ZSn&|V{%<i<M^t|6ab<q-FiIsn6uob>fJ>a9GJKFtT8S2_==eQ
z&PT(r{B_40(mW?oAQGh!ux#N<SV;KE>7}gRZ#q`bs$^WX#i5Bxb|2h|Zr?6MR?CuN
z$CKh03y27KC2ll?I9VVOl#}Pz9Z;FA8D-Q%`=aF=R6l%%rkoBp6|aSh9y0)t3e?bu
zjHrMWfyX2ajE<mb$k*$(wbRz?<V|UG6IPgyE;6mQ=`zsjACS|4_^yB+aJJHrkdmR5
zC?}FEo}%fMg6VhCFmzPeks~WaM!(-CJ!Zzpz#Y<qNszTV`>IkA;U{WBiag{M6yp)o
zlLjk#g2Mc{c1d=t{B?~-rv4s8NpY=?$StXm>XEr^4edOYor*~%B%=!S+IqJJ*DFlS
zZYBAr+0sA4H{k|zaaLj=g4Bplr0zq(X+p|ePSdcUl9ilzZoNadB@9P{BUox>H*CDe
zcIl~ZfyoX#HVctkLvh2dG|Mgcg=$b*oLMKZ0W?MQhti8g-9v8DQFU~uwRO_h9&9M-
zv4p}yuR-{><39SI3l1qb8=Gxt8<0;WNkv@Cf%aN;BLTz(0DfaNV_CY98r9X?7P(!n
zOVMqOKy6UN$V-lVJ+TnU3jCugM&X}B?^VQBOA%OUSSoF_q>=6hD5e+F6slBWh@(oS
ziddpTjTI_bq9~C|6)G`BD?OT)Y5>#C7Aj!V2BHlVQz~H7s8h`nRP$Y9_Gq`=M^Ek-
zT}JZ{*pkz+Y*Ew-o^1i*URLhOZ^Q&8J@OaWU{@w)ufBomtF-Gy^GPu!mfL{|bD@P~
zEp4gXy4W3#)vtIx{N#4VHmzXQ0%BFJmO;8}OQLc7AI;%xSAM59=Aj5nEx83@O(Z2e
zZXJOAvs!k&xJkC#W6HO_S#kG*LL1-&lgK|TSCa2yN8JH1+<SCsrc%m~l`Tu>AYk^%
z>}y=q7l##W+bsAGrC1I)ka6+}9<_4#4Ir<jy|k&*B!~l__f2|<#~^snn<#QR#>Z3Y
zLGOyiUFIwwj<`ruw}(8;<vH2zaq0WlkQ>$N3XC`s-iFyqT#{KRPDscb&Jr{14t{mw
zlcsN}x5|DsnsVDiN>ZL-pA`t;@>Gn0j{MbiOPC$O>bZ-(WV9dCFuTSKPs2YSit7H9
z+h#}5dVf^i-Bjz$_<};Wqbgf|D*P}{sV#)_^s6T0tpazgk+};yn;xM)-%;E4tXnQZ
zvRdH4w=FBS!G^?m<ecTCHjtHm;Ai)$*6(|ii_C}Ml%@)?!+`R?aqa&Ap7m)>hlFwD
zfUT|QI;$JoWx#LnS<Q2;W9kbVP>{x5L%DHkKa(F`)lgjS;w_;Nw-TkSBmt6CPYM3H
zsa<8<A9-b48EwTWO{Ki$-K1_MN6=(&G2XQ&<w#;$9zutX)2V$Yz8pyeAL<7cPk*S3
zQfbl>dG!A3`qtTv93yY9)mww7I)2}6mv7Wi{{DHz1W1&ZTw}pnPC$-QK~CRwWS>!v
zDxKC^5#13cB$%_Gyy>Z~hFX;P0z^lMBr^6mIRNcgz&IlV*7S=#H{B~~yTrJ-$^^Gv
zn8$*Z2b4mRrdR5nsv$u`&<^>nH>qvHkJHP$DM~iThNlXa;XjI%g*T6$<cxi4;^$Ab
z)GejE#D{#xp<f5J*Y$lfR_!aj#PLJgcHRgBVH~3ht!M_$0(Ymk(zZP>W1Fh4kZhK-
z_>$Ig<AA9#+DOZesDCO_3I2oDwf0hvheM7p3)mDv7$A{WA3?QLI~KogE!P37+%?<V
zbdWYWRF$A)`YfYi`il9D3T>-ZtZ{%ymHJ-dv*=NC*^&ko*=*<zm4NJ7O}Q%lu|Zp|
z4*=Fjsc8TOCqJZ<^UY=YpQh}$tvvHr7%a4yn_Ox5jUks>$9;+k<Bv=beXDCt-H!wz
z8(KZKV;J|W1^!z%xsdHqj$JC=@I8tLt#_=`=&%+B2s^Kz_Sbc53Y8vD4>{ZO!E=0$
zluVT<s?T|1YbqaxR}sRz`Xyc%Q2qY^!m_dYRRT*2W@;UqEeJj;pF-K#usPb_l;hZ(
zpIYf_G<W0Mgc1Z$oaIa;091J=_pD~EwXK^&^HA8Fxb2lK7(0}a-yb|?wJGU#l%FB9
z=aKVURds8+#8P|y82N}?R^%yqO7SY)DP{QMmKJ&5jN|%_#<FZCERa7DNN}Fm=DwQ#
z2xC^ra6G3NafY0VRmlw~XKDF`ZW;B!tZY>mI7)f+BDmYeHl4%R(Et)Y3%ar56dS~3
z!po_ovY@o7YAHRl+P$VK?oAam*dz`JI3U&`4|s!N3U6;>n)L~@V4xwTwxp!?`Tc82
zSrTI#sm@f^8}NK2f(HlJ{{TNK!fw2<$KXkQw)-SD;m97`dRMJ?Hx{)m)g9S9?#+Bt
zJY{)wB}1GZD+e??4idGi+fcfv+16li@ml-;01*4hRL7llL0Kimlh3d3UW7?y4SD%U
zR?@6+m3jhuX08nz&>OC?YBkdPF&4{f=?^A5Lo%Ic_BlRQ_YTD5<D6CRZRyUNZ%w^o
zlcjC(t)V_2h7q|-Nc}}bl@({4l5%SD(@CjaoKEhJUOt@{H*u?4>G4L{poa1o1IwxM
z^;~7SD*;WdC0)mwy;0oUKNFRoelb?v^Q1N=F0$ZwPr;b`n_zqbiknd*%A(4K06o+J
z7{SIX=l=lF_fy+rMtu^kbKg+Qu>*=_NgnA^xL5dBjeRQWiNkn@hJTf7Z>`x>1C9JA
z$M@Ufs<O(;@}+H7dxM(zIOAc$Lw-Iv<BHgCiDet%2&O!!%TrPjv&@C3f|X~~8rS1o
z3?&4qqNNOhgaFn+DZkZ9zH9h|uQT{j+_WTQc0PycUU%IIYXPFNf15ZJ_K`8kj)J~G
z=L3OXDbm!khSJvD4(T~2qy>xL0btPbo4Lbz#E%7+!ki<3Ju{D%b5`A#QB8)1qPF2m
zRzD5o^Pi#mRY^IeGN#akI_!tm8)1YXt;bfQgrz7Pl1~Dxtu4`QaT-i{*Viq2VV2aF
z6&hT!xeFb_3vGfEoMX&JGupb%9<9ScWjb6<o?MsDb<Imm)9Ov-VAng5$v+H*YU%mv
zo?H9D@|f+kr6sg+oN>YLlkeY}voxGrbl7L_1{{d*hzl*pQEa4rM}M7CR(T7FJ&S$8
zha=0{T|yQ-sz6o_71-jfXnM^tq#+M6u%v)g4<vl6vJ~1z4pxik({(wdW_BRs(2OnT
zS!nBSv9h%mX-XwU%HYURKZdM&<ARgydmcr7EN)JLZ)PpP2E%QHD`L+ie8plDtJsv;
z^A7|MGO>@_{{TMqgO#j4>TR|qIpQf?f=@m3UTvb_6?-iza2B1GL#f>=(0cOL<o#oA
zj{-wYt8MBi@LrF`LYyhWT}a0vVDX#~O>p*)xxc1v!J!?=EWL*ZfP%80PC(>#uB+;<
zuVUe$r`l$$2QFzqX|G%*K|y%-$jHxfE1BD}-NoYNaf-)?({Rxw>`*=oecKYJJ8dM4
zk8nY*X6o9V)yt?vM(3`_<f(78yIn%n)UFQ+4-F2-`ayv^$uR@`!x@mao}u3+UF{aO
zUAIYM94RYx*$%K!gt)YXp#YzdQ75)=0XQ|I#Dgy3F%aNIdQ7#A$z`+>qCNhfI^5yw
zSn;B}YraHE!?DzbwCXaI9B`78-_VchDd;Umsa7kjISF(}WQ9i!EH<<ek~tvdJmVd!
zZjPSIcD9=i7mW{QX<CNSr%;ys`k%=7tux{$Sf$8dxgysswQYH&j}2)*-b#mmo-1##
z^<PjzjPwW$MY>IQ`v+9Yom)rTHl7qm>^<{aCZfDE7Sz+T3wKM4=mI>KBQ#YV9k7B%
zLPmXaS;<mSA4I}L88;<N3qfe1!T4(aVgLheZL*bGW*Ycg)O72+Vp_`NH>6L>U>_i>
zc+6eVC5bnC4f#$b;_Hs4I-M>pM<q%dcYmE_HP=<fqPC|_*p;>jWH&k25w+JyUh>*f
zc}jNyl0YXI;CHz+&X=~!jVkM@{w?c-<fMJ$9!Y8R05~Y;9-owg53O&i(H5;)VpWe^
zz+(96V`M9m*$uq1LcBGlf0+&>;1QgCL9a@JuVz{ty{|>lw{;;>df-VNBxBDL=_`hF
zN}z_{WEN*Ore(5APqwjzA;g`kNgm-qij`C@85QrcSgzWd=H0JN+a=xZPNhpkXpQe#
zNbaN91dNQ5K;(PZg1W2hnPY;TEvWB|to`RId4VB$8D*A|g|^rpn~Q~K-w7U-n;XXH
zUesxJ)dMCKL2vs%bsBM3#Mq<R&;UEGR~DPeJ(3cFv!C0F`~Lv+a_T5^YmhAnPI+0p
zH-J6(8OQBiocsvLDRIPjg(r4aqu=`CyprUy$!)}8L0k|3HN4wq9;)@aZ5KcUt|p7o
zePMCGyJob;fpS|6_|hiFoBpW4&Ni*pBoMszKuIUK;1V`#pV_NZz_TUzcUxuF^iEB#
zI#ht9`h-5=2~vl#2?yS~ns%y*ZMLps-d2zaLtufuUr+efh~H7!csV67-Y%&s^C_}g
z1bZA;yKF<HSW?j0P`HMe<)7ewVO1JO?7e)KE<BBSaffNP1G(sso-WFB`<wBx8TBBj
z`+L^ed+B#fw2Z^?HkTf0<nJk&d~pmlj0}^Ite^J3YSOi5T4uz3O-Oi5-oaZ+hb$yA
zcVH#Leq8a|sf(TNW%g=rSBYx4Je~rSt;tF~QjzFC@@rP*med$QXJ|(ww5^*{W24?N
zh3ANn(nO9BVo5z9%njo(x>83}^j4FGrZjYDklauRQfw>~I^gsQl(CSXm?||^-8#!V
z<6M31Gi#96RDze^dG`_zuH~qt=bZU#S$u%g5zvIXTS}V7IdLTAIQ7ps{i`b{KwMPA
zNO9YAOPY|M5(L|u49LmB9z`e=<PpNKepSdFe(1OgKry3`A6cK-eOmIzNz$o*-Pa6z
zrVHEwByYJA2Q!!(tPY0icBScs?&WaNvKY28IbkxQEuglX0Fsf8;HPr1M<X?AqwSlj
zyvlOL1#Ra9CEO3{Q=Z+8QhJiXaIjBy74`#`>6>?k-$_nKZOJ@^4*Y^g6|60z<x3=~
zBxI+yYOcMNy~B&#GI|mx&IpyuzS7d}D*zl0#AbR&DDqtebNgIt3!+LOK!q9Lj#f&X
zBc9mfkCkY%`mxkKSv9Dryj`AlYSA5-kcmQ`QjXN2As%HCP5{kmHu!JMxJ7Eq9r=?a
zEiE-2hRWP=#c&doft3<_0p7dwq5TYp(hE};okZI=9eXt!hC)^?h)}^o4ttD{w+FdO
zc*$11wu@!j6HbVo$vHn0`}~#{X2(gQ31BZi=-zyDFglg5^t+%I&Yc*#uc_c(^?Ha@
zYkG)~h_0U4$-~blJ@c^#BxHc9$Mu7%@$Dtgyc}Eil_h@&!wbSAp2c1v7*d9LP|iCF
z*?Nhs=0?1K4rzE2wN|p6$sPm+oU+lt3Mv^5Gzx}PNYB5mc=~ttQH~!*rR%)mf4dTu
zHEU`07}3DwA!-;aAfL#bBOvE^IjoCnY7gu!aY$ghV(vw)<{QYIIoSdlNL1gcr9}R&
z_0s2T2Jz9Oknujf4F}VHj%$v%TqIqZ@Z&*Sff8?b1+8FXf`+q|I6%(>fP0kWS8a5|
zq#8%05WFov9L>Bqjk4}?NH00xI6a$B_fzSN<c!wIa=*f|Ky3<BcGzt;8)7;e!Po!*
zB?<hX3;+PnYNEQw)LlsQ8CHEQw$v8Z=_&luiWD$}r6l1BQN}aRsmFTXr*UIrP*G_G
z&EKN{=6Mc436e+yCKiRw?e?$*77osc*`w}%%z2(uzH+wyvGsFJS@hJjPWT(8$*>=T
zZd{zHYYG7?AwFb`6=3mPYdY|`o0NtHuFWDsq$UJ)snr(;<yxFk%ZeM06ukF23ia1*
zaPFs3w`#P<H;bLo=Fs$K5|yp#8Nf%0-;DPP$9{2LztcanE|=1_Sn_rJMl}|obsL{V
zf?SInlgb-!gr7iEph+W)1B$_oxYTO6wBVT@1CZ)|{tK<KuVL)9gI{veYCj>M$&N-Q
z2U*`Rzdxm{sn-K(Q=TJ)p#{LD1pfeeSO-6_`U?9ghuB6{y$vh#9QOXanz{bc{W;Tp
zJJxXj0E86WXje8A>foi);fU%;2fj!`@(2W;cVhzrs%r(GRB8#Yv8QcU3-5y1Q;CBW
za#Y$q3EB<^*0hUz#jS%2yR*NyxwdWGkk@s@dHVRrMU9anN}JfxE+Ip|twu7ISGDYY
zJxydby4#W?xWS6^ODKQG$_f+?3P|n<BLr88%ZBh!(@dzII8aaY&3TF16`A1#Jh@IH
znln;~3_OOmD=vj@^KJ6*eKX#(T3Pt+-6FLvK!VGz0ORG5{?&j$SB7!8bApg_>N{e!
z*z8DKs#=4HDL5V(+$!Md2ieB+*4ur;;JcePD>Qe^aV6O0*Isx4R1(-yMgUOCi5!py
zdB?pvZm96a<f^Od$~G3xuW;@b@}HI?>{X3nQwz4-tZ&{}nQ4sTJZ4;ZYq!K@+=VGm
z1nvqYB_Jyxllnoevd8vkldUXEy3e}9(`dOvWw?;zTN3An!2GT_K}H=?ah;d|aCcWX
z>)wuE`Z;}FyHQM2@uoJT5^D-lnUsOtC@65G<Ygy2atI_~*K~9jU9qkDX=9eto21*L
zq73csWkJ@`5>$WM0W0U;tSB08xD+c6qt}r5O8NG)ad&58%lit0h39bx>LVm%#OylH
z6zXjkt^UuNwguIo7<su05N-?|@ucH|f_s8SLXf;1WR5wm&glnOt^H8684%Xod(1SY
z7aM<!2}1GQ6OG6?J61S6j^Nj?sO&(4F$vUm_HJ5BP>~wo+s*imwD=xHamq^YFtPbm
zk=T%HmNnN&btghEiPv2-lB=bKugtfQ9C9*M-Khy5owJS{80Yy_f^_QAxU;L;(hx-8
zoH@Uqtvlm=2V7D1mV+B{4Xqv5a(7mqhIx9ocwJ%C9VG4YBbtXv##`EsA_+u9$@p)K
z#yo{&c~$`OtFi2^FhyCR`tKI!HOMyk?zMGcN)OuZv6jS^%2kD=s{myx;Dsa_-a1Fs
z>wi;i0&S=&EzUYpna~P~i)YxYw$skV4&ZZxky=mML!hYYCB5BcpyH3>*scEntj2H3
zspv@U>G;V5gZh92(Kz=N4edVO(d0N7Ep|XXBX*O#u(yb2N};#@g<sKMh-knr8+a4Q
z9!Hm!*-b;Cx@)iZIjMBeu-$hRChG|w10XD)?E|g(7Ju6Z>0Zlji`CjX4*M3NcUfDI
zvP@a+1WpZlZBSo^>VO@#p-0f?zY=MFtLsfI6d|ckTq3Y=Te-NkDZCy~m1iTL=FM-G
z-?ad3K+mx%*!!#VzXo#9l;`yjk&<!p=Buj)+{12YnHxTt1cTH`Yuo<-lh2yFxYBMY
zfetayjv?vH4}$D1H`E&*w6(~B`wE?Ekd;Q1#Pk3{PnAu$+KD*H$Cv^$&%JR6+7F{m
zbc<O<MTc{mV)PdEw|l-LjVZmM<`j4*Vw94Sd!<8?K{fQ%9bAca)n@Z-yF8YpH{i=@
z)TK?l0LE68Boz`no^k-^BC#D?>qq)XYfeICqwv-ypGsEaVF_`^cBh2ooCKf@lauYm
zZPBk>_H^IhnU_Iq0USI)f!;X>hX)1*N%7O|-*0y`{onI++n0>})*njho3)-wBU#@=
zX+qTC4kVPMk(GT%1B2~XzM1<*3u2jPTH6b0aTqeK<eUTOww3bsKE11*^u%@V4?C14
z<%aj3#Bq{7fPbBAmsEU2My@ZE0=Y_UhH>U~UCNKhWDl-ufBatR+2NGkEgX(V?mZ!W
zI);sJd22TVF4*$}m+rbnw|Yyh!9x*r{FhwiZKZ(<Pt+*|2R!<WRw^e$tx}w7MxWI4
zpN4?2xYLl_l{dyVg(M+Ex9ZQ<xsFBNZkN2koo#ioaEjuV3emYL9EBxA)EwjX;;gG5
z+8e-<<eAW%w@O<@vbf0cThH?WkgwQ-U4EH$M&gfZ=8A4THZl3laC(({eK!5pZMh-L
zk9hZcz!?7kPSN?bg>TaLe~Ls{O|txC=WMo=ls2#qFmuRQAdRQ|t7Elj+pH^;XYMw1
zKGI%F%EH@qO@N{34u7S5`f1dNclc3~ejP$vsw$S2LuJQv&gA}rG06G+>d})j+PTay
z^oERupD5km<(j{BSBQayjeF~X05lenAc-<M$bh*ATm7Fk^xbKwr|I21+`CP}>ncn|
z{p!G4T3dxl@jOK&gM;(OYR9woV(N3uJmRf3wp?u+ksWu2i;kb=PTZ$I?I;hOcC_S0
zl1wMTN?cAsO0X;ACeb;c3Cmp6?@1e)e}s|pBmN?)KTA)UA#q>flpJKZiR-fb=Dq2g
z{+LrK)fNk_h`gePzCIe+4k&U`l@YZ^9N-?@_N-lgncwUd-Cb>aO=}papJlo2X9qr4
z59KL6(6pXXq1cbDer6WKPCC+F5>nHyHkXHIQk9g2{@?@q)}2~rnI0;V>e$=3W<g67
zVx1M@wA5(DGfIe-DO9M%5l0lUQpGAFjTI^=iZroO#Vk=0#Y7<~DpFFEl^m#nf_}9+
zD2g;<o+!l;M-*b66hw%{DwPyP8d#}fl@TmbsZzxeM--|?iXx3HRIy5kvsA&TW}a&$
zik&>vDbW<@%|@PRigoI?T;|zs5$+awZo!=#lGE)RDLLSeVhG@akZZ?G8f;`K1hmLo
zgx;p=N$eKgeiLgaDtV|$ON##hFh5~lZ7~i`y4PA_({g{u7YnRt%iaJ;Xt)c5Xu#zu
zSJc+BIU>4`qg^G_H%^}EO;%$Os2+V&O~v)CN@2#IT2dK6As{Ei7$h8=lbZJirE|hu
ztm#y`zJF%=gpU$q9t*|SJG6~L>S0>qxT{=e7r$mymeix1e9k?;%CWjh?bf8gjE?~i
zvZ8?M3uW945<UL4z4hki%5<VyWjj<<11L!CkJZQc)|aNWLhiO`@a|F(B}r^0X;SxN
zj@56TDP8+`hy*q;vHB|YsasI7U)O68+HovflvYcH1$?BbDjrm)ILOZ+4l701+M7^(
ze6;C@?m?*Fw;)9&DQ`LQsGc`)eREs7t=E`0Sr*q}C3XkE#OA<Km<PI4bCHhqvRYLk
z)wsmlw0G^6=1M|5AhRTq!B+0TdiN)eYOd<qwaIS<QqVbPK5#<k^({K*P&CCGlEB%(
z1j*$vTef3$T4)w^Zm6?ClXqyd9vj3lDpB0yh#B5+l6QYDc=?_y5v$B(%S^jF>V7aK
z54NB^4<ruYiqA2qU55^9kt8^&aAs_Z*>epz&T>dc>A=r!IPF+Bqc?nh<uFJ>Vm#pZ
zhU1W-;)LfVUVvn09`)f;(v3Pq*L1tD%LDhHg1fM#b7@7CUss9VG4kgEIg)wG&1r2z
zJ54QSA_U8O>PqB9S-?>P0ck#q$LvRcLrbam#A>*f`+c34J{{*;TdGoa_-RVF6sy?e
zcCUr1FO11yN**#Xv0299Uq@n{zGMyQK4FhfomElPZf$5fgG{x+jPjk~SY3NNr)sy9
z?`i_tjUbr7bZy0sTS$W#=^0HYq8ZfakoCZ=5n`<<J`uv4aE$E-&;;^N%vO)o{TiJy
zC6!xVacwwwWyNkk?w|3k=FO`GhS@Es?Uf&h5)y=;%y#Wkez;0V{p&;48kSbBmY3#4
zaw`lWLAKmJWhnaKb`{QnQ?}xs>f*I(p47YAe#+a3QSR`F{+VwGl281mPrNo9fwy`&
zt@SRd(-(s-GqUbBCm3MKbm4EI(5<0h_i;NpBe)=*c{WX<sTP>udE64QEo#fIsB!+!
z&{5Il+MCfv+hS#;LV(&HI|er`O*e(B+^JjgeZd};yUa{k4WTa}B{<H~oQ&7fw7T!D
zXHD+R&(wu`r{BKv+*NxZl0hCsjlDMIw~CdwRWsm%=G>@c5POQk+<K5Li*?BeX{e|{
zQ;#~WsBJ&YPi$6^c3<6hNnxF-w>FhHpb5f4Q@D}s+N*tOYSdct)YCJiwQ7zq@4&}F
zU!NR!t`Z8AGuQwD_dM1bh5fdg&}w_m*nV<Y>KB@3kk-|`aA<zmB%ZhcoO3%2bqhe$
z8m*m2sjhR-P$M|<krf+o11TgY>7UL1^?4kcS|h{82hSC!NMdb@d+=@ztqwA*2NRu&
z<2eSl3uTIZ%F}b4S-2!M94;Q#Nki)0$nDRUJ-u;XKCDaJYB<jpek-dU(O6sAGU?A9
znc)D8?m!<|Jp`4IYUZ~9N}bAmFe}>3ggO1Hyq_-hrNWq((v;+-NjN@S5Po&*azls&
z75@3fd6vP2(o?w)XAn4BN5#a#k>YXcF`Dp9P;s|*<p?PwJ@7qvtxb1_!qk?6l(hE%
z6M;>gO6J7?>PiZ5Qh5j7r?Ph?<TV;RTqNW#(1;V8dU{sWg*K3cpd}o65|NHQIK^!*
zOh9coQcokFdgHE_b&f>Xjzzwdf2f8SZel^+prvd_hzFqHZytnX9!*^f)KjCm;ket9
zUd|ANws=?0zL{@Yjq3xcov=qk(Qpo>M!U;txE=!rIT#1%L0hEOV&1Rd#BohO2qnUB
z2q%$>*yFY&0GTLD?kDwPt3*EimJpiiR+pSPQt|nf?OxkXy$+`dR^=%61Dw{&sbT?2
z*2K0La2KbkoiDR%nC?ko*6mt~J1Q(nNC6Tyq?ES!?xgX6q2^D_aa>M|vgLrZfRM5I
zQ(cvCgAZ0+9JXAyxWc1iYiWH=mG95tl9C7;ahwsH)nnDJgV=QLnv<xs7moo}<fU^h
z%8;j;agD$gwpW!UNhA^pAdKS#bMh@~UDE05-=SzB;K4E7;_1BaiH-g$$4k|}OHf)p
z#EF5>9-U%U7TcjCxd*?!NIHghKIi2^O1a=*SK2fub}7QxSE^2H8+2vKFr+l1Le`Q8
zw{9!c0V}$D+!{#TT-_nEMX}l9Yio-Nk*V&;a9bN$^23axQk5tB%Sb18aFc<IobByS
zhj+MK;khAhO1HS%bHV`#Wyce^BXQuX9)O%@n!#x8S7g+7n_?o$YR>!^48=@moCLO}
z+XyG=!6WNg=dTv{%?TGhK^;u9li>sns2|Kv>O2o}cop`mT2yWAnkhhRZ`T{o&3-k%
zuXlTYQl-cytBJ;B8N)#E*bl>@buUxJvTExaA+?B+U=aS^=}W6B7#;EeNv*R>wB_rR
z$PyzsjqJRP5Tu^p`R`N)roB6;ue0u|Y`5_)<p@#b4S*7a{>cKio|W|hdPeE@ZNZsO
zKzH#FT5P-ED?VaUIoPk4Vl$5Q#oB6t_q7AP$GDJwL*xgN{Uc>!G~FuRg-kh(0QsDp
z{{YC9(>5D4NXklGkfpo3jprZ_r@b9qg2NgIQQV-qn6uc5ml%+g0-&_5002*7K`9?v
zgbT!3GTD_KvZfsXq@^3Oqw??CtIoG;xVM{ZEh}SqOnGyYB5`2uN&*r>8YFO4xn)Fp
zZ6398s8kfK+~9IV4E5>tUTvo5*J%gO$x-6q;PG9O>(U-^DqOc-aZ6HLK+1_xJa9YJ
zfnd4+01avTQG5n2+Lff-XD2+i!gnQx!1M%jk7N&e)3s~})|+}POG1$<d#yQgbM-e3
zI8baSxKhaV^yK%WYnN-S((@)pWy+KtjM@(LM^ETNKe~i~k@6K;rc>;g;(g=t8~n<v
zx^UF>Ml@!f2{Ajoh#&ZgkM|MLdfRck{HwLS#}nd7Wk9;>cNQ0rQlah09la~hV$xS{
zycZe-bxH9?%tu%`QS|2>>LMzwR~MApRW3xKmz+uA1fO4(Z4hT2DB}lEJNI+%BtH@5
zwx#%}3c*rRka99GO<Ogr8F7VX1sX$&q2Z2aZ;H}gly1?E*D||%zYeyP3Raz}AxSAb
zf(XH_rYzY?y2d3(7zhZ?0R#Rutjl`FFEh=Z$&N;t@pwp<&}@ekqM|X9aguOO54aVQ
zGZNI;$Z4YS3B#FLPQZI$^Mjg-Zw}1Li))&94dQEqxftrN`&8Kaov3l+t6+prh?CoJ
zt>0B^)M*U`D(iL%bij3lvdaK(bxK%5QVHN^JfA=bs>e-QoEFC1j@qL<{sP`{V<3Eh
z82#%>>)UR@UY3a-;``R=5ubf=mb|COZNQM}9_0>g9)kxR>(=GMl|CrS(AAzTt<6B(
zgO3CIDx&Ffe)D#?-6n)4Rl-}+-b;U!Eyb0PK0vD#<)W2yi{`UADURbky=$<3&)1DT
zZs|R=!!1XBw_N+xNgicQB<@p(zIFrz`fbK5k8@ew6{ug+I+oulxvGT$`Aju)2h7`%
ziojm<_BcsV2e|Gl-h<ms^5KQMWm%Lf2UHR^^6_1)#oZd5zwq)47WUPZsGJf$RiNCp
zo6x1mX4Z#`TehJg3UdiPi9Uw2lG}YP6CPM;hXR`f0DB)U4`K>PAl43Bv9#nsxYFAA
zg)4KfJg^Xtnu+4NfY1S7Q=>_Z1bhe9Rvq}vhW_@v$t*h*Z%2r{r6alA6~G_mRdw&I
za@~h;wb+<P!n_MfnBtD*B==HLjyWe8Keb{yk*r$OvRj93khw5fS#kGy2$1f0!1YRb
z!9B^(pf!on`VUa+`I4h)NGOtFp(~X8@1>Sl3eMf@KBor&0&oe&1yo$#J<s5!@#?u<
zS6r;>y@jFMn9TWkb>4O{zWeri({@SMdxgsP8a%Z?Q%u8Q^aY^`T2!LxN#L9$1e4pJ
zTHAWbV$hM?e&cYpcrPI!mn|*`t~^g<5CKAoKBYMrCpZ=8vGm5>rJ^+t;+c&(<`Rjw
zBuQCzO8)>c@RBl=r6+{sWRCsKeQtdnvFa9!PTg;_-&ig;E$L_qWAyOaQL$Z*<^=cc
zTyCLdTH3Gbs=tMp*qPhi0D7LB*Ua^e7VA%Vy|}BvOB)kAdw>DCf_iRA!Bs7@SeWr0
zZ%EpsY0?p}zLym$UI5$uy8i$s<eqjVJo?rQTVA`k#Cs%H<<ES1*la1qt$(Rr=OdC&
zu5(tlrqKF7OE^O|_a(T>5aEv%!qFfcZGH6<oyR8$PVNpcD_E7P?yHKpP@^|uvnYW4
zJ7ZoDT6qAt?<;eIj#Y#0R2MYZ*YQ&K4nc$KxDy8x^<SX9lE3|4p4z%yziCy%A6f2r
z1~%_J8n2J^wY`{hfaa}#S*zge7QHj^D4gY-y5sBdJVdnXg&?xhhZ|9}X9R-1-ql>c
z9SVp%MHIP`G7d4%dfpylDq4^5%&fRapDF=6LB?~~dLP=e3F(XS^i;h@?5CqhTFJHB
z(-6A3ZKszU$mIymLP;1TA4=M^53UPXGTfgos{Q(1Jtl)#<Hf{DCL&(v7dU_>1d>3L
z1DT0E1@<)P>^pst9Z9>TGAB(_tXW$0j?zhOZsh*8khG6vgUQ{;Ph6}jxuw+1ny7Kq
zFyW84#84xVxPlTZl=>_7lGBzBo>_Fxsdej3#?X?&WCntnalPs(Sowgg6rXH^&IV&v
z{i&=FnDK2ZcJSdOG!oYGpP9}OGxa91uc_NIm+8$nxShah&#B>TfBN)aF1*wA8;ke2
zgEIpY0&yRku7R;Yv1r&%Mbc24Xv$xSB1+U$xhn&et;KnqRz1!D;9v|@Q`E1tZk^GI
zkccW)puV;WL}s!>O2_L^@}W7$Y^u3iUUkb>YbRf8$9B;ILIQS1bwO??-ACX3kSZT%
z{*=AcZG8?E!EzO1f<7|lpl}Od`C7^Kaad1$<8d9TyuSMI1~`f|_TXufM@Kp~>KXu7
z^gW(svmJM+l3E0u=hU9Q8~LuO>7?C5GfuCly67lfFHMBm?P%N^j~Q6lQj&i=xCe2`
z*fWv1fl&3=QpU1CO{t>PyY0ZKZptk4yEsyk51>9&{{V+-=&fmggKCLzzFr(l7VB$D
zO9;V80C1&*@G>|;2S4Ll7ejhHyM^_ASn6D2tBi#QY!>+htKk{{0Hbw4_g>rt57YUv
zxQ(#u7S*oX8X_3TbL0JA<!`6F;kk4J?t-<gZfRRF*R|V>0MUs&nmmWRdXqVYn)^5O
z6`q&cQK>adUlUi(Y=+uWw|oOi1Mt#2c#8dM^d3=xxT|ODpH&A=wDU=V*qx{@D=3K^
z5CV3BN|%y6gO5?3-%Yzw>UOOE014x*p>eps@X#ZzSt?f2qA)q(DI}f%1GuVBQCd-S
z)E66-+2lw>CX$CdMF$EBfpO9jcpry^?a3Qz!t+*TgI`X7;uP9TkB%D9I-WN+d?&$D
z(q(N{=-pjAC*iyRJO|ABu4C4Z-SrNqwOWeZyJ|UXM`6;ng)Ql?t9~*-N_lZ90XRqi
z44e{wLV9hXAat`tTkICLn(<g@IW_ji44EVk5z=v!lfchpgpR_wJM5#RCu=UGTy@pu
zjj$~Wb;K7HxUOTs?E{PuhSZ{ciAD#vQ}sVqy`%IE_VW;LxO_U10lX4a^1Q9^IqpF}
zAzQj7vuIOcd`Tg`5=>*v{>tOpySLPR9V(HQ(*k^4d3p@`u0Q)(MYBoj412welqqvi
z>}l&pd^cn;Qj)CpCu)+DgZg<H??KMC<tbFS?Cb+60egt~@mD8WEKgc=-inN-o?4qs
z&k&TToyWo?kfWTFlb$=(BR6Pmg4@eV&n`Amj1OU4)s@TdX$s`!#Gje_FQ{nkZ7n97
zUETmjW051DMebaNn`bc`Q&`}Td9MBYC0-hv(MxMBDQaD|Y^cxgz`~2ZFCOD-sqgDw
zo(-g{3r~#T&+Awj72988yV7OpEn8_yb{LbIl6>F#){1}s0F7K&yRx}rqV~<7snQG1
zI9${A`>PwQntI=>r?aKC1HKe%)D<o>#Q{bvhFl+xfN{!0i3$LX$x#)}e`noeGo<}l
zpQAM*4ZWMBkp@U4ZEjLY4J>DZg=D8AxLQx8bx&BWYoBY=mq;v?+->(TsLS!oVFAXL
zm1h9%2LNsPgXvUv+7G7ZT<FF%wx4ZA{{Uu=pNmR4azs?}rC@*3GD$v!pdR}`uRF>=
z_b&`~aC}<ho?qoKNbwFB5j<9lbjMhJj^qCTuB5mAE*l?QdVqSaqPtpH)YdzVj%$lU
zGTA6f+gU<@Kb1g&2q`%1YLn2q(RSH#?AUb5w!Y*!_IwqpGLmq7B7d|(hns26QlLd`
z9Tw^z@&16d-XB)`yg}ex0#XyX)PcC;({e~(9_FfFwT_#YrSFzLr|CqN-H@a~xvj6%
zw1QZ1Kz?9S3JE6zVgT=6^($1npxe3!zA)yUi5r8=5xZP6B<>^{>kCIyyndT;jv_=I
zxQFgGJz!ujcC6^@mYK=dpJ$XrME%NC?L4Q7Bh5iMTWxmQbN>KDtPfP}DFE8NIqFnx
zTW)S-M3|QlRMh)g!9&rUM+#|aJcklT%Of83Pjs8EHqBD{TQW_vQv?r*V7Hc}V;NR`
ze!rM{j8(sJwA(dn@@HG(Gi%n0Z6Oc1OMey{{H?mAZ7WBhIoy+j+k;#QuJd(aip(A6
z92YmEqjCP1v_!#%lMCNar&*uUyO#lg?qGCx`iJ|bN79M=TJ%5SnRlrgFl>mdF8=@#
zkW!P*J}e}6?gN+}oALS0ah#;aD<Uylh)PLPvB!UU{Xfy#&AEtii-a!<JFYn$_>N`8
zrO={<rNohd6hR)NHNic6>8o8X>OIE6Z1Dw=#@m@|4=bMmz<AHD#f76i&d^O*(Yd2|
z#@3~Y<aZp5_<{&O9f(%CP32A#XImr=={*N8Pp2#@oG2~5pb)Lxe1&K1OOtM$4o$J;
zF>s9Miqg<VQnA?n-#Xa3S<@wT3heZ0HwP@ygK9%l3^hF0j&ZdLR{<lOlbnI+P_<cJ
zu`X*f<G9trEQ20HF5oE(O0cBk-zh)0*0wGIrALj!4w&&>KAUU$%aKXlB>8?}SteeY
zyGuk}Ne$}*tg?lD?`dHnzY$wNFT>#~{YuLv2cOD)9;fM@!pi}h><LWjO*G3yw{^4<
z>QRqJn?7ch>PgB*K+bDUpE=v2TOk-*u3@AP`b8cy{{R77uTAV4hCZs2_KdxK$h&Lp
zCRFW;ai@71VMzo9C0JHT&H&GRS2a$~=B-fMLnQwIl;j^HyMADQrF8eruclHr6e@RG
zCxO`qplRK`0Lyv+tBY=e*1F|~uNrSi-mW&#oVNRMwxLJ^jfG_;&r{?I<kp|+pi-nM
zDk)M{l9eSu;DQezf(Rh;F<+$izNN;U4Z^b0?ro^HVyZ}F?*|y&wOIa@#+^viy)V>y
z{{T_lUa@N@9+fp-Gq!8=1jBX2Bq2^UzCPj<QM)I(B>L5#vs&%WtooFyQ4DJaAd-1+
zA`J2(HaK6KH3vSmXIxcux#W}PbC20qT7Obb(^8AD6}^WP3-Q(YTm#e}(yVqP_sFZy
zOloLXW=zdFJUX_@Oqh=#htNsm*MajH6;%9ROF#U<)Sv$V7%ji|ddg|tS<`(la{I#D
zr}~Jei%MxpcKvNAQb`A#Fb@O*E9myOMuCTAznd!!Cs=)pg*ut1)2El*d@{O1)2<7%
zBdTuihh*(>O6O|53H23W++A|x5lXjBNqNAM+R}IjImh(PQCe#Ir8R^`rdsS8kMUHb
zE5*LWLejMN3dD2UzwcYLY3xL7MootO8KfMA9YGk6um1pNtF9pM90B+)#qMQRvaL2A
zqZlJ~XR2I%Lv5XDktuLpklT<}rj>=K#B8LLpF%feA8}uq%&@4fh|UzLami&x2Pq{4
zq>=JFax1GkpVaF%l#<1!WNl#{ZNl7{4>@SPz%I1f)U>54Td}f*5RJocI3VXesFX<Q
zOK3_Fr}~nVq+k!?3vUDe0PX6I?aVKR^4)NnrAjWU8%!Kb%F^*gZr>HszyAO*btnG-
z#tU!#-o9_j>4$*t!q|F>nHv@17jM?$fV_Ek0UtQdGmdduYMpA3Aw6@rLV*k<$(t#d
ztc9y;d`DbL6O-sSC}jIq)p+UbYZUv83y)DW8fV*{dOV28mvAfbT2hjvC;dz$oyj0`
zgU2{ItTu~E&au*AN&&-swt}RN0=_A(KtDR(x|ephD_LuptaPz~EZ%O7qU0_YlCbB*
zIy`cK=Ymdr#A9haz#LH(b*F6dwLSLBWVd)tPP|QG6n}_ON)qd<2~P3>AOd+HAEB*<
zj-D>&%)_PihK|)UqQ!Puw%X^(65eT~l{#8O@tRAjN&=Qpm2N3YhzAvx>BBm0JxS?m
z>=U&NtE#n4tK!?ZK#0s_4;4F$YiZ@UuQmYOg!xG)1YqJV+V4&2m=dm9A4Sf#-vz!)
z5T{)=O6Q^<iqhI!s9`bM3UoHN5|X79q^ow-5GbK(B5YzZBr-<b{{Y$#%kT8BWtuaZ
zitTQ-SxZvx7b%TGiqLr}3w_lDp&N<7$s?0j^Owu3dcx_Z>=3Q)xu$efOTL=6BHqdP
zo62o)PsJ?-Ig=r_9+I}wt-yFGDNa&z<>{WU)Hj)3I@CA&oSD~j^%B`<v|gq<6*6tP
z;Ile8ab9PcLc<)8b}7=3M(j}+KAF*ygspNJ2v$N*h%j()aD9Jj_k25Fa{cITHqeia
z5d=?*9~41ox#Nca0QEd<-<)qDHEr1Sd-i^w$ko?9Rje$Uj^(N*L%rTCwsvGp!!1Wt
zSkE})%ob2bilBso9U(yf0A>YR+Dg?FY6$9oO#Bf#)u*IGxms9`<Buy#I`iHvcGTip
z4meANfU~oCNeLqWlDP$$Oh_a!^KOtbLKY7m_4dVY$5r2Tzeq2#HGR$d)7FdKiQ8)A
zr5S{oZOcRLGE$M@vY^XfgfM_mk^nWKVxdZoD5pgf!i^OwSfr#SOBE_ql!UQM6)Gr@
zqeV)VDiRVRk*7rx6lr3mid0ggiZN29MGGmKbqaZ}MdqiPbsW(|QwE(wH1kC&S*d2B
znsh|SB_soaM+e%wE2P@$({#`lHtowo1&-LvNzj1-OgMz?B#-4;1z}x|?|h2mP;2cL
z>pIBl=UJsa3Tj$X65}TYK>mU|C=-qdBDN@26kjArRu(s6&aWGrAmH`%UCn5;#?&mo
zc)CPQ&&J9kG<Zr;jFlgm>?>W>7CQ}~L)#iXn61>G^=6WVA%29b{{Wp>R_lT+nqtWY
z;2BK#uv%_ch5}F@0}BJ>6`$IwUb7(2xZBx}Aox-OyigO8*#jv*Ox4U68H_KWQ4X(G
zNP+hIEq_)@dMs<B_V*I`DFye=KNpW*o;b}{Q!dJO8&X|#L1g(<;d5zN^#kAbtc}A_
zrq!n$ZtN6YbMVA;k-f!t{fDkkZ=F?A<vTh;pOQxN!cspgY4l2chxzxdYV}z}_jg_z
zj-y9RhOluw^6BD#Z=&^GZV0$aO4w)N*l2BOB>BE-C*0P{(ufdly2Y(OaCPXA@2o!?
zF|d^xJ`$A2BoGNu+uPR_re?jCn0FcX78|go^KfZF=A2<$6v0WzbAM!D;O;)PQcoNB
zoF#ny_3PKTHGw^$<~Qk&q%Fqvr|*3>n$j+^KJl|W_-ZA|0}4XVA(xZ-RDBO)ir7(f
zYII_!)3sxOy}W$$?OXJ6=DpI=)2SbiaGLyAB3<LK-o!27kfzn|hXP81z!+X}jB`rq
z`+{L6Tt^@A-?qG1d?<pan(o_&&@XQX=960bm5V5_SEKHo$3y!r=h=N?=B-!h*Z%<h
ztk|3qIv){(BXOQfAu=d*F8~F8k~qk%an=%*lq@MOZo+Ugxcd)tRupYLChV1b40V(#
zJ|Nx$TSun~AoKLEygO4GS~Ih*(cFG(j)vNCq=liBdj)zaUijbuJxx<lva4|M0tZ;a
z?<-$YqQfRnN&JO{=|-?UI@RtYQ;Al~J=PPEJV!zBn{#qj($ofUHzbbSZqL13cYdwu
z)>>K<c#Sd5xedYG@|E%g4ZqaYE30ks=6H%}$DL)wE60lO=4j)BK1clVT4WaFLP7(n
z&IhQ?T~xWLq%cvX26La_^ZnILr4Q89bKcm@;voHJ&2PGgT;6Z3sfOdV3f^4{EVN3N
z;0gpK#h;+yU{>hvy0$daj+GM2`CDUYCn`DGN1}&pRc&s4r&!Cxr9;^E{j2KdgtEM=
zX;9>j0sfWCT)Fpe?JF58Puf3Zt-YhANxXfVsmvIW4v7Rv{{TpXIL};Q?@mU$>L~Ij
zAecq;Dewt6M*ev9JAdO>N!AvKFqG5owA+pON_PNuj>HddY<g8aDmx(_KnKhmf-4sL
zsY-SsC1D&VBRKkJn$~qDJ_ETb4R6>AH`bQc_SFML5JpBFF)qhB9W%6uQ`PP>bHBYd
z+{kTDASuni&69#hxlS`!7gDukt19Csj`i<%!z0X+6`Yfv_2yHF1cZ^FLQQ)#K!Cfw
zHpQA<l`BpzAjW|`W5bt#%nVBCPMtuvTkJ66LrZNHM{VbnpUmpkkfNe{o=yj_099$%
z4JU14Ok1P|lGE<E8h^tZLzx7nM0<^=pI=_psN1zg&fXH#cgPL!g(T#G?ei7uxZh^q
zd_RtJduUeSllhg5Wd7U%>0S(=>UB85Um?>ykJWAcqc@Lt^vj$}q<4Xw5i>h(ARUeb
z*qs`&S#8mxyz6bMYmT<++;fsna*zkG{{WqIBvhEMr5iFFz*Y}&>s)^c*II2Yp=Aw#
za1yede&f=wewXzF?<gySdYH%F(3OTus|Yd}#|LpdsV5-%k%RADZh>&hH6Kc$%kmG1
zoPNuz)3iN9Ou4+NT!%8FxPzxLm;`PhK<G0VSA2y=@LDAW2}r;L(z%<g`i5<<Rk?4|
z6P~uE5fHhnVPOs})snC`cNjrO10Cyq)ct6-T3U6hVMW^JjE382?qRk17aZ(BJnc?%
zjB#A;Ju)s2KQ4REN|Nf-<F734Q;R1hMEjcA)wKpSf{nYg%!Bg%*Hx$3xum`09xHe0
z{{T|XoQB&nij?wFP_-#}E)B$m5__I-euA^Q)2yQJV4rM^QeT|U!>9x0ZL&t?6YfC3
zA3kc2acX5}a5w`Mja}WH$=JRLDGJ6xBhVh%ubmwd(yh<x3wzT(yRBDgR&;KK!<<HE
zhY>sZ#Pa)LZK=3B;jE?LLEwOJE8w?xCnw*~_pA~n72{zf`m4}ay{Fs+BzeHAg4kU<
zYjH2Qh?hxm#2n|hYzq3Rr8upLK_Cv~=ltkO$wudtdt~|wLGb8S&nWu$sRNS8xud<!
zd?f5a1+cBD;JBf{KEl4*P2H0wK2(<^7eT=|B^VgT_}7X{=_MQ$4B!>;2hdlUPsU*F
z2gY~ZLxlY5!q&01c&G%bdw|;R0GtJT9Z?n*oSTVHcrLc46v9r@RG>isjz)9bRvs>k
zgJfpKBI71ZcOM!21GNMUAIzcUIQGVVRbA=3pt#+ehJP4F33+NN_c#Fi`g2xGclk{)
zw%bl+NOYtr(Y+~8U<f>Z)z`FAy<n_c@s&*Wxx7Z1?u<mA&jpRvT|0S?jl9|}PF<5B
zLPA(uIC!Lx2m~A}Xvc2p9`&zV^!@%L>S4<@#VwSThY=j{>y#6Kub}7U=~nY7hc&xo
zU%G|rT5{ldZm9`rL)&Q|(-^J#*`y=Ok02YoyFL0_1-4!Ut)wW9KM7d`50(|{S&9L!
z;${~<ELldeuSk}jahdBN$^6Du8>ZvNVsV*zl*|iL2uhuK;-=Q5A6zJ8sQLg2`Btm1
zbyBsCr;~AMD{9=*5f<FSh67QN`FQjyB}+dwS3zkV8mo+%x=*VR<K0?>QsEAjd7Q@&
zHsB#i$T<WN!NC>iy8WE=@54x4g4olJrKOhRIW6B6Y8<2?-Q4H42pz{Xt}0b%Xxnv$
zsxEIsX~+#3=acZ+a))}z!Mmy|JSiws?Cwd*RfVS>+2H>8`qs-Ir%zwus!or6a;2mx
zOSH;P$Hv@}me<*87(P-Gqv?}cIvfrmD^7N(WL0=IC^~jrz&CnbSsl~y1bq+LbTyBu
zb|$pKpPMn3(;omKXAda<04iGi%2yvxo+_s5F1G$Vzq2)%s)qs`VHO)sV}9MmN?P&2
zDpBk^06ul8U}rcP_r(?KTIuzg8g^dyx~*&G1~>pbIiJo+()6N=)KuuB6j4N5W{v6%
z$4EBpGT+{ocN4@H-YE>Mc3Vop+3Zt{5$F#!fxlkoYH8+e<<RqkhMNQM*-!GJKA&Fa
z)YpQQdK!-`3?~a=*EO9)Q7$|qlK0r{iN0TLR;MM14bPU;b;(jfgDFygE5Rcq4#VFS
z)Nz@$*sQHv^u%`UmgGKJOHCZOwPPMLs_wO%a!=4;aa@$^VdmC_epL(_xZ(Al*Kv%(
zb!1Zx>{gKEh7t=hR&bvaZb3qisN`oPA4=V_sY#AJcsz=}&~9xl>btkWI}`IBAAxVW
zitpej;-w@w<aF&$!;zlZtzJH^y|l^|WRRbZ8S*^YQ)LS01diA|=jT~RY&Qv0BuAY3
zSc$lyEi^$=&U<Gc<;`Rq(3f^1wC$Hm%96m~s3jp}d+jO;KU`I{)wLU@8g++v^JU-P
z*x70p#@g%x!`B%bLBt;~Bf8M;*Dr>)KR;8*WpkZ(a)Wz{Qog`rzi!p6Y1!8uQ#f1n
z#3|C1B}64CY;1I63MF5aAbRtG+|}`>dSPyPO<X#a36u#B1Vpt-{DoVx7WNM(BZMA3
zPJ302tF>jTN7)x9?KOxH;sAyt?BEgDCA8olkg99FE{(+|+qb&L?bpXAujb2I%I*3c
zMo`nkMFup8Ai+5#lRS=R&yuOM$4ISuC=0H>mc`C#B~h(xo$QWtm68XEj{Sm1_p8IJ
zI_oMdq^C+rE<eaV5FQ8}uutnF*m3i!`&soGMzn3w1-F~Gys{)I<$tU=Jrb;Nln><{
z_$M{0I)`Ju8PFRjZ0~Q3p}<E!)DA^+mpYvtFdJ<>x#r{7!hWaFb6w4jmhDxd^7Z_D
zLRthw9-O1*d7ewnsGD8E=V!=UUl8ksZx++FIXr?rx&Ht<#*j-p(UOvK;z7Y5GCgZz
zx5aw(agA)U!g6f6e}>x)`IO<#Ksoju&T)aBIjmLg-kW@>EXI`{Ly?qPFGg8YE61u;
zfw*@W#tt~+nxHkCRoFS)g}mxLg+om5A0>|36qOXIM1ho$axq__-3{s7zMgcxG&#(M
zFL#A}Wb(A<!Q7A%*-#+m2m_A6N>y;5Otk!MRn!eBZI%)6v#!yaeYLB~rpth>KO#~H
zA6or9oq34D<StT@5ZbokDc+-zk>wnprC8XoaXIlNyAM2V&oI7u?S<`7%2u?-9o{~h
zeB}BCs!h<$YFW1Vnyp#W_Ln?nEz0wvTd4!Xb=>ztIVnf#Rtew$eLCM=K+=|JSKUJD
zqr!@f=s;3Rj(ADI?zJ8gn$`8+RV|uw1JkcEN8ltl!$>4|?4!mOuJ}kkpSa^5qxCNH
z)QhU*DVG_wvZ5n0TkV|wBEaCRgY*M|>Q6aR{L}{8#P9Fa^WCjGInjdQfHo(cPK}~m
zYV}8LhBxKlJWn(BfUmBPYPtPg>VBZr7qlfXEVkmszABbTieFF!f(HvzZMnFNXE+>S
zSF^5HL#O&lG4~dxrCuIONJ#v}Zz!mabDzRN7|*SG{>-{%Htvl-A=HJ-zFgi`<bo8Y
z)3uNfxCJgBmg8HM_ewXcdcUPD(j%o-4Ji=b<fj>JQdF|kMvu&ROI|&aLGNDw0HJ8M
zV;i%aJ`59|GU+qSPU~*w?u`vm#iNCkP6vfCxBmdA81vn1{UOk!roA_^*c@+d&Pqh9
znLYj?X$8*R_JEeb_1Y^B)N7*}oj1!Qbg9PeEucyO?b_ndg`|5NA!F&fw*6D9plNF*
z<5FGS*$xDCxsAhe!cS!U*0K^lqPat%-AH2j6J0A(%Z@IWY3iB_?*`K9olZ8VBw-++
z05iZMw{I?)O1%m}(AsaNTzL-jOcTlm{{R(JVQpUV^>qrlAc^yF6X*s!BqjEzh|QH6
zHJA*hBV^7<X#;9O{1S2U=hODCYLLR&a7cWGl9EOa<BI5ywNAFO-fvo3*A>)Cdfy&H
z&#Qj)AUomsV<Xgr6W_Ky>zyPh$Q%}%2|4nk10ICcC4*Yqb_Q)5udV0>-{BO6Pk2s0
z{S*AJfRgmb8$!eFM?vGrkzGIbGt?}{*Sdz#(#URgtuG^bvAs<=IQjWpQThX3KeN|J
zbe6l*my7nhGH#ILOH3vrH6ctlorzMGr6&qMogi`t3MV{cWYfJSXQDr7ts09f@+4`y
z%4CR+NZO|mvdYr77Ou*{Es(4Z6g%MN&CTJZ+YN#GMEdRV5~($fM&9b3&Y2{;gqb@M
z(Z#|%zp}l0*qKV`_M&>;98|kkhcqR%a#F+STF1y1!mCy3hPaJ*w#L*pwSg7&0Wljw
zR@#S@I-!%#=}^hY!R=O+{t3NlZC7b*9L=}MWg#g8`&JY`&c8f5C)J5s0_Pc8fk0TN
zc_yJPZrE{;6eRb+;X~9D+<{)&mmNEX-qI3dyg$^}cc6HTIj56=Tt<&<+uIuSW4zPF
z;6VaJ^4dp=>S)??{R#C|skSClA4F?cQx(Sd;Ser9Wj2ft(7!NFKb(#>jN6)*OGN4x
zjK1j$qLkEm>}_Sjk_%@cO|Kri97yBW7_S64mfcgP-mzVu6D)T&6Y%P6fKZ+mf|dF$
z3JF>j{nVdI^4jJi%`jW8mnWr4hT)F<g`^=)gO5L#fJxe}KbY5vs4VW7`bUbDz=6nd
zfJ=J&;#nMzlB~F`Qsu$K{{U5yn8}ZI-eY6vWaWNoJ8XI_&Qw|Z;N0Q7P^1qhgz6Q8
z$m~LeTly!jcTF=IC8JX%i~X^jjG@9Lqn-&-;dmcKe9e14*LrYi&a62y1awA?s9`s8
zbHi@{J_&8m6gVm+0cYmseQJ|;!CKo=Tkx7gWActvYHCnrQXMB5X%YzW1Y|F$Qa0M9
zqbj+gNC(6dzI-yT+ox0^Pt{Vcb{#_LVqb=-2zeX4C8PntB`V3<oaZ2%`uEd1>(zLD
zOTXEZY(k_*wLvkAryB?_IHm7d80To=BPY<2-m1S09j%0+z@wadR^@5w^4_;ampb!h
zwJvjC5Y%~&t+kf75R<!MZ99s1%7+~BP}*D%ZAy<OCNR+@(IoJ+aTCHadMZa-TWOV>
zTC3u4FnVXM0NmgKlM89-pHnp!hp`4N{uHYda!QvG#>z{pQRN9=w{l4auEA;P=U!NH
zbQfKLe+{HQ<0K+eL<}T4gXMW6fxEr{8@RydSvI+rDNV%G5gu)}+3^@>#7@V`feBhx
zleI|5<fM_ouN}5zs|%+2Z=ASOW4ND(b)${TCy)oKa50X?t>|j={Tr6?)9K7|$L;VT
zb!SJVUV|>IYeUG8_MYp3^1&WG7Q?Hwb^icJYM8d0%SbM$1lr$V5X6S_fTWY_ljaAM
z`ubIkWsI#iYi8P8DcTCwq@0ITd$<qk1djgzwQl-rU%}Uwt6O^Z)ftqyf~gF=0-9T$
zlIR`KNY88>ADw3|ojrpN%_Z$E;>dF$*vv?HJk~NdB_x7J9l0dn4r{T~bjlig-B@Rf
zY2**@<+rM%xz=k`Ybaf|2;Md)tn&JERernsp`M;<>y*1ZNtXj_Q*6xe@at|mv^0`d
zIpC}u_v0Oj70baPBMIOR1$Dly=@t7}!jEZU?(M45j6ET^u~4Y;RgzLkQj)Z(C-fgL
z0Q*%#C+zpA8Mr+a7uyn$g>6fY7m&05(_sf`{mAw;mCXQZlSPmZNXhDB?!INL+Eux_
z<F}{Xj#0legFhZ>rlnR3JrCFKU5&Wdd=!Oa<J^*g43FkZgCviTPJO_wS5#?xwv4_=
zvg$a=jXi{+cte52INF9%v?zB;!S*=>02x8%z7Pnl64wDFE@kv8(-QWOJVN_vO<{G>
zlb0&Yww9MM;>Ud@O{|W`f(Sn_YkzyM_eEM3i1x-?ytp>_>pSDM&*n-A+@p_090TuF
z9V+!@#aeCQYp}Mc>Nj@u`#NtSzfUfni|=rsGVeZ3!tE*P)8#M3enZO2+*UEq&;S4&
z000%{sZoz=@LC2*lA}dDQpFS?6(ML_YEl-31tmx&DoTOKAdW!<0toi4mENT5r<z+&
z>&;&4P6CyodX8d}pnHM~xFFWGMM9WTi2K&}<H)zX>^U)(mm|Exg|)P_oTW%oNGTwJ
zf(RnMA+(14Fb2RekCjgpsVNKZ@zXv%n}^2C7Y0_^*_I@%KH8fBEtI*P$tej)Nd#>P
z0ALFAUGKM@Lp`g8p}pO&7Zy;IGcJ9>=?^rNt8fTf)JgzXo61K#_pb#N2@5e7Sn7xu
zX}5S9t5C$d&Pr1<dl!iakt8HxA;&`ZEC4v%PCYSR25y%a%Ua`H?hLrO3zW4YYpGJ7
zT1r;wAz3adDpE?%n1v8d39mIOBqrOAH5qYQb;jbjrqs3&;Y({%dxK?22Lz{jwvss9
zag3UcIw++qQpGwbiBhRiL{XxiD8&&+6k?qeMI2F5rHUd{u~Nk<B8?R3Q4%7RN~4M*
z$WsQPQm;kgrB5{wY37KfPc;g8qAAgujXcp5vtKzWQscUo{{T5j+s--ksnZ6CyFpr>
z*{p2F?WbQv#-B=D2nTYSSx=d_5;;nN$T{zf)mf<Zt*Xl{QD<Dy7UHyE#fiE~(eeNc
z1M)Re^#1@wv#+(38xyjO5hbVHTg|i<;SDxdu^{kNae<x(CkC&bL7=TYGU@xVY%Q)O
z#nlzfm|P2e(odBIzy=ZqJgLCWd-toFcQtCax(A=}{I34TQM$Zf6xab9l4t(_Q6E)8
z$$@&*vLws5SnjUFWSn9u)EfuYYsLzXbNvStty(_$c<~h)-0LygNmG&}q_)~|>66J<
z_dq7DEgz{|MWKjtW$$%dlotw#CxOBDuPxh5zTNSw%qzMRY7eA86|zZMf%7DK51wmW
z+wpgtW><sscGRicSEyWEbGPU5veKh;-Y4CxNVsY=$CB$#I$3TJQc#o*a-wtWI}S({
zzjW6{$djeqTA;YbnUsa9P0^L5$EP?B077`$6UfggP8Hmm_}q0AD{LF1OvUgd&TtSh
zo$2&I_5+iT-mb2Yd^}E-={C?(hS3SuR?>MMA|yH#uzqH}*+H!!v@PaXQM3)KMX+|}
zPtIXtwC74}T58^lhM#`uo1kr86sdAb$w42Kpa7DL;Nd{~@mdr+g}&s6Q7YX9iEX-4
z>#VSZD7cftvIcYY&0d%J>0;L8w)qK3N>T@|D!sJyt53>D-WN5#Wo}V%ww6=5N4{~*
zdYVEqC41AR)_+vDy|&qpHKYq=)pw5;<mzWcDgl{EkQ;RgBl0Uf&-vG)GqEf-`PR>c
zaE0#~a0PE9@w?~Sn%^&WOMR`DR)V;;<@tOj_(=97f5*LO(%~~EV~<C4mXh0rB%b9X
zgZ}`ZYVf(NEoeUB!wdwUK`Yo2)|!!q{gqL2y(Rf>#x949Vj5b)^PRq#`DYc0ebs<*
zf`W1@2_nlP(R`e=p??7>()(&1hW<$Xj%#CP0eU!8ciUJ$rOrRbxN5asbne)ndp?Jk
zqUh`{ds+>2M1|&Nd1!{+K^Ymy??aPGP+CdGdxL^&#d1W*K$lw}4t?uhb5Mk+w&3-~
zab6;sD`utJDSO5i;rD<XFNI?Oo(+5*lFF6}lA<${j%!kG`rhD5ls=}iO<h8<**pRU
z+!LP0hM5W(e8=Dw^p*;guLLh=a8DJx=*<ZZeTloR;xZ>lnZLn9-;uNh6sI1X?I%A<
z#A$0A`p$FgMRZ1HGhQT_3mHl|03>=9l6V;$0(~mc5F**^@NHJ+XIv1_EbLs2cO^vm
zI6R-)uJo&7=bDdibPj!S{Ho1DqZ~K`v+`87s?#s&3xh5tq9DsE@S6+q18PnQ0YkXw
zjPg0JB5urhV`OZsbDa09Z>YLn8y!7<=F5&L$WJ!$Lym6Sl>{rFUKBg~Rb8RFYkcYp
z-aBrl)oIFtB`F>vo>1e+jEsPLsE|DdO=xQ3g^S%%sSRci<amR!)o!3HD1zco%&)vF
z@MPgF0;La8$I`ucGf7!(Avw-g0p_q8n?`CbpWl&g)U2cj0bEH<<g+CJ@}!?}>XXPP
z<_Yx1n(JV2l>XwY8tQdeDpPQCPQ+}ltgoAOOjH{!i3h`EB|V3*?Ot`hq=UQ7>=W%?
zHC|mQ1T>WWPEYlwnJQXTwfR&#;8tJ-ylPIxVlNBvn0Y%C26@K^9>3w5xvg4i)pM}9
zX_AIswyh~z00U@1<qHSU<D7$@^+(=rsA08uiUfLrR$ojkw+PnR3e=HbW-r8rGY(Qp
zJfR?!931T=k1x16u7gQ?TTs$)o+0%5j;oixsYUfTNtZ&#>KzFl1D-CCRI7v(G^NN(
zfGx%fNarK-B!iKGk%L;&WhrS>EdWSX(gH{+KF8L&B3m;|=#$xTY}*<@$`H!7w0#r?
zGma}#*P4Dtxsu)AN~NXE43=i@P;5&nK1HCY09FT-<cxrt^}W*rL8(XK`!8E-_yMmz
zzn@iB{0f<m<G!?TGlP@I(y;Tc@luVba|Cnb^)=$vtGwG5sB_^@gyUo-Nqv<gpH6#y
zG2Xs*y#su_vX>(?9zxOz#&%&}%ac^REnt_JS{jzUZDvCp;Lv%v!1$amgr!e0BHRmQ
zaAm1YvhY|?3Q59}tbSE`;QAcYUX+&OuftBnwx7gz(4SyyW7GDjHhZYk@2JO2g%wGT
z;NU18G7qi~dayP2i?iFb^}cc&Z{wPp+7ph>rASdZPh+=eBigYQK&;wvzQ^<Pn&F-8
zVYa(<mCI$sm~(cG$L%1Q-vesXO6l2XCgU1Q>|DZD8a!i>`A9zeb5>Q3@{8F@CW8`k
zaEBT#l%*%!=eIxST5g!TN^)z_WFao9DIt}QD~le1UW((_y>4=~Y8-am5e%OhPGRQC
zbC7r-dmmrgy320NxH^qU4fmVZ^QiiTbzxea)mGfv+z=Xj?CaA9ZTB0-G8LbqWPQ}j
z(bAmEcOir5IjdJlvfNY_?s43gIZlNoYCE>^$p_M@Yem7kW!({{M|dd!CAZrFTYZ5Z
zqvk5hwclo@P)Xdh0Ctr&LH?q;4hFa`n&OjQFc$v+sAAh+as<hU*&qclhXRP)2PG%z
zoc{HM)!L9+bWQ2&e6bQ}Wh};dDFmU#Eh!sw`mjztyZTnS)H{vBCWf7RXrTt!jp+{p
zq=2^)6r+z*kO27#p<BFN^-Hm&-5q{JR#oMU%6zPo>#%nx`Hpz?uNZ7_%F?B5*R(ax
z*!|VbqKjHu6iM3}QcI}bhY9>lD>>cYKDqa<Y1URB;ca86Y^mSjLby7X3j3**9qk{U
zP_*;wT@j|$CR7H~b#LI(!8;1h+z&&~{A!Ns&FUtg>LucBvGmD^hT}v-$snb|%Lr{s
z1aL;=k)K>vjrBejG^!71XttXe>CF70X|z#ARIW7?QBk5MO)4m&BC?uqPTaM1{soG_
z%Wqt#ETNRR;B5&BNm7)h9?42lN$z;y6UAcdZ0T*nJ*%m@LS*@71V*k&4?Ye8Qlu>a
z5_=^|Qc_Q#Q9hNEKqLaQU<KeEq%Mf*_u1D@Y4|To)`^L$F6C!x7TS{$gpWivqvs@^
zR<ZI49OrtnX+0TkWpCSby@Dr-3LNmQjb%ygjF5P#Uaqr>T8bJdl_-W8LP5??%lvEY
zA4|=G${KFu@M$E41u~M7qwDWi!rq-W!Cmb;3wwHFiUjS=M)`7cPbCs8HfH8L>B(^j
z2`NvnIPX~*5rfh#uSuICBM5Lhb|@po;~@(@_WO?JvaGO(Q4*JyTn(r5EDY!V6<>85
zsP>x;mRXds!bnM1bvc8z2p+3A$H)>-0<s2k$Zl7=93PM%372?vGtpqWtJIck`bO&H
zXlQx&74Wd+s~9hn!P<QQ$;jklxo1#n%f_iO{{5HnDUL~PApsyLjBY-p<BXb)q187n
zRUxOYt4bSW9|kj7@Y>IEGu>XBkN671)m6pEXn0wM{Z}Wb>OH%SJ90%noqSL2;V=sI
zz?$S2R#2Vjbp;M18OZb_<_~JmX**r#S852BYYQT5sj4YT2`Nf@<-&hRPb8mAe${q;
zoccAR^^TO0sCBG1?{CPO^k~ssc|oYiYXI&-NXpbnIXS|1;~eKR*6Tf=qdFx20HT{T
zYZKS2gK;jB*izK@fKat;O4Lb6QkzJ?AaReF`97<zTHI<UPqkq+=Y~ie6Y-pRXKsac
zUd{VOb)?WX?<2E01kZ4ucm`X{k5Rc*W~!BF>HKM$KSo@B@t*PvSNq~d-yhy1Kg!4>
z&yH4jCurMRd`Dusu+z=>ML=#OeqWgf^!)uR%WQTw^5mxcNUrcw*zA4B%zIRxbt_v8
z#16eNwRmh4q?Nh}!cn)rdBFaam9;lpU>SEZcPGc}Icyi)Ev;$NwuifnyCvOxdPHnC
zg|OMQMxu`bW~b8&Ll0PGCE^fr_T*t<!~h7wMmys_I^5p-M(VlHP%aT+Dpm*j;|Iek
zQ1v@|ANc!L?+(KQrn(40xvOLCB+R@zmE@OH2jHikZ~|Kc)a2DOsIO7AZS9+!YdlLs
zXlybO5g{WvIPn1(3-tCr_0sB^CAVQo)xGx&w=*7*j-cXKBFc1iN`%#?#KxREY<e8d
z>s7yMD~7ST8F$-^nNPG&hLEGR0GyBpeNS`iUpF3GNoCe|G|n;RRzglQf)6$6mu)F|
zZ?d!{K<xmhW@{TUFO!t1FDq`}I!GD!&$#*3K%^<OF`@unJqA;^r^8G@@L!}I8?}Ak
z(k&MmU;+1Qa#WM$!kh)dasK}Rdf8>Zi+gS&IN1Ef?{&eA!~g+M^*BfZwH+I)BDK@K
z8uKel>?+9_Dh!R}EHadl@A;CX<J@yq&rtfa7f;&ePI>l~JxSRWlC-TWb2&?DY>rYp
zsbBHMWqqkK-rkd_!<`V()$&9~M(*zj7~%`yV$S03{-lh#=N=`;e^sD;s(P5+#i$x8
z(IG4$mjs)Z^?*SG@L5p<=e(!WDD};AJczPdWiK*A%%o>1IZAWJIPG4WjnVnnITs7r
zO!<;tThFcIyTnqCNyn!r)3taDt6uQITWu)dAsiI_J?lo=lj&0d?&5ajo@DNSZw2=q
zKEjTjXf1|%$1->H<i4IFLj;)nRFDEzI0NW0Up2#Rw$!ys4n7FngN*$v<`9Mv;yU|;
z{#3T4Why!K`Oxf71x=zmo18q6k583tM?$QNq-DE!kD&a*=#R2qvP@lBa?%$B1joFv
zR>C&~;nvc3CkMGGB>w=oE30)*oO4jx^z`NynD-qwcaJ<53Vi56@ZUivfE3b{K_011
zes5T>uIX#k3*D|jUCIQczS0(qg%tjk0nP{{5uaN9F0g9I7wsO!@*><2E>HuAE?|@`
zNx(|JdCGB<%6@h4ZNn94J7)sn<^&k?5PV2qC-$=1t+nGW>F0_*J3-}^<I!ZSliGIV
zrkYVCp|VmG2po~$+P^ENOo<V~%fWIau;QEAl%2T*gU7Xglj-ZiT)xJR;+<_p4Id9-
z^(5fnW3b7=;=eYg_*X|=Eg`h6<*j@9@`9pp0Pj_HH(#oz&OO5^&#N2uTfWLNr6=5q
zah?tHw-UR057%^QJXtkj<Np8;D=LogYkH!no>E7D57&-Teq0OFU29h2-ccwAo=lr_
zO))wq;vP`kM~D-~Kq<lCAADC1!HgRrl|);+1_4>XKT%nDnu7gn0f^I<<7GghpuOQ7
zZNT;z;~B+mc5kNPzyW6ve+iM^X^`fTv7O`)dQ25#sc2&1->9V=XK~7TpUu_z_NKo>
zy4ZSt+sQ9UY00ZvRe-IfEoVIE1z)kp9jbuS+A{5_q1`808EMG&))gi~OTh|KQZk@`
ze>M^`fnRBj%ey?8SC^KjHUJ8NBqy8!=m7au>(UOUvvritm%b)DC_)sNBf|+o_`yN;
z$m92`T@z1l11+o6f&>h2yaDBpKQg_ULbjV?1vc?;$tR?lK7BrZ3WAAl+Znf}f2%g6
zlAWi{;69*#O561tOPw1`N{rGBH!W?$FS>Bs4zrZ4B>Efxp`PJG8LwASI(IujUJ71l
zyJJ~VgD{*G0okSdIG)(`?l`O+p7i#ab<Y#Sod#aiPq)0HT9BULET77;-78O-Bm<t{
z*WEUwDjIbJ5y@Oup!d_GscF$s%%1GW8%Xapq~JIZ3ugp^(pnD_ayE<2x@EQ9EvRHH
zTaM+!xOil$*7CpUJ^Uq{Z%5Hw5t`F)=0=RW#<$$sW8$Kz51}uRreAFG6qDI#SRa^r
zao;uX*6|Uios0J@mn2wkNchWq#{dd&1GP;OIPn`-l|$2mfsu<>pgN8Nc0^e(YmV_{
z_Z)^~r7J8XtCS;fJ4Sri9`&<Ik)chuFKmgxo%~J?#C~)62ekgz($d=cnj?v2e7&$o
z1CB{#`>rwlQ4z(F58|8-kJYes9CbAqhNUG(YYsRRpfSNoADup#?lH*qHeG{K+^n-5
zg>9V{bf~N$`LP^utKkx*5R|BafT9vq6Wk1E85K|U{ymYMZw^MB46^&syh(yE2phu4
zZO<++r6)PZaFBg#K-0RC<)r7XWs%gSZYOK)IyW}@bDS)9@9H@f^cziB*QCePZu|az
zW0KOa_ORYt(sj)|9nU!OfzO{Yu*&bKsb^K$BT02-vWH5*Y0PJg6sUTG?Oz*(x*3?<
zS=I)mg*K9z1+0Qc7~DAo06UtebRSULxI<=bsh66Lw|2PG*c%;AHzOmzanG$>c70Hb
z%%H;3sIH-YX35~yxonOm84IO-Cp31HjIiWKLWNuGuqHPfX=UY)ATF<umPz8Zy=&7A
zJJid6#Ls}4_c+j<VjRY#mZY=><sl(i30Mp4m4Z1w^<mtttj|+h(dJ3Y9Y!*b`PMd5
zY``l`h@p1|{O-q6uoQwoQnBtcpPmhP5Gn{cRqhPAXA81?azBr<{O+G>xmf1CZPYMi
zTQ0G7rc7B4lr6OsgWK4G2qPeZF<xr5{?bb?b%y5nb9*maU@3vekpZo{f2ve@_o|@P
z3!B2?-iv~(PqTSvLX{NhRtp4D#X2a7Ql~~JiBUxqM6pVxMG;1dc%q1v6k>`ZSfdo^
zqA1Z$iXv1~#VRR;QpGwbiZoQIVu+P2RIy5-Ax4URoX|xj6iq6XMv{xynt7<x2EEsU
zmTA;!gHVcDr%|VxB9JudG*S^to@zO#L|b=D^%N~7)LlDzyePK<EAA!dNBt0Sm9!i`
zB$b69kTun}dt3|L-wJGy<*k^gmA$Mui3NBGDOX~iNyyJ?;#}3|_E?hoHJ#cr?k_iN
zV$A7Hyt;fPy6erPI1$)vBP4;{L)_N&rEUYk6Dy(7@6EH#9vR~4y#D}ig0Q6NTWyx)
z!`9akY;mNiZK!gmGCx*+yki)x2U|&-5*t!sFKl0k8_<z}tng3Q*0w&UB1`(E5R|Wm
zbxpYA4&abf2PrtMCOo<BLvB676NTlcA%z@-p4-o`<2dhDd<`NYeFBvRxw~YqmYKGv
zSl-~<?lThG(p+<5LcIGBlBFdh`Sy<AI<;)G<Y^{cg%p?VWzt!U4p$tX%tDU@DDqRs
zJ-gKr(@Cv4)r~y*90+X^pAl50WAO_v1RtuFbMqut=P}vN7bV-!<Bl~eWAU;>h#j{K
zab8qv@yU&rm7U{n_}m9|rUY|<GwV3;R?_a0uah7a32xk>;|CUkkmyQ^af9rnkbaeA
zz=o7KUjZ#Rq=LL22tK&>HK6EOA045s{{R^oOuHUT$jMTODp2tQfk)f>Qa@^(>zno{
z%{I_>RB@D~B<@>ap2I!U^7Qnr$S(`s>@|Ch#_MI((3rbfB_)NSw^#*PBLP_Su5{Fw
zCEBg(w?tBvC0wlvAbC&eKDh0ib6cjT)b3j22V*7o{B?M11xY|ckLAu!bLc)*QtJzg
zFFFn4I<40>5*%&RaHmpxAtYxf(>|WHp?6A^S}vmfj{LFaKYs<{_EV=t^xWti=NR+;
zd=@g_bT`7|68s4A(g0czNJtptAKk_=UW8elh<_05LHw%YAF&nTlcR0=rMGWd3PX_Y
zY@od+BDvTH2gN|i9{wYF1ad}l208|^auU88?%I;15SI$MBiQa9Rj1h3D|29Nnh47|
z5x0@)@C#c<*C^kP$ah}f@|YO#j315`>uR+w={Uxmq&Xc7spTmr3Lp>w$n?sGKPty-
zzL-H`-np@v+FRv8B#M=%Q`_zH5jm9QDni<Dqp?DVm=WlE5%U7QcdbWsx!YW2lNwYq
zG8BgiTK$1eIR5||p{Uy3sB;b%E$wZmv==&sC)l~&p9l~RCQR`UD9OZPa8*rj(XQX_
zZbY+3I6_HYR!D3PGD-J7m3i2D9ryFri`J{Sn{Bo<W}-I%Ia1}e(I72q1Z+v|fyo}D
zy=yvT&e5p2Nt@t1CR$rkklJ>HDLcHm^*B+_%zpLP)_IZE+-9xpwJP4^cKioYLV}vd
zm09)AdgyE{YSy_XvwN)=@t?!;TMW0kcC1GXQlinoWXp?yl1Vv;B0P!RVC{NR*t;QO
z&<(w|2}^9Yl!nrM_JM;{RpIM&Y4SwC?0bww{veFM2&qH1K;Y-l_vX4Bvl*m(EMVI}
z@&ZOVs^!aEb?RS=xkE&V>5%7$r8X7j0XsqYcQw`qVj3ZIw78y3EhgusTEA)MBE1dA
zTDZq8x%q|(<SQieg<ym3E9s}6XGBUxx_fDkgf!TUSLIKJ5)v`{gP)yUMlZ&ISVKZ8
zlZ2r6Pu97&?I|YtrQ~V0VEEDEW=g&_O$D^IET;^TK^uTUS3ZZ1#<>3gY4mDZrKfnq
zo3~7nGxqiBw5w1x`>inGvb}V_S}&R!GY+YtC08bw3o60#rCutMf0t=UKQf<cq2k-n
zSS61GIp-_n)~R*6N}VB6ZZelPK^uHUFLnlU03L&$z*oxMa({VCMF5lf)qz~bnWhak
z*Rg4wlkw=UwBpM)3Qx%^adtb+s1-7m`eYjOOLJ>jQ)y4hIXSF)TyfV2#!X5Rc>ods
z{rj5t7a*~;M|n~Y1h{(-psO&|aO#b4Fk|4dS_4Zndey8yblkYG8~BpjjgXZua7r>g
zKq}pjm2|6?6s_nD!b4843w3I6<sk4fN3XqeMY~YQw9FFXIOC4swy?A0aR(VnhqnW_
zAb>?*JuJQ}RoSM39%0y$!%i1m3j8-4$icwlC|7#NPqVLAU8Qhc+zoJ#9uxWfg61pQ
zAJ&SE_ekHNgY{MwraWkpP`i`rxaC15Nm=qA_IqRLSk9*C>5M;byy>-u<HcH*^Ca-v
zw)s|(>Yn)?_{Vy%H2T1b%q7EbV`G)^$@i~a+30VvDT!wdExn}I(cH&OFDG$_z#DX0
zUX8H1ans3{s|dI^B^YrJ0HivVa6*uH!S=@$Ur5t`=-h!lDEo=o3PdTOl7xauOKZ<5
zRygPLV}n;MiVxkbFoq?UW29lUkUJXs>up(O(Uu49I<?jsv<xBe`+gu^dmuIe-cAn~
zs;x^+rF_m87$al*_%3%|(Wq*)_#Eghk`GR^;f$_A*DS=;9YKox6>Li|nr1@V;P{}Z
zk1+O0LVs*}R&m(yWU&n1BSV{Qi6LP~khPVRr~p<R1RcWzk6c!{XK`Ad=OuOq5dzgB
zQ=bUajg8GVrJoHXk5DiVdW^a56vBkw$qqOPDM#f8Jetwd8D#o=G=#Z;O!)jqRgQs2
zN4vM-w{I0nA+06APDBXYW(X0O#>y8>8wu--Ng7O)%zP|}Z#$5(lfi9j#_hud1M9|p
zE61nN@i!3ilBaGBtxI_hrwR%Lg>n1f`yMNMOGsUoEw?PHLvMJjI8l<GFrbs^k&l)|
zVmg(jQ){<c^%F(^0E?X|ZOd@0`$ZP_A;1POqqRWegT{H}*&0o^ajMq&{&}kx+cQe4
z>$+6O`-g@yIuLgoLd{xr1Up;IyLbjURD}`<BqQd1hi=tzu`WE1hcP4%#YpXfIT^@4
zwaxacd-843nw<B=IJ3EziuVT)4nX>j-?zA}+fUtYlH?0PlH_Qr!cvp~l0Cpza6fvr
zrt=#vvK;mY0qCsWqusA2#NCTZ#eV5<km_X0X`B@yhWibtxg?Sk>$kUR@#vd9w@|^6
zHrUc)OG1!`5TxyFl5kbWDd)KD^sKG8CdT_P?R%9ydsL+ka<0QCzwcXWEf3i*GA>P}
zwj<rZTa6@sSMi5GuL}C8);Z&lcU9a)jyxs_`N#0M{{X6UCfxPa$rsCO*4LnIhRjJ#
zgt*%&^Ce2|4*kV>1dJ$Sfm)cr00DvWt=p_ucduPk)o;jJ7MSw{7CbTK46uZuBkRG>
z%$m|`o~TKACwX5quHyR7bBvNt)fu9SD+S_;D58jpD5aVrbrmEnB`N@<j1YSoD55K`
zpnB_4OxOB<O~{||kd+o&QI{z`BauQFTGNI1+6s2zS-@5S?OjtQbc<D?Qf55dmxn1J
z6r}qMR|n`FVD^L6uy4#TWhIn4%j~6FRJNQ>)omw$p}`sBjC$8ZP5VUXsdjdqX>(IG
zr#Fbs!C#1eTzNS?j_g&ftyY%BM{U=l>NLxiIh;2Y1`jjK%<}MCY^{3j)e<5-71+yK
zN>VoAKV8+zJxA52SZY^ZVbbNc5G+Ci@~D2d0RHlae_)!(>kh5oHCd9>cAB$5kVsQ(
z5~o&^=%){C`h<b?tpor70AK-uSY2GQqkB4gEHzz9je26<*mq`0+IkNzdFKeCiYm2p
zOK;G9OTP5&$w{&;4#JkSxb$ao2Z#ndM3LE8z&sE@85{#&ZF$uj*1u*vTb{<EF#iCL
zupFsw1eAhLU;t9E2dT+Dv87k0)oY!7oFQ4Fxi(246r+T<pH-~+P(ErRt4^0>>#=xg
z4%e?fo>TK)t$jxh&AFaS=N@a(0>e2{UBXn}Gr0B`$2+|SE2z3j)3s@+h}HViCxv_2
z;oBm<2Z<R!`o{p{#65?w=egq-(vF73v0qxc>zPeUxWQ#Iqrzn*$BgE3mlm`AqLb(_
z5)VA!R^zO-sxA$P5Sw1Wr4-6a@JYesAAV~7+e@bU;=M-XerN6dm(g@L>U8Z*liYhZ
z5srg%2ar6+?o~I{4N)rnd@&<F9kxSwrQ{&wxg*s_+z!Lr2DQs%R&Gzoy-l9vD|AqV
zKI2X9dFKvxvV<H0v#|F&Kp7{{_%7CgYLyZ*4=wfFo$#YKw3nS(Pyk?e%7_4t=Cc~f
zY*^sK(+OH#lMPCK;UT{=OvP|f^VpCRk?Xs*D}&XI$-Q%~1Uu+CLFxIr`b|r^VU%>e
zI-u<yd&EI3U;w@3833Fyyg-g8w7~$Z-HPp}H5`Ym?O9~OTdcj|PI`KrbS(|3dzRQp
zM`ZF6K9!|8YE!tGY?z5L*598ekWU3C9={?hE2iSFPuOnSws>1kp$=Q^X~!-}aRn-K
zAIjTmQ8^eSfu1p1OC?*(wm@mpIa6!n=6~?5CRK^!%=oM{x<B{#G_C46)amdyzUM#s
zgNW3E;$Q%2f&?@;H~<JL!P8e=Yi-jKoUs{?Y1l57-okuF*ix`g210=IbB;XUI@a#8
zE;47V-d=SwQRO}=3Va}W18E!%M;NP@rHNIWrSflACtM9omm*?=XBmpZQk5JI<w{P`
z^{UqEs{a6tE|1-=5(HT<00T}ny$C?;fK$l;A5m6S^s8G+H0}fk)X5MBtoY;4Ia`(`
zm9Hwkogv+k#5erjNRCTRax*d#@?-)sJgP|b9)x`T>&(k4UiK81Lb5h-wDLZEzO}wu
zw2X_Q43?OL)w!2^HzqkHEif_%0ct;+kaqHU73R2T*|xc_A@e83j<A(9-W9<a1bc!o
zK^3GLP6FL+<(*rXP;FM4tsUlqIDp3EaS}Hi$56E7$4qUg@nk7TS3V*^$sNJLucJ+m
z5yANFx}I^znEv&>Su}~%*EPU;;>ElnwJ1943I{m+qz*|r_4YN9)ZH)|P7GJ)USZu<
z>#AjFiqQ#4N_PSle=zNy2PAi`foEOxjbPsB-26XvnYp7%sG~jOu!Hsd@m0gt`BGyA
z0pTDMxSgpvA0Tpgt2?HBUX`G1)9hDBugufa-430K9wQ`-90S6VcqKd>jDuSH8g0o<
zCFY^L>Qt-*;aNV}_WuCJwpV&XsMyk9#qyz{t6~-shMbZTq@<m`F2XQVo->@_=NRU-
z-DLXgfDSVvK@rRmkhJwD*i>MpcJMgJXp%DT@_{`11(KK6R^mmLs|qB`ohmxoWp23V
z`ngak3OP~E)RTeRII6!+X{)W~dp7G#N2I*r2@RwKC$}4xa0m6Q!lPR)iG9!nxeZ_t
zmG9c4>5ks@Z*-5SGPTQ>NOwg!65|am$!(O75g`aWcWv||AQAL6zoluG_ZKb|YWLj)
z^CkpD>>vyXh*gG%_$9G*1`|7z^4JV~6(2U)A-S?Gv!SXJ(cM!oHmnj9lY%lh?^(NK
z8!e8|Znvn5xCi8zu%e<um?|g$xam?xc-)Wx<0qWfBVRP_k5}I93UhiJl(jY+7|I;;
zq@SME4)y9!g?`ac(-|fCI(f%TnES9)%gPvc+<>4Gpg9>y?agRhIn<o$aReWt&r~ga
zD_$yvwCdDrUgnb00c(p#5QjI7;f%oty#VG{()Vp)cGhm1ebu>REAZtvAdiTO?l=w+
z!jhqqg^msgAQ8^6Ul7>}wz#I`p}@4b6SYBJpELB}R@2k@(LVQ;WVo#@Td&c~H;ab|
zZQ??ia|8KY3CGmd6&9H<T%UkiL`iVmDU_bx8iKZvPbawl0F`Ug6{^)}rU`M{H&!}*
z$+fFrO}u=XaOSwcE~fd3fB|z{9Mb|w4ROntN9o&~ZnN~tU8eN3$GWoEOOE4lW#oTm
z@E!OhWOv%KE0i@2rtPNgZ(213Id=KYWT`R|Qd~}Py$7<8NZ~^{tIt6}hoWC{Tq$o#
zlPrSkg=8f}0x%KiIX&`CTl$8<raH%`qOqvr6DAQ+VaA><JsC<EQ9_5I<0()nI0TL>
z>2<W%T(X^N?H!;Q>G{v5dP4d3tn15ab!k{UwU0j!Bg%S=@>OR*EmrHMgI&7)9v#91
z^W;D9(^*TcqmYj(R5<KTMmyG}*N&TM-4rcXtriWnGG(ePh)8)#Kv#xVmm3EqBg#P;
z$0@)bxcMDA*P0p?#$}dkGOcjZxgjZk!+lL8WySbjg&-ZkE1YCztBby&xoRUF%e2)>
zO9?&#dnG%&kUdG`B=f-Zu5Gp#6mFdN7-=Mt)_gW!2RcRNo%@|o!(2%tk(uSUs>dyA
zb;UU9)Z>deQr1d}kIb4>QC8b4kRff_16iFdatvG-n<TaVI!bfkEQ|+-upDmp9QPH`
zFz2q^^KGLk$-r3c&pe->p{_?D5rQ%**y)#10$hWqwGl^#0A>u;p5MyTne_BZzJU4~
zxUsqo{*%r*e#^4ZwMNtb0JW}gebdv!$nx>?T~ns@TER;)eEuQw6?z}7ZLD1_skz2P
zw6<PS(iC=bQ=WPD#Z!_WjbvluE|ZzHFqD^6WWEp(f%>^Q{eU$@YL2~X3%c&HH295f
zwMgE~c?w{eo(UUDii)t6C}i+5kgN_yYjWZAX=U4<ipNo_YiwobCy?D%w~MT+?c(8b
zxXfL`M41jBh*$uv0Yxp~3;;F+fB*mr@zP2IX-ZHql#BuFDc3h7<gcF+Tx9N1OBCr*
zLMc<Ch?NvkL`sTuQ50yWMG-0}qKZ*RYAB*8;)<0NMH(tpdQ?i48YrTn5~CF8qA1Z)
zpwSd*Vx1I48d#|sR7Dyo(xNZ6YE=Mf=C&59l}o)q8gx>nnqbsHr$kbw4MZArNm9)^
zh&ZQ3Dpl&XT<2M5vv9M^dJNWb8+nt307eKo;DR_H<QnnQ%?1pGAeNaMt6JaIa^xhZ
zRN3CRT+j+c_)^4j>OBJ6Ab>}@ai40`^(MQy>J_-#IknrCovMn%rA5zj<AegN`wS12
zYSi;y?zpPv@Rwm&)YR{4((Ij3$L8mA@$*tj%W6v7Qkz;76on;QN=W1oM`Atea<bj^
z-Tp9*X`MbqHJ!f_`E3m&J;{Az{BlpVWx7+-IU2RYsBTf)e@)uvB@V||DxB&-SA~y8
z##6kW`Pw^@FaD_M`1egHrx4eG<W^GSXg~=GAv}Nw1L^%M(uEq15)6IShM8ersN)YT
z2cd$0JeHrQe~om66i1tRwCXs%BAt1p##&t}DFZ2gBPW5~9D!KR^op%VcvY={<(>4b
zB}!P{qJNj<pO~yhoz%}e5-T#2^RI;Caz`I8-nP|<>QW?#&}1dX4~X+PQ;o0NKEJoF
zYQe4{paQ!pZ4{aVT|Q)!@!eph$G5kpu5f3DB}{$gy6`8JFY=_1pvDKKQ+kEf{CZ-z
z`G4SB@G?$zs2)arPXHgKZTHL6X5q_Mh+B}(;K3=%mg)R}1MT^brW0C4qR%Gs>&cCf
z%y1Ve@;3&Oqy8#9;CkTtR+Yo}fMDHFYc~b#Wu-ALc1&~|1L`L`M54_eRIAmsn`7?8
zoaBU|nGCF<Z4!A<P~>0&e`>I`L*+M7HJfZ{4Y-1Z$Vvjsza^vc<eX;!Wb;l&pS0Oy
zOOauVJ=fzh+WsUtxqDVfARfSw3E+0(y!KmrcU!A+Ec0JW35;G_QWkuK9#lQa?ayk;
zogM&M{%hY)(y7}I`+y7N5JVUoVtn%+3&5Q@0^#Dl9t!MIqbVQ<6n+{)h{+9~%#3>+
zfsxI8Etc1q)DRG<J_ABR9DNRXfoUglh*EeUfsd&bxfz30Ugb94#I0@}#or=YZ?^7z
zG3nnXvkkPXQ&Qqup+-`d=3&+oxnW0y?*}BGooc^LqT(FfE`hZwHG!e?^N+vhC9O=6
zY`e<%QvyWtqq}frX)Tg_jyU(PuS>e;62*Lxr^2Ssvq+YPE!<()?vfigLa=r%T$J|*
zoN`5M@ofJ98vseUslj)SKtrKL4g;Q2pemx(w#X25WVw2HEZ$&DM5Tb(DDlA#91+ep
z3?H6FFKfPyT5V^%Wcm&f2mb&p1*2ZOXcqC1IHoba&^O;ZeAirEbsC{9ZM>X6$`F*R
zaU>iQ^skkU>Zk$6WUM-;)#4C)l6|UnYrVTw+hJerst-b(r6?yDDNsIiD1Mb8M+AJc
z+P;@)a9$5RB(~5)WqvEF2un#wB&e(OfCfqVS4SZ2vakh?5y-8ro4jUWl>$_}cEGM|
z`$qM$613IlLJND+t`b~rrzERqgB+o0TCvXMEO0vj2|S!&<}Lj|H)&~mPTYgGRkj+9
zB}@XhR*x%-%7#W&k^%iYPC2S$td^T}a*2&T1ckr&uB}^?;+K+1C%MSa?rV*^)~PzD
z>FBiXK_m$2jQrQn-|ZE(T}8Tm7Lnd?E+9rE2+qXwAY<jAS?ynZ>8tbY1vhenSaK#;
zggSy%;v*R4Si*)qu~WF{OU<s-&CyDWG9r)`vdAT9N%g_*J^iZF>Ght$9?2cq@*7(&
zHXiX5v4s*m-?$*B<%-O<=A4q+-${9^IdM!jT6bz)Bw=Mg&EFoxpOsbFRTb_XK(yy$
z$Ux`ekBM4ZX01~1SF2`2i%Bp^!+1t#z>$uG$2?M2YemL-idc>1{&l0ZWrQek93tU0
zDe(NNLt}EY>;R<n5f#^CKD(PGwGrSr(t^^S=_>3pQ;(Hl+zKlQhZXId<!%wr_<>nC
zMoRiGZA#vs6aFN?UV(Wo+*pHXVaaa3;BBNift3^f1Js(`fBmC$;^p^~FWcZjEP%Jt
zd{~dCxI)rK;&a=8d*Jh5Zj)JAO~Lzx$*`XVZ8ix|RuHY*mB-B~1pNMW(f3K3ed}AW
zol{RRsLp&+Qg{t*JIarz8Ry>>$!b2()zfd8PK`bwH|w5<!{(@8s6M0knDATv(}U}k
zm9$@FHp3zI{5KZb3d$0qoy8!W4CD;w0OyMKKK#3)9YR>x!bVo5{$=|BJq1?1GU^OX
zUvK-kM|vIB1azq=anBRRj+`Vfeg;%H-U#5Fjw;%>scpkPBZ)&;+_w~Pln&&R*a2T}
zV}sfYOso1A6z*uYwLX6?qs%QXcBz@B=R#)V9$K1^m8~m`$B34al9A@*AJjVo+O*AA
zcO6T0i+$cR(CsCsklG&MYAQ(F>GTCVMh7?m^UY+n9r?{(WV2{yT3T$BMUsUjAb@j|
zlb<&S<-qi;75TZBts<*(=BC{#ZVjprg^&jeZ9^HthkPGy<BF!#s8zhAY161%>A$Z3
z0J+^$>sA%@D|1SfQ%r&hfw+;m->xJAcf!$hJSq0b5dH}=9S`|XtR*Qy>=X`ieKC>6
zd(j?QoDm)}TWvXML22a*`Qwr7Yuooztg!+NNXz)hfkiL4cQ&M}k_hkUG3{A<E~bp!
zxu($uCDP#QWys<6mYWWd`mvrf-~Jh|TWS<7f#4B2K0kH8r`p-+l-ww@hD?~uo>@6Q
z9Wxu1@wD5dM|IWAY3<Cb{{U8SK|cMfDb;slGojEf%`C2Ch()Cxw!Ds1=ldZFP$$=T
z9<@~7=IY2dr|y@@R~T1E-OA)N`9eyufRyYzKmY&-u&hPO=|1x%GOrWmTx6vIw7VtJ
z;*y``8SFknv8#61Q!L@nilx8TMQSgiX%OR#^y|wjJ)^E09eUif7ko^;6#(*F1I&T*
zBa!n-_pSc`P8l}?<w%DxE6!Xa2M2-`=yBW{rcmPAaSk-KH0l%-g`nX{P~;GO>hbA*
zr-5^WBwSsM8sx@IfVHK+6nZ+GkTLwj(2rs(J1WEf0IkQ#ZD=~1O)t{aIUetb>E=0j
zc`HKI;kNS%E`&`aWoYvSe&dR)dcoE^ns2Pxv|Zt}!-E?Vr83%FU&Sp%ttfEh4XFqj
z1B0G;td_6pMW;{c$&Fbqv91@%Y_2?J;;k-xIZ)cCmZb1Dq?``rSmPNr&h0jaTT5+?
zs6Yuw_5zoe5e#AVA4RLJ>M-F-i?hsww}uq?B$X*jQi)QOqmrUdNhj2k&S<FSil<z1
zbY_(lQl4m~MG+KHMG+KHOCpG!BSAE%h@y%ph@-U?y>!2(mmPblZE2Zpp4OJ#@fQn%
zno}&8>CRGzNC8S(fI!=m$vk5<AQu=5HZj#48qp-I7K+i=4xnl_tX5TQaHqtS_#3_%
zoPbtGsU(1r>PYkij?vQEHrr!iHmFe}M}->&sEs5k0N@SoDE|Ox;lU+G)SP-(vrk#9
z_ITe3q;0nAY%KU|5E)8F2lFqwkJOV-TO#QnOV3`Fks2M(3GkNs3X*U}Mm@;j8n~fH
zvhypmu(SOyc6;u`^zi)pFCM*0S+L1eVm>ULiAYw}E0MV;<%+585M$iuqvFxvMgXZn
z89)in0#ohD<o#=7nRcCfiyQA)%Y!W~;oweEPjW^+m8wX6!!3RuTTbjCdK~b0t@^a8
zy4m#Tx*S1+(DMA`y0d9=?LMswXYkc6aB1k`Abk1q-EMb152o~-X}7&MY>5{1Vm;v8
z7NtD<O7PW!6tYO~>5e$AQ_=cMQ)+gQG_|fw)GrBf^^L3rp5;qX9Osj_CbRdBtKROm
z*%tO(4Y1-?&~&eQwj8G;fyqy)?V7bZWz`KaXVP$?&5)RnMT&;JA6C=`2m{!hociwf
z&3w7k?rmwg&u<xd8|ET@vy89LR=0Y-gy&t+aWz~=dx(+%oyamlCt_gcd}{q$s+e8T
z7G{~vy277<j9nydQgPzAaB>v2?k6MAR=x0wzD$Jz%Nga%ocdU8y}?ORlyICVeR<An
z)6@&ay8i&HCR}W(A%~EFwe}7;0R=<$+B51!T7PC8F>bhBu2=btEy>ViA}lvEgfdjt
z^{X9<$T-RD56?BXZ=<&7vmlm|1cT+D&!YQZvmV)9(y^yyR){7EnTJW2IJ<r#TuCRp
zB+1I#I<+p}q55?jOu%>rCNnmcRsbbrDK0#`dj4L1YZcCoBku*QG!wb^0(X=i2|k#{
zK9yj7q>F9!0vs5U1M%Y9!@CxuRNKxtva(OP2~VeCSdN-$3zhQeXu3Mi+bdF(^rsTw
zR@Ab09H%)UMLR*qb6&db8ntWjF}=nBJqKS>y891kwEGP{<Qkp!HP0dp$Zsq}&ml5Q
zFFw7wy#4w6RDZy?*<ErJ7-=9Sq@a|QXVpq6Dp5R=c{~hHRk<}beIWafI@FgfJ5-j|
zP(o25)U>aE$N&e}Rx<vZjLV$6tmu;BIVMuxQWYIQjp`?YM?8`%Wa>L@uU4Yg%!b5k
zHMxi_JX4&8+6q4`l__7na_(!X7<huLtu0$ZzL#Lg;$t57k<J>{zD{Jir9kHsmk}o`
z%cCz69@W+}Dni!ErH05WCn{1%$0t3=s|&7PJXw|p8B&^xq&f;wkIk{8{vg#;p>6&)
zx6{qER0?LH<#E^`6`cObt5@w8aSh0@MoN6dxT2q22AWU*0PJh0w3DJ-XPEl6TirW{
zTB9S8`~K>(7wNCZQz?}4li_$lUlOF84CLcDC+nK&ew@i`UvxoQadYu^HrJyfGV*p5
zl9tpzbfDuou0eK5jFg8T30MH{D%dfMpHBY(@~+7HGdSY9YYs$s3tY)F9(A{#Ndv(v
zDGK-Ql@afZ)_%?LRIgEv%S%txe=FzT^;V@jeKy*)Gs9JtT3i1Bi@A6Z3ggIf{1+5e
zvBE()TYIv5cI-a2v~<5xwWoTAr`&o%5Q!2DM-%<mJflA?*zZ=qRX)vH+T*XLP3irG
zm#lNbWfvDImK%)XiSZlS;)0Ku6$}gjum@_T@47y0HZJbZoejH<oewOC$u14;6Op|n
zCmvIRoQ~C}ZKvK_-G?!gz-Pk?u%+!DovZ0)r6-KGNZf!#kU-3cBcz3DeWSE%*4vD2
zM+FHjI1>hFBl4*^EiB{Eq!j&7pL(l0d47jz)waPsel%&Xh!UF#@~x-;00}`@^c#Wy
z0CZPcU9Hy6p=haAokW$miESa3JkpPp?gh62_et8Wcq6}aT$|FpINa`_#D}PMGMhV#
zeoIQ=DdtuXl;hiZ3i>DKR=UocO_g78<ANp!GyLP?zICsAM_W(Ps@T+}#2nW*h?9(e
zlnBmcrf^{LTGpYDI@fo*S*A7`n+{8n9SImxlohlPeFC^69*P{-NZYzgYt(Tq`jTbF
zb6SVs(ACBE6psp8lAWbaAxSwTB{?91c7xxV**c}us|L8TyCwBE9{&Ixg)SY*p@#yH
zlAwkE06H=|9^J+(oV4dzbrqu2#69e}5yc@(@ktv{R5xcF;~A<tU9DPdb)evLck7sp
z^BCEDe*XYn)_tR^O7K-8tv?VVV2H#)BO)^y2X$%2($@I*2MUTlC9Tamrh!OS4}5=0
z+qCpcm9`_-7?L9Y0IMx6txh22<PtmM*XLLmDe$D+5*A)4lCl<ittD9s`e4?<0hbrO
z5tK??1xiM6Fp-i;KEQXctg)t@FdlOm={(oymo@C7*3~j#N##7_peoUl+qVl_6Ky^V
zPAOqvmcqi(f(XI?0M8h%R_ixL9@BD>d(jrjQtZ#6Yq+r#c%lQ@2g=y<rKJK+FhVhm
zfJQnSMCz8%%2;&{B0nT6`FZsooYv;tIPXmO*oxTlz*63ASl@wwPtO%yaX>h5pF+6X
z`!M#Jbp|;Y%KX}C=HE`{TtkE1Dh8)rtF5|yrM1Fl#ng6&EjJXe@Gj7qOHU<AJTEB#
zIFss?WFL{{xffSy8@7bMyJXaDHi>9Jb*EZZ=A^Po33apTlY%gL1Q2STwFlA3*>X2_
z6>Q+UAoEx{N=Q&4KoEO_Ql(nzy?o0Jse9Cfsn10#ll@IjofJf=Q=*8K6j4M)Ds)j2
zqKYVqQAHF|iYTIpidd&bLX?lnj8mea6lkeZ#StnfqKJwpqKJ%CYE)u~qeU}Hh>@jI
zqKKnN)QF`-QKV_nL{g`kh&1bAYN=BOqndO@Dqz$>rYMS3RB6!^=%~}p5l9+!8e)o6
zfu~WYnj*b^%$LN)yy`nM(nvDnGcF`zt{io>6uMGBo5Lu`9l~?zS4OFHNwq9^g-eij
zZ6_R85us~s*4<@mW#*I?+l{QDXi)4@p~ycmTjrhWmZfU-r`f*h2jyAWxkoZYq&BnQ
zmjGB(g*&$3li%l7Hup`W-WLVcX<EHIMhaD0OdJs(cwI!^n6+CT*$tI0LXZ*TB^)*|
zJ08G)jaT}Pb+*X2?Wm98zN6)FBLL^UTn;|ecGBt(gpx2&NFgK=6f^Z4e2A*QUFhXs
zZ;Y6#ZP?GWviekTS?z^_K4z@TBVfBaLLImFT2uN)%cx{L^~^X`;iblzZNiRlKvJ>E
z7(5J*=~zp&E7gW8R_!qzr(r4G*k!N|@9%r@>TA_?W=@{evyjMj_EwNWPj0{tew<cz
z(IP{vl{q1_$V<b-j0fdL-&5{;{?)8n(&Azqv2{9Tp?q+^t|fS+O=bcnh8b6e=t`aN
z)NmFPgTeH#ew5R43>IDZ7ZjN-hcGxL0Out9&tdEby<%;#CF(6_Zqw;tMsDRXBP%{t
zG%}|M`Rz)$_p9y8ea&|k-C<1pBGi>5!x#-9c2EA#6`M&oS$4&vfu=n+RX>ex4!I8F
zWJDLZAuk{+#2(>atNs;;m8I?OPfW;C-hkqkl=uyKyh1w!k3&{>RIN$6TiEzQluK?x
z5`~XU@M}@h+6LhB-w`3#0}O?DPa#`MkMjaY_|_$)V1?ncL2%!i#>-`h+aG!Nah<CR
z${j(+_0RlqS_Y1={1ho${O^~7T=nE6oDzO&=jT@~!qCmJwKsB*^U{^Vd{7mX@!yKA
zZ<gt>XWbZ$aAlOrl;e#dNggAclAXyO_#lk&TD2%tHL2A904SO3wicCJO0T=2a0IcO
zayiLt1LQO73*%_&75k>Kr$<C9b;bngUOP>yLXul|ZWN$W4|JtD7{>#(d+xnNy6e3z
z^HUg!Zi6SpYC|olN)Dwe9#ySel=jL-GwW65!qn8{!WQq1Rl!avms2Z*q$L}P#yIWi
z-m<8&IR@T~d$SaWRutflf->jxbB-$}KA~}L?T-Yvb;GYJcV>_t2PO{iGn0?H^1+6y
z6{<vgJP7W{lJZ?9I@X4QK*n*qAxF2D9l6gK@JG{#)vIxxPH^mHZ*3S+$WX?AH#o*J
zepR|@xUa~!IQ5>^<6;VmT#o7UEh;(OGu-6o_pF52&c>7;egpBPx`d~~DI1c5&f-TL
z@sE{rbm>?B01_NjrILAKHktg+JQvT-pM7=h4-4p)(<JwpA{!775d=&`$eHfoz*-wx
z64aSeEf&Ni!E0jXy8cp@ohN{t6V3-e)6%Rt7VA}^h-|`PiQX>)TW)L&<FG*NoKm+$
zTv;zB-4${r%W*ELoD3v{k+_rZn#f$6yvLIr^y&EW8wDh`jjK`>>T&7~UfR*@xSZy}
zB;#-ZFeB5|cDhZ6=o<diciiVpnZP7BAV<0Z*ktB57%gL>n^fyf$?20Orb<H&CPKd^
z)a5wFIQ-vJTFw5@m@*eV$b?3Y5Z8>bN>&dE$IN5=YSBfqWyOZoDG8223ix!ma)anX
zPqu47yRhZ{KyrICn6pMF#tn?DxSW7M^!5I=oz1-}^ot1HY-(0E_x6vXL=%zcyv$&A
z@bg$#E(?)uZCZUxVoOp9TY(tQlwlYn1t&Q<9OAQye&U-)hcZ$U`rJy~jUALDdIodA
z04oOvpK8HrXwzXTB%<5j1uai8HJ1^Llq8nO$l*Yg;E!@U8rWW)6^P6DptqhVQVW4T
zWQ77a_U~HuwieW>wxD3*8xjFMaCcZ}+I<^43T|t7Nb8-<&z@tTG8Vh2Tb-x13a?g~
zPQy~)E;S*75T+bZ<tH3q^YSAg);;}Me3?2t+pX4h(QH14!&0QIwz89)6bvT>WN<xe
zbhK4{1zeNe8#a<MloC|Bg^f@oq*R)*5pIkI#Q;fZ5D-N|a5OSXaxfSzU81CbzI1nk
zw19}B_<m>T`~SZ0$L~CB>^u)U*SYTd#2x2Kp=Ane6<T-ib9oCz=U&Wd8i7=A>MC7x
z>qxt#!Rk@wTDS9yerPwwb;&w`CDp)yuS=NW`$=*sE{3uMYoqDhmGCe-DK1*Yukzo0
zM9Bv>H?Z?%56tiyo|QLn<dD~NtM<{gTjpr#rx}r=?er4rAM}1dNM-egiEPa-n<eV2
zC5l>S&sj_?+F>4cRD>x#!$1WMvz!NvKFQm4ZPtiu?-$cH8~OkCyw^M-tyr)=wlid4
zZF(4Rvt{sR*nFqdM1B4Ck~R{>X2-j8Q(*RePa}o4a)nl`E7CUNxG84L<xKT1+hnba
zYQ;gflfQDG(XhFJf2DL%0b;^{sOl2J%1I;nxm4}*<LetPk+#+PgWYDiSuguWVizm-
z+*l;n_PG~hO<m+xSmZ8{eUTMSa{^})hI{7Dvl7%jAJs?~D~Zc53y-VS-UxOzi+a;{
zc%79mI+BOgG2xm@t?boMgDIgqopW3Resi(0mKUz&op<mRY!2-7950)(xaxwFU3?6s
z{Fh861C`QWze_yFptDvie)cTL!Os(&x>|BkNL=VfQ+|8u(PoGJaBcSSjcbosWy>5p
zCcgEwzL=>EQ6IttU*;IV-LIZc@xd1)(kGn~pe19ttHDM%zzb`zpqM~GVAgCRhWI^*
zJx~<FhXA~`NuJxN6bAc9CTr=*Z%Gpg|9s1j+)Yr|ab8Ro;B!iizH$IZY2P}43yd_(
zAd2_UTdDG2s=uEhl>g)0ieRMg3tkKsjv!M!bthe-n%mB)u>6HwN!RC4bbpE1VQ5M9
zN>Za%Qp>}4A<H#=xlzM}>-{T;y>uTX9tXN>(#$gto$EhK`xZG&weE0buV#qjDj-Tm
z;E1idGi6kjzuC<$A`C!$yjg#h_z$Ti%Cco^Lg0DDRL+sEX9+LRNsKHBM(dDNGYmO8
zrSCU4$A-03Z2VP1A*~=)6gf!fQ<x$awQGsP@m(s+Yrem&ahv(Ae*_~LvPVonFuhfn
zbCsvc@L2hMjZHa%F}L0DgWg4}$~~h6Z%%P5!PL9Fd;Z7k{yr&OgVmiquadpdZ^qdm
zPPw?*8_)Fw4hx`Xv)*s^#rso>BDS}Nrq*@2-`zE`pBP3OzZ-e&&LmYCrPle&fJ~4q
zHh`KeGr%w4Y2_MJg%*Zt;sP#}9AfF|gQJ$lkMH&8@qrW@UkE~#L_r~1HuMmIkvVo<
zzm}`Bq<qakb|&49dMoZ5T@gk?qpSKED_BT0(@~@fSoMCa<f-sVeEqO-T{Ps|_>IYH
z^8y{%m#Co;GgpM!5P4|6DzFJCyx%$GsVfdYd$lIrzg+cJI_*K%Z=AC=T$WosuHh{A
zU<EeHv2HA~>}Jc-v7J@JMhPLT#5`wm;e&PciiH=!>I$and)v1u6)1vUpMt-hf0!U<
z_6$)&{$aqRChRwp;-Q>M7YrTk$*g@NS;;70Mmv5I;nY?n=F>+_=03Wy_0y=1Mc>Xo
z`uz6BmzXyfE(UmIEKkp}>K3hCs4<iy)~hV@s-*p(_%wt7(VpY}X1{A3tbWi>!5!IR
zbeeeYUAubeYWaj$r-ZjF>)}XrsIiFcTv{GS#Q~?G?&w)^k9T;>38`Flx`y?sM9Id)
zK=+yzoRB=tI~AINV&<WYM*c=>^Ea2o+XdgfXlbU2gSeeqO<&0GDb}w?yqkPoZ()2x
zv3hJj=_C1-JQcc5?##^Rd&e6+dy@tiRvI6YcfaVTiQ)L?rEqHwRdMN<!|cM!x8=G1
z@iN9!9Ms#i{Mw2ic2DW!`5_A7tdkM$yj9fbF}N_tx8S&EQ|R4&8LwlYWPfJpX3ZoA
z>Wncbd*%(iYCKyMEMFTv7@3;h1|c3%J*cxdXeiH`6hu~Q1@R@9$B^l`RR#vI_!Y%R
zi*z;j+BejPlRw3;35^%tA5gQckz0sopUMk*Ag&X9*ivm3+so>$`r6WF)AQ)*Mpn5)
z!J6~c2d@5-`*bPw-b0Fc$kL5>cD3h|jjxUdhdyEoFR+&1e{2uofP_*;q`K~;=a>6u
z9~fnqYt*URPbDm!Em_7Dbv%CR)w^(?ckimaHg#<lz0i=*hanc+nLv8?+moIH{%NaR
z6}>oT*Cq;V)SBiOMJoD^!(s*2*YLyFd~V-nb69^O>n$_?C5vTR3_NvUDO!4zPjns>
zuQ!}l5o*9KAjNBkq+h(_h6+6rTO8I_fm6N;)E~9LF!AN08^f{HL!5WvR1$p3kp(}j
z_F#$S(;4?MliTIfUKX!pAf6p8MpZZ;+TJJg7XDP`EB+s*_7-nC@|CYSF#tc0V-RRT
zU0hsHUBfgP|M)55=vu|Fh>`W9_P``TvOY<sm+LyoH*JkC#n(^c%U?Sds_NDwp^`(N
zlFdynk_9!v$$Up8J#Tlo^<Rg-)pknm!+*r>GTIbZ%)jMSMKs-k8YdB%GA64$MiT4F
zm}ILtQDVjMRPU-Dh`OmPe%5uID1Z9;mS*yBd9p9-cqv({dqWuN!&0;hobPrp<m2{i
zjWff%*-?A+2F(MSsL5?v3$4qR>(H3n!3SOU6g$Oh8L!}jrsaFdqUf*76}yw2p&w2f
z_Pu9=9Xhm>cQ^6Xt=c)GM8hDhZ15;LE=J{O$=8U#E@99~Oj`9vg-CgDRdH0o$F<z5
zAcrXN3u`wa6P)O5ZJ&p&XNhMj_1Bsy^9JMO78Uh!H_n#oNjgR5T;e}Srgi(gZ>LC!
zN(FuhXNt8Tf-dA_2Qr!%3%DypwLyd>W2VU5&$O~Za(AVkdc!+@%luIbrK8W{-N9C;
z#D~zW5Tso@FQZ!f^@N}v*JDwyfy9JlY!bG4Lhi?~#$e%+u6|B&Z~argrSh<WIC?tg
zEM5`O^($H1r;8^PwW~g<X}wTxfjmp>^VjgOoG7A+{dh$8Q?cMw>pekHjgb_jhIRZ6
z_(!y|{10P!e<DH6Pkn9R7iGoujjr!9P&wCxR?*8jKZUef_I~cK8CzV3x51s_67R%3
zKBdN1V);|o!Fj>S+NnbGwtxwqN$3qVWd{b66+1<EfA%K7uAwD;Pb^K!QWdYQxqJyn
zj1W3LzaJAGjQ~qvejF*!5Xf&2MoAPCB8?S-&V+cNQT!t93Wld~EI<2!R|Tj>Dhbej
z4d|boL}@T6s1K48rNQ_$K@uW$1P+0>4Fj$c2E`${1ReG;5Y~iaWxp3jNbzI`*@$e?
zG?Sz?c<qL4@lc2d5f4S9Rr_+p9wDAn@}QKZKVy3<4n|RCo15kY<!Z}euAIuD<lFp4
z=-A-z&xPrD$)uWj&#aVN-q?_OQ<`{Zaa=-zYWVDnnY+*Do6TtFWYg8`wU;7d(6qgm
z@_!9>JIXE;!llY9^75w##g!g>*_8J^IIuKud~4@$e6TcGYP3-lYKB;l;+m_fXTphX
z3dmE?P<nNJB@iv`!O^))6d#{F$XAQcNOQlD@m4X<lQrd#i>kxv)mQ=}J*4G4<kjyz
zw~U#39urR*mDw##-S-9^FV^=Kb*NJ>^Bzu^Pw0Q*>5DbOlxW;SW-|Tg_A>J-|5PGy
zCnQHpE_VG*Ocgn&^<<mdB*S=oB1%#{xZOm4rqsQI_COF)?@?V*Z9ggH9Vt6!eieOw
z(`npIG}u~K{5r@}|4o4MfieGv_=A;P7mXJ|+&!PNhWOyLZpbXY8&b7$z5e-|G5%dL
z1?LBAixpqHU)*KHhcIMuj)s>$zVn>VcKWBX;^X^|QzRAj!)CcIINiyWyg8R0Ok_M<
zU^(OZFWD<oa|a0tDVKDZm#8x3<A-b=_ns}A(dh0Jj-*JiZo5b3ZgC-M^u*(?$@QJ8
z!CZ$-ihz7BTpKoi2HD8Tsbo)&gmWDc@z#hRPF$qmm<OX(Ut0s$phnhyUPE`AKX%#|
z(j{J0@j8H_CpNE=m+f`CcdEIU2#M5P6aVBpG7(?NQu|gcsJ9l{ZRX9L#qap+e9PAt
zpF)L}$yg`9=B4`U%b2vj8Q&T-s-{d#Sh4URH?DA9RzKGF9esRJ9DQ+xOj9dksnqF%
zj$(G0ii9w)aJ#@m*RG@8-=0M+8T5-co76k#%Ct`*o%i>fXa+aT&*Axn<f+YA_64bA
zi#Q)~Cm(m;zi;l?pGzgl+A4&AiPx<3_OiaPc*rd}{MK2?ih&!+RQv!g)|$c8vCzP}
z_0qova{h@*#3MZh56C|r|B{*VJDyH)Tf02BQeG8?o^>fg(3u(s;)`P5U{w8C<mR5^
zp4HHHGO{_1-tQFnN3k-~?NxLvI7Z9fUpAtSOKs3`p0BM31~q0AQSE~NSaRJj*1G<6
zn<DgP@3`9`&SAnnqNsPj={kMWuiB@OFQL@i<=K>%_&lE|<b<5tlrL@kCbX|_9z0pj
z;aWMDINn23y>!S^^(ba@lp|Q9c>HXZpwpSy-p<v&Xf@N<Z&e%QLj{iSs>;(dUu9su
z+q`Q@+nUK)fYj4_r7$m^5qwWQ8L=C)xGvDFDM$7^HT@uQ=*YizL~dW{b3MNU+^L$i
z!sWJiQ2J?Fw%$&^k-=;$)#q2AymZ|a*JJ6>o};`U@ht73r$kg_p<`jl^&!Ge&!^3p
z^OG3_<&3qUW=@QYd>zcPU3V@cj<DlyiZHQ=uZ=zJ?6KK&@s?7wv;NE*@_*WpLAj10
z@~bm}3{-+kuI7kMx-#NKX^-4iZ%b?X#hJJeimu;ltgDZP7mI7st=^=q*#>x@ZSwBT
z^|?8c^UQ$CsjQ{O^LO}J-<V%*Wn4)T5=vUCF_l(Pnk<sX3`53v-STOQ+=-Wsnll_$
zge!*Qv(dZ>)j#8;8U}3^{2(*p-=dift~lw23U;{&DTXEr&;If$Fd&-EPuqD-v^sWF
zsQ5I~<{Cs_D5u-FQE*GSBa?<Zx2i<W?#k|ibVRsu(I*5w!>5dZ8+rRF<42bjyFG&z
zs|SnU{!<+kdP+GkBtW07Q@f-1P69kaGiH7HicNjl(ru}TpQ9qS#c1is1E~j+yH~iK
zo09s#78qP{@OUXU)i)yAY@JRgzDw1jTsu-03P*EB9T}zNjRwX39Px5?Saab<_G;Ey
z`|+u|jduihnp>|Jh)p1F-v!yW&5&B0Tg}s7*-Fpi7nv2X=nk?+WAV%C3|6q{^=K2J
zGFSUveBRZkEaw#Fg8AmEGLERrAznF8t?3a_r<&x8O6zxS*~=BT)%KiKSAmGNI%*+?
z7$8P77_B@x?jiqWm|LHakI{&et*e2pgg|b`$kR{Ro;F479Eh2nawF=jln|}TP_jEm
zE#>5a3>>%O2uu+!QnTsibr!3)ZAzRL?hmfW#o&~7S8eCWsL3e$$f%wy_awS{GFaql
zr>vhVql-C8gX+J52~(`yVJ|E-8S#jq4^JGrJne^8e(^OU1-Si<8rtRo*GZ-n|2334
z7^7|hE3zTP01wV)Nn;^)GqC_;^T~41$N_0T`7XS!U_LL0kZ9rD;$MSm%!^G8E>?O-
z6Qe@Ob6d})5))|lKrCrhvbp<;YPIyCg#_ZAxLI$DAzn@8{lUf8hD=sVa@2?fdY4RX
zxn{06-ll1H`bVmSTuRW7kheYtn}oX`;kL+r6{gzR)Uf%P23~qH+|6aP7f$y;v90T-
zVa7;G{_#U1cip>?H!Zi=Lb(vrbCvSV0+AmD^VNMbVv49(jIvX2FRVT?)IdZP>>VZx
z3$Z@(xJDR|F&vN}*5|dnF&CohPz{w@l67MSXMJggSmoc&apECjNA=bUUzEQGdF>-_
zZj4@dB3Kkbh`%rDdAmzh1$A_Pq~VPzzNJ#NVl19t4cj8n3e{8s2YHcemFC}+G6%<$
zYay#4qsU69_S@Hf79W*5!t*gTg6A>Gmy03hA6H!{=bpX1+4xu{JCUlxTDIw9>TbXd
z5k>Tjrao6Mc{LpVWfJ8Q$DB&;AJA@hl)E8$HohaetmfQ&<-Af_2kvPX4G+rrOyYGf
z*<XgDVG*8Y*4w;MMr2<CCn;GX$o!aZx|%dNr4{PdOM5Zq5Zdzhst!$2+xmTw!TJpa
z|9F!UcHbTM8oYP-c?0oxIYQRl9)-^M0Q3t@T1r17soZIuz~chy<YB#EqPxtw^A<dQ
zUouos#=+~+P?ISayo(<*y;S0QlBkz{2X>sjTfzHIPJ!J0<jK~J-js^W4rC3|&p~eL
zJL07hnH#O}q42j7+mX@aYmK@x1{~JU$&M$v5-^yA@w*6wGHTg$Sv|wh*Kog3#=j6g
znI0#k?6oinoQt7P#Pw=3Rj<aU1_!$7gG8DZ8#aN<|B~IB<b@jyaMew*+bv%^#{bfy
z3Cr4a!MLx@4pdgL2Ye~Z>)krUyc@8T&Chez9q<-d67KNq&#>WmACz51DO4Zt*ns2Z
z{%yk{{7a>9!r?0Jfl0u7des=!3uCg`<EF*(#awxtMeS~_<kw3$gzrXkaiHA;jQlY!
zG{S--Unj^jleXSks6C$Sfa&*CoAh)=(zsNwq0SFME0-dV?mm6yaIG!vA#v(E>h$r-
z5vECR8jGkdjMj<AJ!>>UG`#CSVx5%Plg-0^3XgPc^9#z3&sEiAH*3W9$^Nu{?~aMQ
zHEie5DH__4yY9_EQ}oNNA_WH7_U+YIcRJOw^i_nQMPYx+?B$UV<?rEVZ$pX$DgqW>
zrHy@{LLZCZ*e^BKl%NMfE$*o?e*BjV8n@`jNc*)DMzNxNP`E2;`sB*svP#^o(Cer5
zd{#<4R-(E(I`-EadaZ*rinTZo-vx+c2ksxY^Go&r!ccRF$4OSsxrsikXsTSN0XcUj
z*&T^uk5M^FW0$Y>!0EQB9XJz<XFb2K-)X&A#8}C2=WevwKWi(mHR?j==4)s<pUEm0
zAH}v5OK^z^^Y(T-9P6%Gzq-?;`l#y>>*U>glkTf+QE!<!OnK6Zr{Yt;=v{HZI-mE8
zN^Q`sSU(*e<Po?UA{63YW!X$~AP6!oxTsLS*C_d7meORm{2eiq$XN8yA!u~1+x_9h
z)22@&pCkz04i`+^Lef?BsgVfPY0c{&AsF{xB~L=oQ~mVLw%0gHE`!WJ2+Icl`S)S#
zbuBmrL!&y}+pi6lTK(5d^BZV}?b9co=$~p_w;SSteOr296`$%pQH;#6sC;#WE7tkv
zhgCV3AvIPVsti>^VQ}75M8;i<Wkd~hdN`+tdb8NpzD9P)?-CRFJx%rB?&fNZ+QU5-
zs}=&YE0bv{MYaE2L$E0~!4Zt^m1Ja{`@XMUnbmcHoLx`{Gi(AuBp-nSY5Kba_g`tS
z7Od9I?BXnrs$j`}FZZD+4OZ;_f9r^NVjdz3VS)!HJ7ONz@HEK~_g_f>%MK9&4D%Te
zYMuCThhZ_Fi6;))V5y=RhJ$%TGQl*{1hh3ERzvQ3)kg98D5P{dlcXLn)1e7^**fg}
zq~r?y=UDa;5g-Aoz6_HdDJLo;u-p*|;P|b5{hJD;)TsGGw%shniK_7TXAK;y*N{1%
z9u&U)z+Zd6u2Njc0w)+qKeVkBCExDRu%-M?-?JueJ!U<A;)$w{o*UVZdv!3eI@uqt
zxs&OVD{Vdu9gn@8+8A>RzwsL1wLLbVFdyTa;eAY(U<!ZDRbtHa%coDvMJn#qSfG5N
zA~UVHkk^f#QO9@TQF_W>Rv`t$zA`_l+H;G9?n%FKOPh_4(*JHes5>rEXs;7?Rf&>F
zpc87G;n&LR^oO;-)4aFvQ^ZEc8^QX$3%Q1VJw<=2d6Ad<d#}uE>zu5!k}RjYYkG#V
zUmX<EH&=+uSw7Ecrpkl7&mfm68JAo>C#(K=-8dwIwIPb^+u=<<GnuHan+s$1O40Oa
z4w!kHbF+Y4M^Dl5-3Q+d>wF&ZFITWaV)@P#@mY(g2($5WUzJ}>>GR;h6zwnh&-%QW
zexdeDGlhF*FnKc(5-?UWX1sj8cHwQR2{-#9PnuC9ve2Hv0oD+lR?}OWf$dSKc61GX
zS>XEPIYgXrx(mJA+|il3xNLD`{)$|)1G9hbzT(FgET>w&{M6|sQKgmo`-Xah-##SY
zJ0|j)3%*S)&*PeU%P<^F@%&)NV*aszvhnLzU#4BZZ+~=kQdscHw}W+}xRZCH9gT2b
zkye{^rM9!W(@73F)vk&<kFG6U(DDe+UmK1%o+Wb8pxd?ilqqS8qK}jnoq6&Fj<Y_v
z-qn3uDshb^-<c(*xKokwW@9?otG3W*SL<8WOr#x_ln~AL2{o9mVRpkYOg%j=*n0Ub
z)Yd$vFg?v@qgIdeyASk{RNicAF~!eJPG9zKHE*5I7|KIDwrmm~HhZ|qAMEcQ7202)
zPZDw15u!GuqeVvL*<)PvPJP|FbM}78Z+ayok0nptxb-hpS7R#QM6W3A>1Q6jS~D|>
z8Y)@;L@7GFbV+B29jRYE;8oerAVR1V?xP-x(igOf({pgIu0H&*qhmGY8Buik*XiQ9
z?f%Tlw$1v4^HT;+MoIL{tjZ1T^OIi-!=s_@%W?v88)3hSbM7npodL<3(}xrMRh$Pl
zbqAxM8xd^z35!7#ZC28aYh#a1maK1Nx^_QGY*e_@V3zwt!I(wJJ}&En1q}#@78Uhs
zoRr=wn`~S`SWS*i1Xc+Wap#s1=&KmK->I#wls!*=v&U)cZwm(&@M^Q%idxZus}8Fs
z&KD-l@aFSP<@`u<L3nUge#b3M2%5mtig>=tCMP#-22qC7f}e|IzL0MFjmUzn{1O9?
zAy)HZeQ}`|n1G;|7?#G&n6!^nCSSYn+GDe)4!t8vlPyLIZ)eHeX}_4kK)KFMVIKcP
zIxs7QQ8IS_FyEk5s4y6W|HH}Xn;;$)dRUaEEj}#Wwi_n$as`V)oy$Yv!_v6piFn}@
zDFn9t9QXhqe_}ZxITAq8-AoFYlR2e2ur{QKgg;zcsc=``;PBiPk@(=4|FZZw4yKqy
zH+eiCkhN38T{TwkwKA2@xNNp6<MLckJYgp4&7wVwP49G%RD}DEh0yInnV#FJ4Xq6(
z(-_l!!E1aFCwpbHn9NMv;=bS_C6AhUyo4^JnR;M}n2dnUsATto-H*%t=*5iF*^HOe
zklOOo5s=~KX}sm#ONs$6&s?_qy#~@VC+=W=^4PsTW4m47Uj21)C(xKxtP+jmo|7}8
zmKs~EA=qDgUn%wKK9%X$&(TV0O+8PPJ_%1l^&q`N&kqW3%uK&-Sg$vl9UDlz&?|Wk
zcGFHYJ9?c<-U-nh%|5f4N-^ERCDQdTnP<t3-28i|E&`Jq;`mvey<c{X;$|$&Aq)YD
z8&gGtBxVGG0BU`3vU?TMbb+8c-|brC8PeXme)i>RzsA|DOf@*-)J_$zVgEPx!GF5n
zPw$j_;mq09ZL_p0N+0_E&Z2Glm&|ck%2N27YdAZ1RNWLLW`D2bBQn4Do3>LWf%hjf
zB>skGW6@;0<vX4X!<rlehPTea882pK+@>$UuBJqVeRRdW4LCo}>F;1$`D5J7LKztp
z;+mQ=v^2YjG&mzocNa0f;7t*AP;R<Ja3cGZFCie*MszDpDy#`Kk7=;qa?KGG*SceO
zp~^pS-@$m{()`)6;-xw1?@)6I9(>=8<Ps(ol=AK^a~GFN?zLNU(PK--pXp2A-^_86
z@}#V+PI7r|uoF<^atcZT)`keJZq-^UJ-MSPpD*!m_rpD#(wmVe6vc9!eePFUyVW1R
zO3Y1P=04Ej30*2J(snjqX?uOnE|yu%jh&878wC7F?RA#KRv%F4+%77tE7)KjW1HGc
z8dwryxZ)STwOzJ}rhj~}P=}B0M4u0;`Y?2U;tMTE=PhtZ{#JZD!%?5!+TQLc%}K7I
zf|;xHyQA@=3DeLrR8H2TD;wIhu%1n(bS+Ar#60_hiRG|P&#<0^TjO88vrTB#Y+0;1
z|5TkdOCPK;zh18HNcR0@V`9APj{yQyo91VZ)vv;CV*T1<-1R(Zck&Kaw#!ct9C1rH
zFOCng1c5$!_pTc_7w6CFT{psup4Qo{TwvA@e)|1KNn4NvJAYQF;EtzB^PLsgH*hw(
z^2T?CNkg^JyK&YNMMR(SFM5odI1wRx{aS=M!hKS)tV3ogc67_;xU$W8yEYDjcq$)O
zfb8mJgTq7+@2p%6eHl4`>8I-=tGT<&$DokZLyM8DXL=2fMgHMh{Y*fl!AdaNf8`lW
zJ%G>84oFOo?*d-Os$heYc(N?~lkF+j7B2)Aj|i}!JlW_ZZFYj_vH~U;v|n4Dh{pzl
z4Nn|tA_C*b0H<ZmAeGGi3m?)n)0~P~VV>+B8hjdJgLo(kl?Mk0A(L`Fy&Ni#hCo3y
znHJdX#55CE(wGofQ~b#W>Af&got3aO4M*AesYN@~hpSoyI6D=SjdV$F?dQ5}oxx9c
z<Mx!~&nR@7U(VzVsN7BER-t6-RZ5w4N_#r=W=SD`<fr=gj|eqKKEj7DuD=SY)K`Z@
zZ;BZjr+BV^tb&Hwg*2#sTbX_<ovyt0X})|y<^oFQ2GOEz>QQMKwaG-o6T^f>%4ZTY
zOMY>B{{Drgyo@SrG_^A9_ujaNN7R1&l8-vDY}?b`RddQJ`VL3>>{Q;DQHW$KGEM=9
z5DoE<Nx!J5`&^jVZZ^Udu?A138cfK^^kq82P`i|M{)mE2HTY+46;B%ex@MPp&~4Xx
zZ!TEq1w(x`F;Q~!3PV1t%3!IlH>+JuNFL<FEUK<L*KW{*VsGzr#Z^zQtYja{6^*@T
zGvQ5_t9PAgx#Ad81qFSDFB1HRjk{4_{v~TOw!0>%B?yw5p@W&PV3=d5;Rib=PX<f*
z4;j_BE4%G;&L>_}Tw3i`8tm3gcc5AUTLCB5VuVk&H0c!#xOSntS=2uhG;Lq@BS^+$
zbT=F615=sP1Z0(1e`^1qx_<`*vHo)eFiQMy;tFoZ^GAIJ!-I8YPhS1!jd}?$T5h`U
z6Z=Sxl$huxS017t_v!7^MY^yUq)x~y&J{WN+|x$DB}O6L0p>(JZ-Ts@=9FlZ!{fqI
zE_Fa%ef{ic8S{|%(GT|w9Lp*8W!9L58E2l@p(URVd<Ug>Gn=$0Z0v$z%C>~igKoXu
zQijXIO<P}#^fA8guMs5|C-`K4UBAxO_pOWaLQbtz6>_o#ow~$(u2=9Ic{LvU#a|2K
zeJ;u<&Azu}ADtD4LSRL^AD`F&0M-BVp8F#Zc?c{Dk^BSIPO=dgiTpQJC;i5O<Y!>K
z#6p2={BhR@$s|Z#{Hj743K)`%fm_pHf<h|zAYd#A(qIuu!F-n1SOs2l=HVKMG!R*-
z0RsjB4H!%Y#_zE%y{`@eEh80z^#~|@76J!eLeZIM5QT}));kdrEWb}aBnns&47xRe
z1Vs$6>}x<*fZ(y@>4UDkM3SSdb9qQ<4C!&7U-l!xg*3b)NN))WP?WkJRs`$=frpZ$
z`fnj^6RBn)JkZ%yOf2URSSaaXe|s0C4Dlcm{?<g}dHWGqexMja;zaN`pg5o>J_o>d
z0t0`={f%MxV^BdrIejq&GN%DnStQ4V{|W-Eh**G&;)z`aC>jjudBG=N1?E942XrJE
zW&nVAEPo^mT3S6)Kra@5Sw<3$GRHQ8L~;C}=}9190w8Drv<w_vATXd;Kt8!#k(Yx6
z4OJY>lSvOC$WoyfmIh$tj{%sg>$sBIb#jBSUN#yZZvgs~w1D~y3^o`H$z+pY&jey>
z)%B(KNvY{PfNco0^Q6K2q(BXIaE|fGd<nyElkj)`bkgPL;drbR04cwpNkgn3ydeIu
z8evINf>}FhI~+`;h-j>orrk-4|A!Z7F9~ZbKm~=+#Cl-()lvVq&dEO~sbLLJ1@p(3
zLxZgd_4lqncOufnfZqoxek4*Ml8Gg{Crv;dJ|Mlu&Tn`QP3*sr#11m=vDOw2<qz3m
zNnqf^a$u_2I$+udwhMs@BP|b!L&TSWOG)@kFhh12OTIxj3|vX@fIn-2Ri@G)OFmH3
zl3M^vG(N!=_<<S_`!(WDU{1FqEj#fEb|WGHaTY*q6aa7^DGj&>oJ&bMCw^ZqTVMKr
zY6jHCu@S-B6scQbdGJ)yCM6r_k?h9*F_SdwGzIvB8L3DZpbRL6kXyEZd4Dw#SVe=6
z0ipgf4~U!wORqf?5j2A}#GV-L0JQ)827?{w4i8e_Krsm5FjMe9!U8b{1D^CP+n3-0
z>X9%T91|-$>2gkI0551~AahRr_FWx}hQgHLItHSe2A14-7)BkmNaqiJ=YY8L<0MHJ
zmgjkZK|tWJn04uP)%djmk~9NufJrt$j%6RfPXLa(V3^dBZpI6fSlNZZMk2x@NaO`y
z<c|tgIN==N6RKNM0}2##KY;T86I_y5n&1I306_qsKjRZgT08~d^mm_^)EIQ;z!6Z`
z8mtiT4)bS32khY;_)Bacw<K}wX32x6m`d;80tm2@gqB3D|A<K>00RC2i-<4#%fb@}
zW1!<ezjT8Kf`;1wr3eI;9gGLy@v(Rz_#j|kLQ;;%3Hh*5fM@wb8VaCl2)K~P<f-eW
zX%f_R42XkxVLcG74g=xrKtfR|AutknEO~l3*3%@g)Z0mN>;Z%mjR&`p@ZI0ifDWGU
zN?!(;S%tx*gQyN<8XyR8*27|Kuwd(3gaGzJfZ`-U@)>9i1;qhCM>ZB>5lZO<f^HVn
zga4<wVOZ!b+b}Tx;Ycf<Tcn0V;z1*Uh61A;sQ9OxC_Z92V8@AswljgQ_^&YIqlW&Q
zK9R_FGQ0X8rs0C<|8W*c0t@J2&19fr)d#y_{IE;lC43-rKw4v&I!!af7Z6UBB$dKw
z;vkFqx*@w2;L(ZH0=@ocQ)i7N)i`n-z^DDsV6G6tr{Kx%2{AZf<zMOnd2A-BO>p1I
z6CMzNO&Ung3V@g-zSv+rphHQV0`P+GXaML+;vE(!!aouWrUara09fuJprXJAQl5s`
z03HW}Nuz))lbp={q7yN&rNIOePZ?t4*8u52Cy+!A1xQG$1Pm15e~>UIjSK%*8M5KQ
z9D)gG*mBZW_*+isP12Pt!6%O*sa?>g>L<fQg6#omXu{|MYQp=ObL>(g|48iRf5-n1
D+JW!5

diff --git a/stdlib/email/src/test/resources/datafiles/file.xml b/stdlib/email/src/test/resources/datafiles/file.xml
deleted file mode 100644
index 6cbf87d1bb9..00000000000
--- a/stdlib/email/src/test/resources/datafiles/file.xml
+++ /dev/null
@@ -1 +0,0 @@
-<name>Ballerina xml file part</name>
\ No newline at end of file
diff --git a/stdlib/email/src/test/resources/datafiles/test.tmp b/stdlib/email/src/test/resources/datafiles/test.tmp
deleted file mode 100644
index a63157b1c2e..00000000000
--- a/stdlib/email/src/test/resources/datafiles/test.tmp
+++ /dev/null
@@ -1 +0,0 @@
-This is a test attachment file.
\ No newline at end of file
diff --git a/stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal b/stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal
deleted file mode 100644
index 1b40faaaccc..00000000000
--- a/stdlib/email/src/test/resources/test-src/ImapComplexEmailReceive.bal
+++ /dev/null
@@ -1,102 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-import ballerina/mime;
-import ballerina/lang.'string as strings;
-
-email:ImapConfig imapConfig = {
-     port: 31430, // This is an incorrect value. Later the correct value, 3143 will be set via a property.
-     enableSsl: false,
-     properties: {"mail.imap.port":"3143"}
-};
-
-function testReceiveComplexEmail(string host, string username, string password) returns @tainted string[] {
-    string[] returnArray = [];
-    email:ImapClient imapClient = new (host, username, password, imapConfig);
-    email:Email|email:Error? emailResponse = imapClient->read();
-    if (emailResponse is email:Email) {
-        returnArray[0] = emailResponse.subject;
-        returnArray[1] = <string>emailResponse.body;
-        returnArray[2] = emailResponse.'from;
-        returnArray[3] = getNonNilString(emailResponse?.sender);
-        returnArray[4] = concatStrings(emailResponse.to);
-        returnArray[5] = concatStrings(emailResponse?.cc);
-        returnArray[6] = concatStrings(emailResponse?.replyTo);
-        mime:Entity[]? attachments = emailResponse?.attachments;
-        if (attachments is mime:Entity[]) {
-            string|error attachment1 = attachments[0].getText();
-            returnArray[7] = (attachment1 is string) ? attachment1 : "";
-            var attachment2 = attachments[1].getJson();
-            if (attachment2 is json) {
-                returnArray[8] = !(attachment2 is ()) ? attachment2.toJsonString() : "";
-            } else {
-                return [];
-            }
-            string attachment3 = "";
-            xml|error xml1 = attachments[2].getXml();
-            if (xml1 is xml) {
-                attachment3 = xml1.toString();
-            }
-            returnArray[9] = attachment3;
-            var attachment4 = attachments[3].getByteArray();
-            if (attachment4 is byte[]) {
-                string|error byteString = strings:fromBytes(attachment4);
-                if (byteString is string) {
-                    returnArray[10] = byteString;
-                } else {
-                    return [];
-                }
-            } else {
-                return [];
-            }
-            returnArray[11] = attachments[0].getHeader("H1");
-            returnArray[12] = attachments[0].getContentType();
-            json? headers = emailResponse?.headers;
-            if (!(headers is ())) {
-                json|error headerValue = headers.header1_name;
-                if (headerValue is json && !(headerValue is ())) {
-                    returnArray[13] = <string>headerValue;
-                }
-            }
-        }
-        return returnArray;
-    } else if (emailResponse is ()) {
-        return [];
-    } else {
-        return [];
-    }
-}
-
-function getNonNilString(string? nilableString) returns string {
-    if nilableString is string {
-        return nilableString;
-    } else {
-        return "";
-    }
-}
-
-function concatStrings(string[]? addresses) returns string {
-    string result = "";
-    int i = 0;
-    if addresses is string[] {
-        while (i < addresses.length()) {
-            result = result + addresses[i];
-            i = i + 1;
-        }
-    }
-    return result;
-}
diff --git a/stdlib/email/src/test/resources/test-src/ImapSimpleSecureEmailReceive.bal b/stdlib/email/src/test/resources/test-src/ImapSimpleSecureEmailReceive.bal
deleted file mode 100644
index c8ca5a3a92b..00000000000
--- a/stdlib/email/src/test/resources/test-src/ImapSimpleSecureEmailReceive.bal
+++ /dev/null
@@ -1,27 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-
-email:ImapConfig imapConfig = {
-     port: 3993,
-     enableSsl: true
-};
-
-function testReceiveSimpleEmail(string host, string username, string password) returns email:Email|email:Error? {
-    email:ImapClient imapClient = new (host, username, password, imapConfig);
-    return imapClient->read();
-}
diff --git a/stdlib/email/src/test/resources/test-src/ListenerImapReceive.bal b/stdlib/email/src/test/resources/test-src/ListenerImapReceive.bal
deleted file mode 100644
index 2186216c5a0..00000000000
--- a/stdlib/email/src/test/resources/test-src/ListenerImapReceive.bal
+++ /dev/null
@@ -1,89 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-import ballerina/runtime;
-
-email:ImapConfig imapConfig = {
-     port: 3993,
-     enableSsl: true
-};
-
-listener email:Listener emailServer = new ({
-    host: "127.0.0.1",
-    username: "hascode",
-    password: "abcdef123",
-    protocol: "IMAP",
-    protocolConfig: imapConfig,
-    pollingInterval: 2000
-});
-
-boolean onMessageInvoked = false;
-boolean onErrorInvoked = false;
-string receivedMessage = "";
-string receivedError = "";
-
-service emailObserver on emailServer {
-
-    resource function onMessage(email:Email emailMessage) {
-        receivedMessage = <@untainted>emailMessage.subject;
-        onMessageInvoked = true;
-        error? res = emailServer.__stop();
-    }
-
-    resource function onError(email:Error emailError) {
-        receivedError = <@untainted>emailError.message();
-        onErrorInvoked = true;
-        error? res = emailServer.__stop();
-    }
-
-}
-
-function isOnMessageInvoked() returns boolean {
-    int i = 0;
-    while ((!onMessageInvoked) && (i < 10)) {
-    	 runtime:sleep(1000);
-    	 i += 1;
-    }
-    return onMessageInvoked;
-}
-
-function isOnErrorInvoked() returns boolean {
-    int i = 0;
-    while ((!onErrorInvoked) && (i < 10)) {
-         runtime:sleep(1000);
-         i += 1;
-    }
-    return onErrorInvoked;
-}
-
-function getReceivedMessage() returns string {
-    int i = 0;
-    while ((!onMessageInvoked) && (i < 10)) {
-         runtime:sleep(1000);
-         i += 1;
-    }
-    return <@untainted>receivedMessage;
-}
-
-function getReceivedError() returns string {
-    int i = 0;
-    while ((!onErrorInvoked) && (i < 10)) {
-         runtime:sleep(1000);
-         i += 1;
-    }
-    return <@untainted>receivedError;
-}
diff --git a/stdlib/email/src/test/resources/test-src/ListenerPopReceive.bal b/stdlib/email/src/test/resources/test-src/ListenerPopReceive.bal
deleted file mode 100644
index 53d20d81998..00000000000
--- a/stdlib/email/src/test/resources/test-src/ListenerPopReceive.bal
+++ /dev/null
@@ -1,89 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-import ballerina/runtime;
-
-email:PopConfig popConfig = {
-     port: 3995,
-     enableSsl: true
-};
-
-listener email:Listener emailServer = new ({
-    host: "127.0.0.1",
-    username: "hascode",
-    password: "abcdef123",
-    protocol: "POP",
-    protocolConfig: popConfig,
-    pollingInterval: 2000
-});
-
-boolean onMessageInvoked = false;
-boolean onErrorInvoked = false;
-string receivedMessage = "";
-string receivedError = "";
-
-service emailObserver on emailServer {
-
-    resource function onMessage(email:Email emailMessage) {
-        receivedMessage = <@untainted>emailMessage.subject;
-        onMessageInvoked = true;
-        error? res = emailServer.__stop();
-    }
-
-    resource function onError(email:Error emailError) {
-        receivedError = <@untainted>emailError.message();
-        onErrorInvoked = true;
-        error? res = emailServer.__stop();
-    }
-
-}
-
-function isOnMessageInvoked() returns boolean {
-    int i = 0;
-    while ((!onMessageInvoked) && (i < 10)) {
-    	 runtime:sleep(1000);
-    	 i += 1;
-    }
-    return onMessageInvoked;
-}
-
-function isOnErrorInvoked() returns boolean {
-    int i = 0;
-    while ((!onErrorInvoked) && (i < 10)) {
-         runtime:sleep(1000);
-         i += 1;
-    }
-    return onErrorInvoked;
-}
-
-function getReceivedMessage() returns string {
-    int i = 0;
-    while ((!onMessageInvoked) && (i < 10)) {
-         runtime:sleep(1000);
-         i += 1;
-    }
-    return <@untainted>receivedMessage;
-}
-
-function getReceivedError() returns string {
-    int i = 0;
-    while ((!onErrorInvoked) && (i < 10)) {
-         runtime:sleep(1000);
-         i += 1;
-    }
-    return <@untainted>receivedError;
-}
diff --git a/stdlib/email/src/test/resources/test-src/PopComplexEmailReceive.bal b/stdlib/email/src/test/resources/test-src/PopComplexEmailReceive.bal
deleted file mode 100644
index 0d1357b02c4..00000000000
--- a/stdlib/email/src/test/resources/test-src/PopComplexEmailReceive.bal
+++ /dev/null
@@ -1,100 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-import ballerina/mime;
-import ballerina/lang.'string as strings;
-
-email:PopConfig popConfig = {
-     port: 31100, // This is an incorrect value. Later the correct value, 3110 will be set via a property.
-     enableSsl: false,
-     properties: {"mail.pop3.port":"3110"}
-};
-
-function testReceiveComplexEmail(string host, string username, string password) returns @tainted string[] {
-    string[] returnArray = [];
-    email:PopClient popClient = new (host, username, password, popConfig);
-    email:Email|email:Error? emailResponse = popClient->read();
-    if (emailResponse is email:Email) {
-        returnArray[0] = emailResponse.subject;
-        returnArray[1] = <string>emailResponse.body;
-        returnArray[2] = emailResponse.'from;
-        returnArray[3] = getNonNilString(emailResponse?.sender);
-        returnArray[4] = concatStrings(emailResponse.to);
-        returnArray[5] = concatStrings(emailResponse?.cc);
-        returnArray[6] = concatStrings(emailResponse?.replyTo);
-        mime:Entity[]? attachments = emailResponse?.attachments;
-        if (attachments is mime:Entity[]) {
-            string|error attachment1 = attachments[0].getText();
-            returnArray[7] = (attachment1 is string) ? attachment1 : "";
-            var attachment2 = attachments[1].getJson();
-            if (attachment2 is json) {
-                returnArray[8] = !(attachment2 is ()) ? attachment2.toJsonString() : "";
-            } else {
-                return [];
-            }
-            string attachment3 = "";
-            xml|error xml1 = attachments[2].getXml();
-            if (xml1 is xml) {
-                attachment3 = xml1.toString();
-            }
-            returnArray[9] = attachment3;
-            var attachment4 = attachments[3].getByteArray();
-            if (attachment4 is byte[]) {
-                string|error byteString = strings:fromBytes(attachment4);
-                if (byteString is string) {
-                    returnArray[10] = byteString;
-                } else {
-                    return [];
-                }
-            } else {
-                return [];
-            }
-            returnArray[11] = attachments[0].getHeader("H1");
-            returnArray[12] = attachments[0].getContentType();
-            json? headers = emailResponse?.headers;
-            if (!(headers is ())) {
-                json|error headerValue = headers.header1_name;
-                if (headerValue is json && !(headerValue is ())) {
-                    returnArray[13] = <string>headerValue;
-                }
-            }
-        }
-        return returnArray;
-    } else {
-        return [];
-    }
-}
-
-function getNonNilString(string? nilableString) returns string {
-    if nilableString is string {
-        return nilableString;
-    } else {
-        return "";
-    }
-}
-
-function concatStrings(string[]? addresses) returns string {
-    string result = "";
-    int i = 0;
-    if addresses is string[] {
-        while (i < addresses.length()) {
-            result = result + addresses[i];
-            i = i + 1;
-        }
-    }
-    return result;
-}
diff --git a/stdlib/email/src/test/resources/test-src/PopSimpleSecureEmailReceive.bal b/stdlib/email/src/test/resources/test-src/PopSimpleSecureEmailReceive.bal
deleted file mode 100644
index 2f289268c68..00000000000
--- a/stdlib/email/src/test/resources/test-src/PopSimpleSecureEmailReceive.bal
+++ /dev/null
@@ -1,27 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-
-email:PopConfig popConfig = {
-     port: 3995,
-     enableSsl: true
-};
-
-function testReceiveSimpleEmail(string host, string username, string password) returns email:Email|email:Error? {
-    email:PopClient popClient = new (host, username, password, popConfig);
-    return popClient->read();
-}
diff --git a/stdlib/email/src/test/resources/test-src/SmtpComplexEmailSend.bal b/stdlib/email/src/test/resources/test-src/SmtpComplexEmailSend.bal
deleted file mode 100644
index 0467f376797..00000000000
--- a/stdlib/email/src/test/resources/test-src/SmtpComplexEmailSend.bal
+++ /dev/null
@@ -1,91 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-import ballerina/mime;
-
-email:SmtpConfig smtpConfig = {
-    port: 30250, // This is an incorrect value. Later the correct value, 3025 will be set via a property.
-    enableSsl: false,
-    properties: {"mail.smtp.port":"3025"}
-};
-
-function testSendComplexEmail(string host, string username, string password, string subject, string body,
-        string contentType, string fromAddress, string sender, string[] toAddresses, string[] ccAddresses,
-        string[] bccAddresses, string[] replyToAddresses) returns email:Error? {
-
-    email:SmtpClient|email:Error smtpClient = new (host, username,  password, smtpConfig);
-
-    //Create a text body part.
-    mime:Entity bodyPart1 = new;
-    bodyPart1.setText("Ballerina text body part");
-
-    //Create a body part with json content.
-    mime:Entity bodyPart2 = new;
-    bodyPart2.setJson({"bodyPart":"jsonPart"});
-
-    //Create another body part with a xml file.
-    mime:Entity bodyPart3 = new;
-    bodyPart3.setFileAsEntityBody("src/test/resources/datafiles/file.xml", mime:TEXT_XML);
-
-    //Create another body part with a text file.
-    mime:Entity bodyPart4 = new;
-    mime:ContentDisposition disposition4 = new;
-    disposition4.fileName = "test.tmp";
-    disposition4.disposition = "attachment";
-    disposition4.name = "test";
-    bodyPart4.setContentDisposition(disposition4);
-    bodyPart4.setContentId("bodyPart4");
-    bodyPart4.setHeader("H1", "V1");
-    bodyPart4.setFileAsEntityBody("src/test/resources/datafiles/test.tmp");
-
-    //Create another body part with an image file.
-    mime:Entity bodyPart5 = new;
-    mime:ContentDisposition disposition5 = new;
-    disposition5.fileName = "corona_virus.jpg";
-    disposition5.disposition = "inline";
-    bodyPart5.setContentDisposition(disposition5);
-    bodyPart5.setFileAsEntityBody("src/test/resources/datafiles/corona_virus.jpg", mime:IMAGE_JPEG);
-
-    //Create another body part with binary content.
-    string binaryString = "Test content";
-    byte[] binary = binaryString.toBytes();
-    mime:Entity bodyPart6 = new;
-    bodyPart6.setByteArray(binary);
-
-    //Create an array to hold all the body parts.
-    mime:Entity[] bodyParts = [bodyPart1, bodyPart2, bodyPart3, bodyPart4, bodyPart5, bodyPart6];
-
-    email:Email email = {
-        to: toAddresses,
-        cc: ccAddresses,
-        bcc: bccAddresses,
-        subject: subject,
-        body: body,
-        contentType: contentType,
-        headers: {header1_name: "header1_value"},
-        'from: fromAddress,
-        sender: sender,
-        replyTo: replyToAddresses,
-        attachments: bodyParts
-    };
-
-    if (smtpClient is email:SmtpClient) {
-        return smtpClient->send(email);
-    } else {
-        return smtpClient;
-    }
-}
diff --git a/stdlib/email/src/test/resources/test-src/SmtpSimpleSecureEmailSend.bal b/stdlib/email/src/test/resources/test-src/SmtpSimpleSecureEmailSend.bal
deleted file mode 100644
index 3c2a5fed62c..00000000000
--- a/stdlib/email/src/test/resources/test-src/SmtpSimpleSecureEmailSend.bal
+++ /dev/null
@@ -1,34 +0,0 @@
-// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-//
-// WSO2 Inc. licenses this file to you under the Apache License,
-// Version 2.0 (the "License"); you may not use this file except
-// in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-import ballerina/email;
-
-email:SmtpConfig smtpConfig = {
-    port: 3465,
-    enableSsl: true
-};
-
-function testSendSimpleEmail(string host, string username, string password, string toAddress, string subject,
-        string body, string fromAddress) returns email:Error? {
-    email:SmtpClient smtpClient = new (host, username,  password, smtpConfig);
-    email:Email email = {
-        to: [toAddress],
-        subject: subject,
-        body: body,
-        'from: fromAddress
-    };
-    return smtpClient->send(email);
-}
diff --git a/stdlib/email/src/test/resources/testng.xml b/stdlib/email/src/test/resources/testng.xml
deleted file mode 100644
index 877e9d36e30..00000000000
--- a/stdlib/email/src/test/resources/testng.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  ~ Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
-  ~
-  ~ WSO2 Inc. licenses this file to you under the Apache License,
-  ~ Version 2.0 (the "License"); you may not use this file except
-  ~ in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~ http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing,
-  ~ software distributed under the License is distributed on an
-  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-  ~ KIND, either express or implied. See the License for the
-  ~ specific language governing permissions and limitations
-  ~ under the License.
-  -->
-
-<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >
-
-<suite name="ballerina-test-suite">
-    <listeners>
-        <listener class-name="org.ballerinalang.test.listener.JBallerinaTestInitializer"/>
-    </listeners>
-    <test name="ballerina-lang-test-suite" preserve-order="true" parallel="false">
-        <classes>
-            <class name="org.ballerinalang.stdlib.email.SmtpSimpleSecureEmailSendTest"/>
-            <class name="org.ballerinalang.stdlib.email.SmtpComplexEmailSendTest"/>
-            <class name="org.ballerinalang.stdlib.email.PopSimpleSecureEmailReceiveTest"/>
-            <class name="org.ballerinalang.stdlib.email.PopComplexEmailReceiveTest"/>
-            <class name="org.ballerinalang.stdlib.email.ImapSimpleSecureEmailReceiveTest"/>
-            <class name="org.ballerinalang.stdlib.email.ImapComplexEmailReceiveTest"/>
-            <class name="org.ballerinalang.stdlib.email.ListenerImapReceiveTest"/>
-            <class name="org.ballerinalang.stdlib.email.ListenerPopReceiveTest"/>
-        </classes>
-    </test>
-</suite>
diff --git a/tests/jballerina-unit-test/build.gradle b/tests/jballerina-unit-test/build.gradle
index d8c32568e05..099a3ae0a29 100644
--- a/tests/jballerina-unit-test/build.gradle
+++ b/tests/jballerina-unit-test/build.gradle
@@ -67,7 +67,6 @@ dependencies {
     baloTestImplementation project(path: ':ballerina-http', configuration: 'baloImplementation')
     baloTestImplementation project(path: ':ballerina-config-api', configuration: 'baloImplementation')
     baloTestImplementation project(path: ':ballerina-log-api', configuration: 'baloImplementation')
-    baloTestImplementation project(path: ':ballerina-email', configuration: 'baloImplementation')
     baloTestImplementation project(path: ':ballerina-file', configuration: 'baloImplementation')
     baloTestImplementation project(path: ':ballerina-auth', configuration: 'baloImplementation')
     baloTestImplementation project(path: ':ballerina-mime', configuration: 'baloImplementation')
diff --git a/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/main.bal b/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/main.bal
index 046d9eb8916..25d4053339b 100644
--- a/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/main.bal
+++ b/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/main.bal
@@ -16,12 +16,12 @@
 
 import ballerina/io;
 import ballerina/http;
-import ballerina/email;
+//import ballerina/email;
 
 // main bal
 
 http:Client clientEndpoint = new("http://postman-echo.com");
-email:SmtpClient smtpClient = new ("localhost", "admin","admin");
+//email:SmtpClient smtpClient = new ("localhost", "admin","admin");
 
 function doGet() returns http:Response {
     http:Request req = new;
@@ -53,20 +53,20 @@ function doGetRepeat() returns http:Response {
 }
 
 
-function sendNotification(string[] emailIds) returns error? {
-    email:Email msg = {
-        'from: "builder@abc.com",
-        subject: "Error Alert ...",
-        to: emailIds,
-        body: ""
-    };
-    email:Error? response = smtpClient->send(msg);
-
-    if (response is error) {
-      io:println("error while sending the email: " + response.message());
-      return response;
-    }
-}
+//function sendNotification(string[] emailIds) returns error? {
+//    email:Email msg = {
+//        'from: "builder@abc.com",
+//        subject: "Error Alert ...",
+//        to: emailIds,
+//        body: ""
+//    };
+//    email:Error? response = smtpClient->send(msg);
+//
+//    if (response is error) {
+//      io:println("error while sending the email: " + response.message());
+//      return response;
+//    }
+//}
 
 function getClientUrl() returns string {
     return clientEndpoint.url;
diff --git a/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/tests/main_test.bal b/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/tests/main_test.bal
index 306647e6829..e624773a318 100644
--- a/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/tests/main_test.bal
+++ b/tests/testerina-integration-test/src/test/resources/project-based-tests/mocking-tests/src/object-mock/tests/main_test.bal
@@ -16,7 +16,7 @@
 
 import ballerina/test;
 import ballerina/http;
-import ballerina/email;
+//import ballerina/email;
 
 // Mock object definition
 public type MockHttpClient client object {
@@ -62,33 +62,33 @@ function testProvideAReturnValueBasedOnInput() {
   test:assertEquals(res.statusCode, 200);
 }
 
-@test:Config {}
-function testProvideErrorAsReturnValue() {
-
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient);
-  smtpClient = mockSmtpClient;
-
-  string[] emailIds = ["user1@test.com", "user2@test.com"];
-  error? errMock = email:SendError("email sending failed");
-  test:prepare(mockSmtpClient).when("send").thenReturn(errMock);
-  error? err = sendNotification(emailIds);
-  test:assertTrue(err is error);
-}
-
-@test:Config {}
-function testDoNothing() {
-
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient);
-  http:Response mockResponse = new;
-  mockResponse.statusCode = 500;
-
-  test:prepare(mockSmtpClient).when("send").doNothing();
-  smtpClient = mockSmtpClient;
-
-  string[] emailIds = ["user1@test.com", "user2@test.com"];
-  error? err = sendNotification(emailIds);
-  test:assertEquals(err, ());
-}
+//@test:Config {}
+//function testProvideErrorAsReturnValue() {
+//
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient);
+//  smtpClient = mockSmtpClient;
+//
+//  string[] emailIds = ["user1@test.com", "user2@test.com"];
+//  error? errMock = email:SendError("email sending failed");
+//  test:prepare(mockSmtpClient).when("send").thenReturn(errMock);
+//  error? err = sendNotification(emailIds);
+//  test:assertTrue(err is error);
+//}
+
+//@test:Config {}
+//function testDoNothing() {
+//
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient);
+//  http:Response mockResponse = new;
+//  mockResponse.statusCode = 500;
+//
+//  test:prepare(mockSmtpClient).when("send").doNothing();
+//  smtpClient = mockSmtpClient;
+//
+//  string[] emailIds = ["user1@test.com", "user2@test.com"];
+//  error? err = sendNotification(emailIds);
+//  test:assertEquals(err, ());
+//}
 
 @test:Config {}
 function testMockMemberVarible() {
@@ -115,31 +115,31 @@ function testProvideAReturnSequence() {
 # VALIDATION CASES
 # 1 - Validations for user defined mock object
 
-public type MockSmtpClientEmpty client object {};
-
-public type MockSmtpClient client object {
-  public remote function send(email:Email email) returns email:Error?  {
-     // do nothing
-  }
-};
-
-public type MockSmtpClientFuncErr client object {
-  public remote function sendMail(email:Email email) returns email:Error?  {
-      // do nothing
-  }
-};
-
-public type MockSmtpClientSigErr client object {
-  public remote function send(email:Email email) returns string {
-    return "";
-  }
-};
-
-public type MockSmtpClientSigErr2 client object {
-  public remote function send(string[] email) returns string {
-    return "";
-  }
-};
+//public type MockSmtpClientEmpty client object {};
+//
+//public type MockSmtpClient client object {
+//  public remote function send(email:Email email) returns email:Error?  {
+//     // do nothing
+//  }
+//};
+//
+//public type MockSmtpClientFuncErr client object {
+//  public remote function sendMail(email:Email email) returns email:Error?  {
+//      // do nothing
+//  }
+//};
+//
+//public type MockSmtpClientSigErr client object {
+//  public remote function send(email:Email email) returns string {
+//    return "";
+//  }
+//};
+//
+//public type MockSmtpClientSigErr2 client object {
+//  public remote function send(string[] email) returns string {
+//    return "";
+//  }
+//};
 
 public type MockHttpClientSigErr client object {
   public remote function get(@untainted string path, any message = ()) returns http:Response|http:ClientError {
@@ -149,44 +149,44 @@ public type MockHttpClientSigErr client object {
   }
 };
 
-// 1.1) when the user-defined mock object is empty
-@test:Config {}
-function testEmptyUserDefinedObj() {
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientEmpty());
-  smtpClient = mockSmtpClient;
-}
-
-
-// 1.2) when user-defined object is passed to test:prepare function
-@test:Config {}
-function testUserDefinedMockRegisterCases() {
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClient()); 
-  test:prepare(mockSmtpClient).when("send").doNothing();
-}
-
-// 1.3) when the functions in mock is not available in the original
-@test:Config {}
-function testUserDefinedMockInvalidFunction() {
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientFuncErr());
-  smtpClient = mockSmtpClient;
-  error? sendNotificationResult = sendNotification(["user1@test.com"]);
-}
-
-// 1.4.1) when the function return types do not match
-@test:Config {}
-function testUserDefinedMockFunctionSignatureMismatch() {
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientSigErr());
-  smtpClient = mockSmtpClient;
-  error? sendNotificationResult = sendNotification(["user1@test.com"]);
-}
-
-// 1.4.2) when the function parameters do not match
-@test:Config {}
-function testUserDefinedMockFunctionSignatureMismatch2() {
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientSigErr2());
-  smtpClient = mockSmtpClient;
-  error? sendNotificationResult = sendNotification(["user1@test.com"]);
-}
+//// 1.1) when the user-defined mock object is empty
+//@test:Config {}
+//function testEmptyUserDefinedObj() {
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientEmpty());
+//  smtpClient = mockSmtpClient;
+//}
+//
+//
+//// 1.2) when user-defined object is passed to test:prepare function
+//@test:Config {}
+//function testUserDefinedMockRegisterCases() {
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClient());
+//  test:prepare(mockSmtpClient).when("send").doNothing();
+//}
+//
+//// 1.3) when the functions in mock is not available in the original
+//@test:Config {}
+//function testUserDefinedMockInvalidFunction() {
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientFuncErr());
+//  smtpClient = mockSmtpClient;
+//  error? sendNotificationResult = sendNotification(["user1@test.com"]);
+//}
+//
+//// 1.4.1) when the function return types do not match
+//@test:Config {}
+//function testUserDefinedMockFunctionSignatureMismatch() {
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientSigErr());
+//  smtpClient = mockSmtpClient;
+//  error? sendNotificationResult = sendNotification(["user1@test.com"]);
+//}
+//
+//// 1.4.2) when the function parameters do not match
+//@test:Config {}
+//function testUserDefinedMockFunctionSignatureMismatch2() {
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient, new MockSmtpClientSigErr2());
+//  smtpClient = mockSmtpClient;
+//  error? sendNotificationResult = sendNotification(["user1@test.com"]);
+//}
 
 // 1.4.3
 @test:Config {}
@@ -196,12 +196,12 @@ function testUserDefinedMockFunctionSignatureMismatch3() {
 
 # 2 - Validations for framework provided default mock object
 
-// 2.1  when the function called in mock is not available in the original
-@test:Config {}
-function testDefaultMockInvalidFunctionName() {
-  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient);
-  test:prepare(mockSmtpClient).when("get").doNothing();
-}
+//// 2.1  when the function called in mock is not available in the original
+//@test:Config {}
+//function testDefaultMockInvalidFunctionName() {
+//  email:SmtpClient mockSmtpClient = test:mock(email:SmtpClient);
+//  test:prepare(mockSmtpClient).when("get").doNothing();
+//}
 
 // 2.2) call doNothing() - the function has a return type specified
 @test:Config {}
-- 
2.19.1

